
GPIO_PWM_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003068  08003068  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003068  08003068  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003068  08003068  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  0800307c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  0800307c  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cb3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001376  00000000  00000000  00028cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000930  00000000  00000000  0002a068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000888  00000000  00000000  0002a998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018de0  00000000  00000000  0002b220  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006c24  00000000  00000000  00044000  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009399a  00000000  00000000  0004ac24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de5be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f8  00000000  00000000  000de63c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003020 	.word	0x08003020

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003020 	.word	0x08003020

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa7b 	bl	80006c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f88f 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f95d 	bl	8000494 <MX_GPIO_Init>
  MX_TIM4_Init();
 80001da:	f000 f8cd 	bl	8000378 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80001de:	2100      	movs	r1, #0
 80001e0:	4841      	ldr	r0, [pc, #260]	; (80002e8 <main+0x120>)
 80001e2:	f001 feb1 	bl	8001f48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80001e6:	2104      	movs	r1, #4
 80001e8:	483f      	ldr	r0, [pc, #252]	; (80002e8 <main+0x120>)
 80001ea:	f001 fead 	bl	8001f48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80001ee:	2108      	movs	r1, #8
 80001f0:	483d      	ldr	r0, [pc, #244]	; (80002e8 <main+0x120>)
 80001f2:	f001 fea9 	bl	8001f48 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      for(i=0; i <= 524288; i++)
 80001f6:	2300      	movs	r3, #0
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	e070      	b.n	80002de <main+0x116>
      {
              if(i < 65536)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000202:	d203      	bcs.n	800020c <main+0x44>
            	  TIM4->CCR1 = i;
 8000204:	4a39      	ldr	r2, [pc, #228]	; (80002ec <main+0x124>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	6353      	str	r3, [r2, #52]	; 0x34
 800020a:	e05c      	b.n	80002c6 <main+0xfe>
              else if ((i > 65535) && (i < 131072))
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000212:	d30b      	bcc.n	800022c <main+0x64>
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800021a:	d207      	bcs.n	800022c <main+0x64>
            	  TIM4->CCR1 = 131071 - i;
 800021c:	4a33      	ldr	r2, [pc, #204]	; (80002ec <main+0x124>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f5c3 33ff 	rsb	r3, r3, #130560	; 0x1fe00
 8000224:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000228:	6353      	str	r3, [r2, #52]	; 0x34
 800022a:	e04c      	b.n	80002c6 <main+0xfe>
              else if((i > 131071) && (i < 196608))
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000232:	d309      	bcc.n	8000248 <main+0x80>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800023a:	d205      	bcs.n	8000248 <main+0x80>
            	  TIM4->CCR2 = i - 131072;
 800023c:	4a2b      	ldr	r2, [pc, #172]	; (80002ec <main+0x124>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
 8000244:	6393      	str	r3, [r2, #56]	; 0x38
 8000246:	e03e      	b.n	80002c6 <main+0xfe>
              else if ((i > 196607) && (i < 262164))
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800024e:	d30a      	bcc.n	8000266 <main+0x9e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4a27      	ldr	r2, [pc, #156]	; (80002f0 <main+0x128>)
 8000254:	4293      	cmp	r3, r2
 8000256:	d806      	bhi.n	8000266 <main+0x9e>
            	  TIM4->CCR2 = 262164 - i;
 8000258:	4a24      	ldr	r2, [pc, #144]	; (80002ec <main+0x124>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f5c3 2380 	rsb	r3, r3, #262144	; 0x40000
 8000260:	3314      	adds	r3, #20
 8000262:	6393      	str	r3, [r2, #56]	; 0x38
 8000264:	e02f      	b.n	80002c6 <main+0xfe>
              else if((i > 262163) && (i < 327680))
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4a21      	ldr	r2, [pc, #132]	; (80002f0 <main+0x128>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d90a      	bls.n	8000284 <main+0xbc>
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000274:	d206      	bcs.n	8000284 <main+0xbc>
            	  TIM4->CCR3 = i - 262164;
 8000276:	4a1d      	ldr	r2, [pc, #116]	; (80002ec <main+0x124>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
 800027e:	3b14      	subs	r3, #20
 8000280:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000282:	e020      	b.n	80002c6 <main+0xfe>
              else if ((i > 327679) && (i < 393216))
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800028a:	d309      	bcc.n	80002a0 <main+0xd8>
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8000292:	d205      	bcs.n	80002a0 <main+0xd8>
            	  TIM4->CCR3 = 393216 - i;
 8000294:	4a15      	ldr	r2, [pc, #84]	; (80002ec <main+0x124>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f5c3 23c0 	rsb	r3, r3, #393216	; 0x60000
 800029c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800029e:	e012      	b.n	80002c6 <main+0xfe>
              else if((i > 393216) && (i < 458752))
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80002a6:	d909      	bls.n	80002bc <main+0xf4>
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80002ae:	d205      	bcs.n	80002bc <main+0xf4>
            	  TIM4->CCR4 = i - 393216;
 80002b0:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <main+0x124>)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f5a3 23c0 	sub.w	r3, r3, #393216	; 0x60000
 80002b8:	6413      	str	r3, [r2, #64]	; 0x40
 80002ba:	e004      	b.n	80002c6 <main+0xfe>
              else
            	  TIM4->CCR4 = 524288 - i;
 80002bc:	4a0b      	ldr	r2, [pc, #44]	; (80002ec <main+0x124>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f5c3 2300 	rsb	r3, r3, #524288	; 0x80000
 80002c4:	6413      	str	r3, [r2, #64]	; 0x40
              for(d = 0; d < 100; d++)
 80002c6:	2300      	movs	r3, #0
 80002c8:	603b      	str	r3, [r7, #0]
 80002ca:	e002      	b.n	80002d2 <main+0x10a>
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	3301      	adds	r3, #1
 80002d0:	603b      	str	r3, [r7, #0]
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	2b63      	cmp	r3, #99	; 0x63
 80002d6:	d9f9      	bls.n	80002cc <main+0x104>
      for(i=0; i <= 524288; i++)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	3301      	adds	r3, #1
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80002e4:	d98a      	bls.n	80001fc <main+0x34>
 80002e6:	e786      	b.n	80001f6 <main+0x2e>
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40000800 	.word	0x40000800
 80002f0:	00040013 	.word	0x00040013

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b090      	sub	sp, #64	; 0x40
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fe84 	bl	8003010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000316:	2302      	movs	r3, #2
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	2310      	movs	r3, #16
 8000320:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000322:	2302      	movs	r3, #2
 8000324:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000326:	2300      	movs	r3, #0
 8000328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800032a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800032e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	f107 0318 	add.w	r3, r7, #24
 8000334:	4618      	mov	r0, r3
 8000336:	f000 fcb9 	bl	8000cac <HAL_RCC_OscConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000340:	f000 f8c0 	bl	80004c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000344:	230f      	movs	r3, #15
 8000346:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	2302      	movs	r3, #2
 800034a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2102      	movs	r1, #2
 800035e:	4618      	mov	r0, r3
 8000360:	f001 fbac 	bl	8001abc <HAL_RCC_ClockConfig>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800036a:	f000 f8ab 	bl	80004c4 <Error_Handler>
  }
}
 800036e:	bf00      	nop
 8000370:	3740      	adds	r7, #64	; 0x40
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08e      	sub	sp, #56	; 0x38
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
 8000386:	605a      	str	r2, [r3, #4]
 8000388:	609a      	str	r2, [r3, #8]
 800038a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038c:	f107 031c 	add.w	r3, r7, #28
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000398:	463b      	mov	r3, r7
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	611a      	str	r2, [r3, #16]
 80003a6:	615a      	str	r2, [r3, #20]
 80003a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80003aa:	4b38      	ldr	r3, [pc, #224]	; (800048c <MX_TIM4_Init+0x114>)
 80003ac:	4a38      	ldr	r2, [pc, #224]	; (8000490 <MX_TIM4_Init+0x118>)
 80003ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80003b0:	4b36      	ldr	r3, [pc, #216]	; (800048c <MX_TIM4_Init+0x114>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b6:	4b35      	ldr	r3, [pc, #212]	; (800048c <MX_TIM4_Init+0x114>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80003bc:	4b33      	ldr	r3, [pc, #204]	; (800048c <MX_TIM4_Init+0x114>)
 80003be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c4:	4b31      	ldr	r3, [pc, #196]	; (800048c <MX_TIM4_Init+0x114>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003ca:	4b30      	ldr	r3, [pc, #192]	; (800048c <MX_TIM4_Init+0x114>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003d0:	482e      	ldr	r0, [pc, #184]	; (800048c <MX_TIM4_Init+0x114>)
 80003d2:	f001 fd59 	bl	8001e88 <HAL_TIM_Base_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80003dc:	f000 f872 	bl	80004c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80003e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ea:	4619      	mov	r1, r3
 80003ec:	4827      	ldr	r0, [pc, #156]	; (800048c <MX_TIM4_Init+0x114>)
 80003ee:	f002 f83b 	bl	8002468 <HAL_TIM_ConfigClockSource>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80003f8:	f000 f864 	bl	80004c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80003fc:	4823      	ldr	r0, [pc, #140]	; (800048c <MX_TIM4_Init+0x114>)
 80003fe:	f001 fd6e 	bl	8001ede <HAL_TIM_PWM_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000408:	f000 f85c 	bl	80004c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800040c:	2300      	movs	r3, #0
 800040e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000410:	2300      	movs	r3, #0
 8000412:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000414:	f107 031c 	add.w	r3, r7, #28
 8000418:	4619      	mov	r1, r3
 800041a:	481c      	ldr	r0, [pc, #112]	; (800048c <MX_TIM4_Init+0x114>)
 800041c:	f002 fd36 	bl	8002e8c <HAL_TIMEx_MasterConfigSynchronization>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000426:	f000 f84d 	bl	80004c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800042a:	2360      	movs	r3, #96	; 0x60
 800042c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800043a:	463b      	mov	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	4619      	mov	r1, r3
 8000440:	4812      	ldr	r0, [pc, #72]	; (800048c <MX_TIM4_Init+0x114>)
 8000442:	f001 fef9 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800044c:	f000 f83a 	bl	80004c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000450:	463b      	mov	r3, r7
 8000452:	2204      	movs	r2, #4
 8000454:	4619      	mov	r1, r3
 8000456:	480d      	ldr	r0, [pc, #52]	; (800048c <MX_TIM4_Init+0x114>)
 8000458:	f001 feee 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8000462:	f000 f82f 	bl	80004c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000466:	463b      	mov	r3, r7
 8000468:	2208      	movs	r2, #8
 800046a:	4619      	mov	r1, r3
 800046c:	4807      	ldr	r0, [pc, #28]	; (800048c <MX_TIM4_Init+0x114>)
 800046e:	f001 fee3 	bl	8002238 <HAL_TIM_PWM_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000478:	f000 f824 	bl	80004c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800047c:	4803      	ldr	r0, [pc, #12]	; (800048c <MX_TIM4_Init+0x114>)
 800047e:	f000 f873 	bl	8000568 <HAL_TIM_MspPostInit>

}
 8000482:	bf00      	nop
 8000484:	3738      	adds	r7, #56	; 0x38
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000028 	.word	0x20000028
 8000490:	40000800 	.word	0x40000800

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800049a:	4b09      	ldr	r3, [pc, #36]	; (80004c0 <MX_GPIO_Init+0x2c>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a08      	ldr	r2, [pc, #32]	; (80004c0 <MX_GPIO_Init+0x2c>)
 80004a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004a4:	6153      	str	r3, [r2, #20]
 80004a6:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <MX_GPIO_Init+0x2c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

}
 80004b2:	bf00      	nop
 80004b4:	370c      	adds	r7, #12
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000

080004c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_MspInit+0x44>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_MspInit+0x44>)
 80004e0:	f043 0301 	orr.w	r3, r3, #1
 80004e4:	6193      	str	r3, [r2, #24]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <HAL_MspInit+0x44>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <HAL_MspInit+0x44>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a08      	ldr	r2, [pc, #32]	; (8000518 <HAL_MspInit+0x44>)
 80004f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b06      	ldr	r3, [pc, #24]	; (8000518 <HAL_MspInit+0x44>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800050a:	2007      	movs	r0, #7
 800050c:	f000 fa12 	bl	8000934 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000

0800051c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <HAL_TIM_Base_MspInit+0x44>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d113      	bne.n	8000556 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <HAL_TIM_Base_MspInit+0x48>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a0c      	ldr	r2, [pc, #48]	; (8000564 <HAL_TIM_Base_MspInit+0x48>)
 8000534:	f043 0304 	orr.w	r3, r3, #4
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <HAL_TIM_Base_MspInit+0x48>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	201e      	movs	r0, #30
 800054c:	f000 f9fd 	bl	800094a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000550:	201e      	movs	r0, #30
 8000552:	f000 fa16 	bl	8000982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40000800 	.word	0x40000800
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a11      	ldr	r2, [pc, #68]	; (80005cc <HAL_TIM_MspPostInit+0x64>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d11c      	bne.n	80005c4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <HAL_TIM_MspPostInit+0x68>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <HAL_TIM_MspPostInit+0x68>)
 8000590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_TIM_MspPostInit+0x68>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80005a2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80005a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a8:	2302      	movs	r3, #2
 80005aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b0:	2303      	movs	r3, #3
 80005b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80005b4:	2302      	movs	r3, #2
 80005b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4619      	mov	r1, r3
 80005be:	4805      	ldr	r0, [pc, #20]	; (80005d4 <HAL_TIM_MspPostInit+0x6c>)
 80005c0:	f000 f9fa 	bl	80009b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40000800 	.word	0x40000800
 80005d0:	40021000 	.word	0x40021000
 80005d4:	48000c00 	.word	0x48000c00

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr

080005e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <HardFault_Handler+0x4>

080005ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <MemManage_Handler+0x4>

080005f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <UsageFault_Handler+0x4>

080005fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062c:	f000 f892 	bl	8000754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <TIM4_IRQHandler+0x10>)
 800063a:	f001 fcdd 	bl	8001ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000028 	.word	0x20000028

08000648 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <SystemInit+0x28>)
 800064e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <SystemInit+0x28>)
 8000654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <SystemInit+0x28>)
 800065e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000662:	609a      	str	r2, [r3, #8]
#endif
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000674:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006ac <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000678:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800067a:	e003      	b.n	8000684 <LoopCopyDataInit>

0800067c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800067e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000680:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000682:	3104      	adds	r1, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000686:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000688:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800068a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800068c:	d3f6      	bcc.n	800067c <CopyDataInit>
	ldr	r2, =_sbss
 800068e:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000690:	e002      	b.n	8000698 <LoopFillZerobss>

08000692 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000692:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000694:	f842 3b04 	str.w	r3, [r2], #4

08000698 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000698:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <LoopForever+0x16>)
	cmp	r2, r3
 800069a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800069c:	d3f9      	bcc.n	8000692 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800069e:	f7ff ffd3 	bl	8000648 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006a2:	f002 fc91 	bl	8002fc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006a6:	f7ff fd8f 	bl	80001c8 <main>

080006aa <LoopForever>:

LoopForever:
    b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006ac:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80006b0:	08003070 	.word	0x08003070
	ldr	r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006b8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80006bc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80006c0:	2000006c 	.word	0x2000006c

080006c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC1_2_IRQHandler>
	...

080006c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_Init+0x28>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <HAL_Init+0x28>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f92b 	bl	8000934 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006de:	2000      	movs	r0, #0
 80006e0:	f000 f808 	bl	80006f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006e4:	f7ff fef6 	bl	80004d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40022000 	.word	0x40022000

080006f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <HAL_InitTick+0x54>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_InitTick+0x58>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4619      	mov	r1, r3
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	fbb3 f3f1 	udiv	r3, r3, r1
 800070e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f943 	bl	800099e <HAL_SYSTICK_Config>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	e00e      	b.n	8000740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	d80a      	bhi.n	800073e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000728:	2200      	movs	r2, #0
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	f04f 30ff 	mov.w	r0, #4294967295
 8000730:	f000 f90b 	bl	800094a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <HAL_InitTick+0x5c>)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
 800073c:	e000      	b.n	8000740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000000 	.word	0x20000000
 800074c:	20000008 	.word	0x20000008
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_IncTick+0x20>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	461a      	mov	r2, r3
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <HAL_IncTick+0x24>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4413      	add	r3, r2
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <HAL_IncTick+0x24>)
 8000766:	6013      	str	r3, [r2, #0]
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000008 	.word	0x20000008
 8000778:	20000068 	.word	0x20000068

0800077c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <HAL_GetTick+0x14>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	4618      	mov	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000068 	.word	0x20000068

08000794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	60d3      	str	r3, [r2, #12]
}
 80007cc:	bf00      	nop
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <__NVIC_GetPriorityGrouping+0x18>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	f003 0307 	and.w	r3, r3, #7
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000806:	2b00      	cmp	r3, #0
 8000808:	db0b      	blt.n	8000822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 021f 	and.w	r2, r3, #31
 8000810:	4907      	ldr	r1, [pc, #28]	; (8000830 <__NVIC_EnableIRQ+0x38>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	095b      	lsrs	r3, r3, #5
 8000818:	2001      	movs	r0, #1
 800081a:	fa00 f202 	lsl.w	r2, r0, r2
 800081e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000822:	bf00      	nop
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000e100 	.word	0xe000e100

08000834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000844:	2b00      	cmp	r3, #0
 8000846:	db0a      	blt.n	800085e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	490c      	ldr	r1, [pc, #48]	; (8000880 <__NVIC_SetPriority+0x4c>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	0112      	lsls	r2, r2, #4
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	440b      	add	r3, r1
 8000858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800085c:	e00a      	b.n	8000874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4908      	ldr	r1, [pc, #32]	; (8000884 <__NVIC_SetPriority+0x50>)
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f003 030f 	and.w	r3, r3, #15
 800086a:	3b04      	subs	r3, #4
 800086c:	0112      	lsls	r2, r2, #4
 800086e:	b2d2      	uxtb	r2, r2
 8000870:	440b      	add	r3, r1
 8000872:	761a      	strb	r2, [r3, #24]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	e000e100 	.word	0xe000e100
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000888:	b480      	push	{r7}
 800088a:	b089      	sub	sp, #36	; 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	f1c3 0307 	rsb	r3, r3, #7
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	bf28      	it	cs
 80008a6:	2304      	movcs	r3, #4
 80008a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	3304      	adds	r3, #4
 80008ae:	2b06      	cmp	r3, #6
 80008b0:	d902      	bls.n	80008b8 <NVIC_EncodePriority+0x30>
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	3b03      	subs	r3, #3
 80008b6:	e000      	b.n	80008ba <NVIC_EncodePriority+0x32>
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295
 80008c0:	69bb      	ldr	r3, [r7, #24]
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43da      	mvns	r2, r3
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	401a      	ands	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d0:	f04f 31ff 	mov.w	r1, #4294967295
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	fa01 f303 	lsl.w	r3, r1, r3
 80008da:	43d9      	mvns	r1, r3
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e0:	4313      	orrs	r3, r2
         );
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3724      	adds	r7, #36	; 0x24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000900:	d301      	bcc.n	8000906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000902:	2301      	movs	r3, #1
 8000904:	e00f      	b.n	8000926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <SysTick_Config+0x40>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090e:	210f      	movs	r1, #15
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f7ff ff8e 	bl	8000834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SysTick_Config+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <SysTick_Config+0x40>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010

08000934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff29 	bl	8000794 <__NVIC_SetPriorityGrouping>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800095c:	f7ff ff3e 	bl	80007dc <__NVIC_GetPriorityGrouping>
 8000960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff ff8e 	bl	8000888 <NVIC_EncodePriority>
 800096c:	4602      	mov	r2, r0
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff5d 	bl	8000834 <__NVIC_SetPriority>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff31 	bl	80007f8 <__NVIC_EnableIRQ>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff ffa2 	bl	80008f0 <SysTick_Config>
 80009ac:	4603      	mov	r3, r0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b087      	sub	sp, #28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c6:	e154      	b.n	8000c72 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	2101      	movs	r1, #1
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	fa01 f303 	lsl.w	r3, r1, r3
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 8146 	beq.w	8000c6c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d00b      	beq.n	8000a00 <HAL_GPIO_Init+0x48>
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d007      	beq.n	8000a00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f4:	2b11      	cmp	r3, #17
 80009f6:	d003      	beq.n	8000a00 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2b12      	cmp	r3, #18
 80009fe:	d130      	bne.n	8000a62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68da      	ldr	r2, [r3, #12]
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4313      	orrs	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	693a      	ldr	r2, [r7, #16]
 8000a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a36:	2201      	movs	r2, #1
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	091b      	lsrs	r3, r3, #4
 8000a4c:	f003 0201 	and.w	r2, r3, #1
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	689a      	ldr	r2, [r3, #8]
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_Init+0xea>
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	2b12      	cmp	r3, #18
 8000aa0:	d123      	bne.n	8000aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	08da      	lsrs	r2, r3, #3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3208      	adds	r2, #8
 8000aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	220f      	movs	r2, #15
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	691a      	ldr	r2, [r3, #16]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f003 0307 	and.w	r3, r3, #7
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	08da      	lsrs	r2, r3, #3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3208      	adds	r2, #8
 8000ae4:	6939      	ldr	r1, [r7, #16]
 8000ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0203 	and.w	r2, r3, #3
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f000 80a0 	beq.w	8000c6c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2c:	4b58      	ldr	r3, [pc, #352]	; (8000c90 <HAL_GPIO_Init+0x2d8>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a57      	ldr	r2, [pc, #348]	; (8000c90 <HAL_GPIO_Init+0x2d8>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b55      	ldr	r3, [pc, #340]	; (8000c90 <HAL_GPIO_Init+0x2d8>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b44:	4a53      	ldr	r2, [pc, #332]	; (8000c94 <HAL_GPIO_Init+0x2dc>)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	089b      	lsrs	r3, r3, #2
 8000b4a:	3302      	adds	r3, #2
 8000b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	f003 0303 	and.w	r3, r3, #3
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	220f      	movs	r2, #15
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b6e:	d019      	beq.n	8000ba4 <HAL_GPIO_Init+0x1ec>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4a49      	ldr	r2, [pc, #292]	; (8000c98 <HAL_GPIO_Init+0x2e0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d013      	beq.n	8000ba0 <HAL_GPIO_Init+0x1e8>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a48      	ldr	r2, [pc, #288]	; (8000c9c <HAL_GPIO_Init+0x2e4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d00d      	beq.n	8000b9c <HAL_GPIO_Init+0x1e4>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a47      	ldr	r2, [pc, #284]	; (8000ca0 <HAL_GPIO_Init+0x2e8>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d007      	beq.n	8000b98 <HAL_GPIO_Init+0x1e0>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a46      	ldr	r2, [pc, #280]	; (8000ca4 <HAL_GPIO_Init+0x2ec>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d101      	bne.n	8000b94 <HAL_GPIO_Init+0x1dc>
 8000b90:	2304      	movs	r3, #4
 8000b92:	e008      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000b94:	2305      	movs	r3, #5
 8000b96:	e006      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e004      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	e002      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e000      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	f002 0203 	and.w	r2, r2, #3
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	4093      	lsls	r3, r2
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bb6:	4937      	ldr	r1, [pc, #220]	; (8000c94 <HAL_GPIO_Init+0x2dc>)
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bc4:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <HAL_GPIO_Init+0x2f0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000be8:	4a2f      	ldr	r2, [pc, #188]	; (8000ca8 <HAL_GPIO_Init+0x2f0>)
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000bee:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <HAL_GPIO_Init+0x2f0>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c12:	4a25      	ldr	r2, [pc, #148]	; (8000ca8 <HAL_GPIO_Init+0x2f0>)
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <HAL_GPIO_Init+0x2f0>)
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	43db      	mvns	r3, r3
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	4013      	ands	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d003      	beq.n	8000c3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c3c:	4a1a      	ldr	r2, [pc, #104]	; (8000ca8 <HAL_GPIO_Init+0x2f0>)
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_GPIO_Init+0x2f0>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c66:	4a10      	ldr	r2, [pc, #64]	; (8000ca8 <HAL_GPIO_Init+0x2f0>)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f47f aea3 	bne.w	80009c8 <HAL_GPIO_Init+0x10>
  }
}
 8000c82:	bf00      	nop
 8000c84:	371c      	adds	r7, #28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010000 	.word	0x40010000
 8000c98:	48000400 	.word	0x48000400
 8000c9c:	48000800 	.word	0x48000800
 8000ca0:	48000c00 	.word	0x48000c00
 8000ca4:	48001000 	.word	0x48001000
 8000ca8:	40010400 	.word	0x40010400

08000cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f000 bef4 	b.w	8001aae <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f003 0301 	and.w	r3, r3, #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 816a 	beq.w	8000faa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000cd6:	4bb3      	ldr	r3, [pc, #716]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d00c      	beq.n	8000cfc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce2:	4bb0      	ldr	r3, [pc, #704]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	d159      	bne.n	8000da2 <HAL_RCC_OscConfig+0xf6>
 8000cee:	4bad      	ldr	r3, [pc, #692]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cfa:	d152      	bne.n	8000da2 <HAL_RCC_OscConfig+0xf6>
 8000cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d00:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d04:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000d08:	fa93 f3a3 	rbit	r3, r3
 8000d0c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d10:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d14:	fab3 f383 	clz	r3, r3
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d102      	bne.n	8000d2e <HAL_RCC_OscConfig+0x82>
 8000d28:	4b9e      	ldr	r3, [pc, #632]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	e015      	b.n	8000d5a <HAL_RCC_OscConfig+0xae>
 8000d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d32:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d36:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000d3a:	fa93 f3a3 	rbit	r3, r3
 8000d3e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d46:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d4a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000d4e:	fa93 f3a3 	rbit	r3, r3
 8000d52:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000d56:	4b93      	ldr	r3, [pc, #588]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d5e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000d62:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d66:	fa92 f2a2 	rbit	r2, r2
 8000d6a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000d6e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000d72:	fab2 f282 	clz	r2, r2
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	f042 0220 	orr.w	r2, r2, #32
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	f002 021f 	and.w	r2, r2, #31
 8000d82:	2101      	movs	r1, #1
 8000d84:	fa01 f202 	lsl.w	r2, r1, r2
 8000d88:	4013      	ands	r3, r2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 810c 	beq.w	8000fa8 <HAL_RCC_OscConfig+0x2fc>
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 8106 	bne.w	8000fa8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	f000 be86 	b.w	8001aae <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dac:	d106      	bne.n	8000dbc <HAL_RCC_OscConfig+0x110>
 8000dae:	4b7d      	ldr	r3, [pc, #500]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a7c      	ldr	r2, [pc, #496]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000db8:	6013      	str	r3, [r2, #0]
 8000dba:	e030      	b.n	8000e1e <HAL_RCC_OscConfig+0x172>
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d10c      	bne.n	8000de0 <HAL_RCC_OscConfig+0x134>
 8000dc6:	4b77      	ldr	r3, [pc, #476]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a76      	ldr	r2, [pc, #472]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dd0:	6013      	str	r3, [r2, #0]
 8000dd2:	4b74      	ldr	r3, [pc, #464]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a73      	ldr	r2, [pc, #460]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ddc:	6013      	str	r3, [r2, #0]
 8000dde:	e01e      	b.n	8000e1e <HAL_RCC_OscConfig+0x172>
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dea:	d10c      	bne.n	8000e06 <HAL_RCC_OscConfig+0x15a>
 8000dec:	4b6d      	ldr	r3, [pc, #436]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a6c      	ldr	r2, [pc, #432]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b6a      	ldr	r3, [pc, #424]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a69      	ldr	r2, [pc, #420]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	e00b      	b.n	8000e1e <HAL_RCC_OscConfig+0x172>
 8000e06:	4b67      	ldr	r3, [pc, #412]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a66      	ldr	r2, [pc, #408]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	4b64      	ldr	r3, [pc, #400]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a63      	ldr	r2, [pc, #396]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e1c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e1e:	4b61      	ldr	r3, [pc, #388]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e22:	f023 020f 	bic.w	r2, r3, #15
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	495d      	ldr	r1, [pc, #372]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d059      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fc9e 	bl	800077c <HAL_GetTick>
 8000e40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e44:	e00a      	b.n	8000e5c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e46:	f7ff fc99 	bl	800077c <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b64      	cmp	r3, #100	; 0x64
 8000e54:	d902      	bls.n	8000e5c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	f000 be29 	b.w	8001aae <HAL_RCC_OscConfig+0xe02>
 8000e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e60:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000e68:	fa93 f3a3 	rbit	r3, r3
 8000e6c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000e70:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e74:	fab3 f383 	clz	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d102      	bne.n	8000e8e <HAL_RCC_OscConfig+0x1e2>
 8000e88:	4b46      	ldr	r3, [pc, #280]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	e015      	b.n	8000eba <HAL_RCC_OscConfig+0x20e>
 8000e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e92:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e96:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000e9a:	fa93 f3a3 	rbit	r3, r3
 8000e9e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ea2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000eaa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000eae:	fa93 f3a3 	rbit	r3, r3
 8000eb2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000eb6:	4b3b      	ldr	r3, [pc, #236]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ebe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000ec2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000ec6:	fa92 f2a2 	rbit	r2, r2
 8000eca:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000ece:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000ed2:	fab2 f282 	clz	r2, r2
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	f042 0220 	orr.w	r2, r2, #32
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	f002 021f 	and.w	r2, r2, #31
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0ab      	beq.n	8000e46 <HAL_RCC_OscConfig+0x19a>
 8000eee:	e05c      	b.n	8000faa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fc44 	bl	800077c <HAL_GetTick>
 8000ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef8:	e00a      	b.n	8000f10 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000efa:	f7ff fc3f 	bl	800077c <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	; 0x64
 8000f08:	d902      	bls.n	8000f10 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	f000 bdcf 	b.w	8001aae <HAL_RCC_OscConfig+0xe02>
 8000f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f14:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f18:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000f1c:	fa93 f3a3 	rbit	r3, r3
 8000f20:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000f24:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	095b      	lsrs	r3, r3, #5
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d102      	bne.n	8000f42 <HAL_RCC_OscConfig+0x296>
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	e015      	b.n	8000f6e <HAL_RCC_OscConfig+0x2c2>
 8000f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f46:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f5e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000f62:	fa93 f3a3 	rbit	r3, r3
 8000f66:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <HAL_RCC_OscConfig+0x2f8>)
 8000f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f72:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000f76:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f7a:	fa92 f2a2 	rbit	r2, r2
 8000f7e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000f82:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f86:	fab2 f282 	clz	r2, r2
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	f042 0220 	orr.w	r2, r2, #32
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	f002 021f 	and.w	r2, r2, #31
 8000f96:	2101      	movs	r1, #1
 8000f98:	fa01 f202 	lsl.w	r2, r1, r2
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1ab      	bne.n	8000efa <HAL_RCC_OscConfig+0x24e>
 8000fa2:	e002      	b.n	8000faa <HAL_RCC_OscConfig+0x2fe>
 8000fa4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 816f 	beq.w	8001298 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fba:	4bd0      	ldr	r3, [pc, #832]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00b      	beq.n	8000fde <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fc6:	4bcd      	ldr	r3, [pc, #820]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d16c      	bne.n	80010ac <HAL_RCC_OscConfig+0x400>
 8000fd2:	4bca      	ldr	r3, [pc, #808]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d166      	bne.n	80010ac <HAL_RCC_OscConfig+0x400>
 8000fde:	2302      	movs	r3, #2
 8000fe0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fe8:	fa93 f3a3 	rbit	r3, r3
 8000fec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000ff0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff4:	fab3 f383 	clz	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d102      	bne.n	800100e <HAL_RCC_OscConfig+0x362>
 8001008:	4bbc      	ldr	r3, [pc, #752]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	e013      	b.n	8001036 <HAL_RCC_OscConfig+0x38a>
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001020:	2302      	movs	r3, #2
 8001022:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001026:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001032:	4bb2      	ldr	r3, [pc, #712]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	2202      	movs	r2, #2
 8001038:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800103c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001040:	fa92 f2a2 	rbit	r2, r2
 8001044:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001048:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800104c:	fab2 f282 	clz	r2, r2
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	f042 0220 	orr.w	r2, r2, #32
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	f002 021f 	and.w	r2, r2, #31
 800105c:	2101      	movs	r1, #1
 800105e:	fa01 f202 	lsl.w	r2, r1, r2
 8001062:	4013      	ands	r3, r2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d007      	beq.n	8001078 <HAL_RCC_OscConfig+0x3cc>
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	2b01      	cmp	r3, #1
 8001070:	d002      	beq.n	8001078 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	f000 bd1b 	b.w	8001aae <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001078:	4ba0      	ldr	r3, [pc, #640]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	21f8      	movs	r1, #248	; 0xf8
 8001088:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001090:	fa91 f1a1 	rbit	r1, r1
 8001094:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001098:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800109c:	fab1 f181 	clz	r1, r1
 80010a0:	b2c9      	uxtb	r1, r1
 80010a2:	408b      	lsls	r3, r1
 80010a4:	4995      	ldr	r1, [pc, #596]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010aa:	e0f5      	b.n	8001298 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8085 	beq.w	80011c2 <HAL_RCC_OscConfig+0x516>
 80010b8:	2301      	movs	r3, #1
 80010ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80010ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ce:	fab3 f383 	clz	r3, r3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	461a      	mov	r2, r3
 80010e0:	2301      	movs	r3, #1
 80010e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e4:	f7ff fb4a 	bl	800077c <HAL_GetTick>
 80010e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ec:	e00a      	b.n	8001104 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ee:	f7ff fb45 	bl	800077c <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d902      	bls.n	8001104 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	f000 bcd5 	b.w	8001aae <HAL_RCC_OscConfig+0xe02>
 8001104:	2302      	movs	r3, #2
 8001106:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800110e:	fa93 f3a3 	rbit	r3, r3
 8001112:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001116:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111a:	fab3 f383 	clz	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	095b      	lsrs	r3, r3, #5
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b01      	cmp	r3, #1
 800112c:	d102      	bne.n	8001134 <HAL_RCC_OscConfig+0x488>
 800112e:	4b73      	ldr	r3, [pc, #460]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	e013      	b.n	800115c <HAL_RCC_OscConfig+0x4b0>
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800113e:	fa93 f3a3 	rbit	r3, r3
 8001142:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001146:	2302      	movs	r3, #2
 8001148:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800114c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001158:	4b68      	ldr	r3, [pc, #416]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	2202      	movs	r2, #2
 800115e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001162:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001166:	fa92 f2a2 	rbit	r2, r2
 800116a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800116e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001172:	fab2 f282 	clz	r2, r2
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	f042 0220 	orr.w	r2, r2, #32
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	f002 021f 	and.w	r2, r2, #31
 8001182:	2101      	movs	r1, #1
 8001184:	fa01 f202 	lsl.w	r2, r1, r2
 8001188:	4013      	ands	r3, r2
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0af      	beq.n	80010ee <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118e:	4b5b      	ldr	r3, [pc, #364]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	21f8      	movs	r1, #248	; 0xf8
 800119e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011a6:	fa91 f1a1 	rbit	r1, r1
 80011aa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80011ae:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80011b2:	fab1 f181 	clz	r1, r1
 80011b6:	b2c9      	uxtb	r1, r1
 80011b8:	408b      	lsls	r3, r1
 80011ba:	4950      	ldr	r1, [pc, #320]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	600b      	str	r3, [r1, #0]
 80011c0:	e06a      	b.n	8001298 <HAL_RCC_OscConfig+0x5ec>
 80011c2:	2301      	movs	r3, #1
 80011c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80011cc:	fa93 f3a3 	rbit	r3, r3
 80011d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80011d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	461a      	mov	r2, r3
 80011ea:	2300      	movs	r3, #0
 80011ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fac5 	bl	800077c <HAL_GetTick>
 80011f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	e00a      	b.n	800120e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fac0 	bl	800077c <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d902      	bls.n	800120e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	f000 bc50 	b.w	8001aae <HAL_RCC_OscConfig+0xe02>
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d102      	bne.n	800123e <HAL_RCC_OscConfig+0x592>
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	e013      	b.n	8001266 <HAL_RCC_OscConfig+0x5ba>
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001244:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001250:	2302      	movs	r3, #2
 8001252:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001256:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800125a:	fa93 f3a3 	rbit	r3, r3
 800125e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <HAL_RCC_OscConfig+0x650>)
 8001264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001266:	2202      	movs	r2, #2
 8001268:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800126c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001270:	fa92 f2a2 	rbit	r2, r2
 8001274:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001278:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800127c:	fab2 f282 	clz	r2, r2
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	f042 0220 	orr.w	r2, r2, #32
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	f002 021f 	and.w	r2, r2, #31
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f202 	lsl.w	r2, r1, r2
 8001292:	4013      	ands	r3, r2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1af      	bne.n	80011f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 80da 	beq.w	800145c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d069      	beq.n	8001386 <HAL_RCC_OscConfig+0x6da>
 80012b2:	2301      	movs	r3, #1
 80012b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012bc:	fa93 f3a3 	rbit	r3, r3
 80012c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80012c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012c8:	fab3 f383 	clz	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_RCC_OscConfig+0x654>)
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	461a      	mov	r2, r3
 80012d8:	2301      	movs	r3, #1
 80012da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012dc:	f7ff fa4e 	bl	800077c <HAL_GetTick>
 80012e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012e4:	e00e      	b.n	8001304 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012e6:	f7ff fa49 	bl	800077c <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d906      	bls.n	8001304 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e3d9      	b.n	8001aae <HAL_RCC_OscConfig+0xe02>
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	10908120 	.word	0x10908120
 8001304:	2302      	movs	r3, #2
 8001306:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800130e:	fa93 f3a3 	rbit	r3, r3
 8001312:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001316:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800131a:	2202      	movs	r2, #2
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	fa93 f2a3 	rbit	r2, r3
 8001328:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001332:	2202      	movs	r2, #2
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	fa93 f2a3 	rbit	r2, r3
 8001340:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001344:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001346:	4ba5      	ldr	r3, [pc, #660]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 8001348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800134a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800134e:	2102      	movs	r1, #2
 8001350:	6019      	str	r1, [r3, #0]
 8001352:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	fa93 f1a3 	rbit	r1, r3
 800135c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001360:	6019      	str	r1, [r3, #0]
  return result;
 8001362:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	fab3 f383 	clz	r3, r3
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001372:	b2db      	uxtb	r3, r3
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	2101      	movs	r1, #1
 800137a:	fa01 f303 	lsl.w	r3, r1, r3
 800137e:	4013      	ands	r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0b0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x63a>
 8001384:	e06a      	b.n	800145c <HAL_RCC_OscConfig+0x7b0>
 8001386:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	fa93 f2a3 	rbit	r2, r3
 8001398:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800139c:	601a      	str	r2, [r3, #0]
  return result;
 800139e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013a2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a4:	fab3 f383 	clz	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b8c      	ldr	r3, [pc, #560]	; (80015e0 <HAL_RCC_OscConfig+0x934>)
 80013ae:	4413      	add	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	461a      	mov	r2, r3
 80013b4:	2300      	movs	r3, #0
 80013b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b8:	f7ff f9e0 	bl	800077c <HAL_GetTick>
 80013bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c0:	e009      	b.n	80013d6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c2:	f7ff f9db 	bl	800077c <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e36b      	b.n	8001aae <HAL_RCC_OscConfig+0xe02>
 80013d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013da:	2202      	movs	r2, #2
 80013dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	fa93 f2a3 	rbit	r2, r3
 80013e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013f2:	2202      	movs	r2, #2
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	fa93 f2a3 	rbit	r2, r3
 8001400:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800140a:	2202      	movs	r2, #2
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	fa93 f2a3 	rbit	r2, r3
 8001418:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800141c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141e:	4b6f      	ldr	r3, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 8001420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001422:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001426:	2102      	movs	r1, #2
 8001428:	6019      	str	r1, [r3, #0]
 800142a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	fa93 f1a3 	rbit	r1, r3
 8001434:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001438:	6019      	str	r1, [r3, #0]
  return result;
 800143a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fab3 f383 	clz	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	2101      	movs	r1, #1
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1b2      	bne.n	80013c2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	2b00      	cmp	r3, #0
 8001468:	f000 8158 	beq.w	800171c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b5a      	ldr	r3, [pc, #360]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d112      	bne.n	80014a4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	4b57      	ldr	r3, [pc, #348]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	4a56      	ldr	r2, [pc, #344]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	61d3      	str	r3, [r2, #28]
 800148a:	4b54      	ldr	r3, [pc, #336]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 800148c:	69db      	ldr	r3, [r3, #28]
 800148e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001492:	f107 0308 	add.w	r3, r7, #8
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800149e:	2301      	movs	r3, #1
 80014a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <HAL_RCC_OscConfig+0x938>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d11a      	bne.n	80014e6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014b0:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <HAL_RCC_OscConfig+0x938>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a4b      	ldr	r2, [pc, #300]	; (80015e4 <HAL_RCC_OscConfig+0x938>)
 80014b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014bc:	f7ff f95e 	bl	800077c <HAL_GetTick>
 80014c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c4:	e009      	b.n	80014da <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c6:	f7ff f959 	bl	800077c <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e2e9      	b.n	8001aae <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <HAL_RCC_OscConfig+0x938>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0ef      	beq.n	80014c6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x852>
 80014f0:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4a39      	ldr	r2, [pc, #228]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6213      	str	r3, [r2, #32]
 80014fc:	e02f      	b.n	800155e <HAL_RCC_OscConfig+0x8b2>
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x876>
 8001508:	4b34      	ldr	r3, [pc, #208]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a33      	ldr	r2, [pc, #204]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	4b31      	ldr	r3, [pc, #196]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a30      	ldr	r2, [pc, #192]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 800151a:	f023 0304 	bic.w	r3, r3, #4
 800151e:	6213      	str	r3, [r2, #32]
 8001520:	e01d      	b.n	800155e <HAL_RCC_OscConfig+0x8b2>
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d10c      	bne.n	8001546 <HAL_RCC_OscConfig+0x89a>
 800152c:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a2a      	ldr	r2, [pc, #168]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 8001532:	f043 0304 	orr.w	r3, r3, #4
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	4b28      	ldr	r3, [pc, #160]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4a27      	ldr	r2, [pc, #156]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6213      	str	r3, [r2, #32]
 8001544:	e00b      	b.n	800155e <HAL_RCC_OscConfig+0x8b2>
 8001546:	4b25      	ldr	r3, [pc, #148]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	4a24      	ldr	r2, [pc, #144]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	6213      	str	r3, [r2, #32]
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	4a21      	ldr	r2, [pc, #132]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 8001558:	f023 0304 	bic.w	r3, r3, #4
 800155c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d06b      	beq.n	8001640 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001568:	f7ff f908 	bl	800077c <HAL_GetTick>
 800156c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001570:	e00b      	b.n	800158a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff f903 	bl	800077c <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e291      	b.n	8001aae <HAL_RCC_OscConfig+0xe02>
 800158a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800158e:	2202      	movs	r2, #2
 8001590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001592:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	fa93 f2a3 	rbit	r2, r3
 800159c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015a6:	2202      	movs	r2, #2
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	fa93 f2a3 	rbit	r2, r3
 80015b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015b8:	601a      	str	r2, [r3, #0]
  return result;
 80015ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80015be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	095b      	lsrs	r3, r3, #5
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d109      	bne.n	80015e8 <HAL_RCC_OscConfig+0x93c>
 80015d4:	4b01      	ldr	r3, [pc, #4]	; (80015dc <HAL_RCC_OscConfig+0x930>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	e014      	b.n	8001604 <HAL_RCC_OscConfig+0x958>
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	10908120 	.word	0x10908120
 80015e4:	40007000 	.word	0x40007000
 80015e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015ec:	2202      	movs	r2, #2
 80015ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	fa93 f2a3 	rbit	r2, r3
 80015fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	4bbb      	ldr	r3, [pc, #748]	; (80018f0 <HAL_RCC_OscConfig+0xc44>)
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001608:	2102      	movs	r1, #2
 800160a:	6011      	str	r1, [r2, #0]
 800160c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	fa92 f1a2 	rbit	r1, r2
 8001616:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800161a:	6011      	str	r1, [r2, #0]
  return result;
 800161c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	fab2 f282 	clz	r2, r2
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	f002 021f 	and.w	r2, r2, #31
 8001632:	2101      	movs	r1, #1
 8001634:	fa01 f202 	lsl.w	r2, r1, r2
 8001638:	4013      	ands	r3, r2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d099      	beq.n	8001572 <HAL_RCC_OscConfig+0x8c6>
 800163e:	e063      	b.n	8001708 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff f89c 	bl	800077c <HAL_GetTick>
 8001644:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	e00b      	b.n	8001662 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff f897 	bl	800077c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e225      	b.n	8001aae <HAL_RCC_OscConfig+0xe02>
 8001662:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001666:	2202      	movs	r2, #2
 8001668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	fa93 f2a3 	rbit	r2, r3
 8001674:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800167e:	2202      	movs	r2, #2
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	fa93 f2a3 	rbit	r2, r3
 800168c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001690:	601a      	str	r2, [r3, #0]
  return result;
 8001692:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001696:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001698:	fab3 f383 	clz	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d102      	bne.n	80016b2 <HAL_RCC_OscConfig+0xa06>
 80016ac:	4b90      	ldr	r3, [pc, #576]	; (80018f0 <HAL_RCC_OscConfig+0xc44>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	e00d      	b.n	80016ce <HAL_RCC_OscConfig+0xa22>
 80016b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016b6:	2202      	movs	r2, #2
 80016b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fa93 f2a3 	rbit	r2, r3
 80016c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_RCC_OscConfig+0xc44>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016d2:	2102      	movs	r1, #2
 80016d4:	6011      	str	r1, [r2, #0]
 80016d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	fa92 f1a2 	rbit	r1, r2
 80016e0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016e4:	6011      	str	r1, [r2, #0]
  return result;
 80016e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	fab2 f282 	clz	r2, r2
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	f002 021f 	and.w	r2, r2, #31
 80016fc:	2101      	movs	r1, #1
 80016fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001702:	4013      	ands	r3, r2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1a0      	bne.n	800164a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001708:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001710:	4b77      	ldr	r3, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0xc44>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	4a76      	ldr	r2, [pc, #472]	; (80018f0 <HAL_RCC_OscConfig+0xc44>)
 8001716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800171a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 81c2 	beq.w	8001aac <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001728:	4b71      	ldr	r3, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0xc44>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 030c 	and.w	r3, r3, #12
 8001730:	2b08      	cmp	r3, #8
 8001732:	f000 819c 	beq.w	8001a6e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2b02      	cmp	r3, #2
 800173e:	f040 8114 	bne.w	800196a <HAL_RCC_OscConfig+0xcbe>
 8001742:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001746:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800174a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	fa93 f2a3 	rbit	r2, r3
 8001756:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800175a:	601a      	str	r2, [r3, #0]
  return result;
 800175c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001760:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001762:	fab3 f383 	clz	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800176c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	461a      	mov	r2, r3
 8001774:	2300      	movs	r3, #0
 8001776:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff f800 	bl	800077c <HAL_GetTick>
 800177c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001780:	e009      	b.n	8001796 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001782:	f7fe fffb 	bl	800077c <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e18b      	b.n	8001aae <HAL_RCC_OscConfig+0xe02>
 8001796:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800179a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800179e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	fa93 f2a3 	rbit	r2, r3
 80017aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017ae:	601a      	str	r2, [r3, #0]
  return result;
 80017b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80017b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	095b      	lsrs	r3, r3, #5
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <HAL_RCC_OscConfig+0xb24>
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0xc44>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	e01b      	b.n	8001808 <HAL_RCC_OscConfig+0xb5c>
 80017d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fa93 f2a3 	rbit	r2, r3
 80017e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	fa93 f2a3 	rbit	r2, r3
 80017fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	4b3a      	ldr	r3, [pc, #232]	; (80018f0 <HAL_RCC_OscConfig+0xc44>)
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800180c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001810:	6011      	str	r1, [r2, #0]
 8001812:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	fa92 f1a2 	rbit	r1, r2
 800181c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001820:	6011      	str	r1, [r2, #0]
  return result;
 8001822:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	fab2 f282 	clz	r2, r2
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	f042 0220 	orr.w	r2, r2, #32
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	f002 021f 	and.w	r2, r2, #31
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f202 	lsl.w	r2, r1, r2
 800183e:	4013      	ands	r3, r2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d19e      	bne.n	8001782 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0xc44>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	430b      	orrs	r3, r1
 800185a:	4925      	ldr	r1, [pc, #148]	; (80018f0 <HAL_RCC_OscConfig+0xc44>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
 8001860:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	fa93 f2a3 	rbit	r2, r3
 8001874:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001878:	601a      	str	r2, [r3, #0]
  return result;
 800187a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800187e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001880:	fab3 f383 	clz	r3, r3
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800188a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	461a      	mov	r2, r3
 8001892:	2301      	movs	r3, #1
 8001894:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7fe ff71 	bl	800077c <HAL_GetTick>
 800189a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189e:	e009      	b.n	80018b4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a0:	f7fe ff6c 	bl	800077c <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0fc      	b.n	8001aae <HAL_RCC_OscConfig+0xe02>
 80018b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018cc:	601a      	str	r2, [r3, #0]
  return result;
 80018ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d105      	bne.n	80018f4 <HAL_RCC_OscConfig+0xc48>
 80018e8:	4b01      	ldr	r3, [pc, #4]	; (80018f0 <HAL_RCC_OscConfig+0xc44>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e01e      	b.n	800192c <HAL_RCC_OscConfig+0xc80>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f2a3 	rbit	r2, r3
 8001908:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001912:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	fa93 f2a3 	rbit	r2, r3
 8001922:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <HAL_RCC_OscConfig+0xe0c>)
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001930:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001934:	6011      	str	r1, [r2, #0]
 8001936:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	fa92 f1a2 	rbit	r1, r2
 8001940:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001944:	6011      	str	r1, [r2, #0]
  return result;
 8001946:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	fab2 f282 	clz	r2, r2
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	f042 0220 	orr.w	r2, r2, #32
 8001956:	b2d2      	uxtb	r2, r2
 8001958:	f002 021f 	and.w	r2, r2, #31
 800195c:	2101      	movs	r1, #1
 800195e:	fa01 f202 	lsl.w	r2, r1, r2
 8001962:	4013      	ands	r3, r2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d09b      	beq.n	80018a0 <HAL_RCC_OscConfig+0xbf4>
 8001968:	e0a0      	b.n	8001aac <HAL_RCC_OscConfig+0xe00>
 800196a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800196e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	fa93 f2a3 	rbit	r2, r3
 800197e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001982:	601a      	str	r2, [r3, #0]
  return result;
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198a:	fab3 f383 	clz	r3, r3
 800198e:	b2db      	uxtb	r3, r3
 8001990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	461a      	mov	r2, r3
 800199c:	2300      	movs	r3, #0
 800199e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7fe feec 	bl	800077c <HAL_GetTick>
 80019a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a8:	e009      	b.n	80019be <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019aa:	f7fe fee7 	bl	800077c <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e077      	b.n	8001aae <HAL_RCC_OscConfig+0xe02>
 80019be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d6:	601a      	str	r2, [r3, #0]
  return result;
 80019d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	095b      	lsrs	r3, r3, #5
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d102      	bne.n	80019f8 <HAL_RCC_OscConfig+0xd4c>
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <HAL_RCC_OscConfig+0xe0c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	e01b      	b.n	8001a30 <HAL_RCC_OscConfig+0xd84>
 80019f8:	f107 0320 	add.w	r3, r7, #32
 80019fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	fa93 f2a3 	rbit	r2, r3
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	f107 0318 	add.w	r3, r7, #24
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	fa93 f2a3 	rbit	r2, r3
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <HAL_RCC_OscConfig+0xe0c>)
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	f107 0210 	add.w	r2, r7, #16
 8001a34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a38:	6011      	str	r1, [r2, #0]
 8001a3a:	f107 0210 	add.w	r2, r7, #16
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	fa92 f1a2 	rbit	r1, r2
 8001a44:	f107 020c 	add.w	r2, r7, #12
 8001a48:	6011      	str	r1, [r2, #0]
  return result;
 8001a4a:	f107 020c 	add.w	r2, r7, #12
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	fab2 f282 	clz	r2, r2
 8001a54:	b2d2      	uxtb	r2, r2
 8001a56:	f042 0220 	orr.w	r2, r2, #32
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	f002 021f 	and.w	r2, r2, #31
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f202 	lsl.w	r2, r1, r2
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d19e      	bne.n	80019aa <HAL_RCC_OscConfig+0xcfe>
 8001a6c:	e01e      	b.n	8001aac <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e018      	b.n	8001aae <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_RCC_OscConfig+0xe0c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001a84:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d108      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001a96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001a9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d001      	beq.n	8001aac <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40021000 	.word	0x40021000

08001abc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b09e      	sub	sp, #120	; 0x78
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e162      	b.n	8001d9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b90      	ldr	r3, [pc, #576]	; (8001d18 <HAL_RCC_ClockConfig+0x25c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b8d      	ldr	r3, [pc, #564]	; (8001d18 <HAL_RCC_ClockConfig+0x25c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	498b      	ldr	r1, [pc, #556]	; (8001d18 <HAL_RCC_ClockConfig+0x25c>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b89      	ldr	r3, [pc, #548]	; (8001d18 <HAL_RCC_ClockConfig+0x25c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e14a      	b.n	8001d9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b10:	4b82      	ldr	r3, [pc, #520]	; (8001d1c <HAL_RCC_ClockConfig+0x260>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	497f      	ldr	r1, [pc, #508]	; (8001d1c <HAL_RCC_ClockConfig+0x260>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 80dc 	beq.w	8001ce8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d13c      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xf6>
 8001b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_ClockConfig+0xa6>
 8001b5c:	4b6f      	ldr	r3, [pc, #444]	; (8001d1c <HAL_RCC_ClockConfig+0x260>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	e00f      	b.n	8001b82 <HAL_RCC_ClockConfig+0xc6>
 8001b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b6a:	fa93 f3a3 	rbit	r3, r3
 8001b6e:	667b      	str	r3, [r7, #100]	; 0x64
 8001b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b74:	663b      	str	r3, [r7, #96]	; 0x60
 8001b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b78:	fa93 f3a3 	rbit	r3, r3
 8001b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b7e:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_ClockConfig+0x260>)
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b86:	65ba      	str	r2, [r7, #88]	; 0x58
 8001b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001b8a:	fa92 f2a2 	rbit	r2, r2
 8001b8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b92:	fab2 f282 	clz	r2, r2
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	f042 0220 	orr.w	r2, r2, #32
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	f002 021f 	and.w	r2, r2, #31
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d17b      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e0f3      	b.n	8001d9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d13c      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x178>
 8001bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 8001bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bca:	fab3 f383 	clz	r3, r3
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	095b      	lsrs	r3, r3, #5
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d102      	bne.n	8001be4 <HAL_RCC_ClockConfig+0x128>
 8001bde:	4b4f      	ldr	r3, [pc, #316]	; (8001d1c <HAL_RCC_ClockConfig+0x260>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	e00f      	b.n	8001c04 <HAL_RCC_ClockConfig+0x148>
 8001be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001be8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8001bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8001bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c00:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <HAL_RCC_ClockConfig+0x260>)
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c08:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c0c:	fa92 f2a2 	rbit	r2, r2
 8001c10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c14:	fab2 f282 	clz	r2, r2
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	f042 0220 	orr.w	r2, r2, #32
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	f002 021f 	and.w	r2, r2, #31
 8001c24:	2101      	movs	r1, #1
 8001c26:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d13a      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0b2      	b.n	8001d9a <HAL_RCC_ClockConfig+0x2de>
 8001c34:	2302      	movs	r3, #2
 8001c36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d102      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x1a0>
 8001c56:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_RCC_ClockConfig+0x260>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	e00d      	b.n	8001c78 <HAL_RCC_ClockConfig+0x1bc>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
 8001c68:	2302      	movs	r3, #2
 8001c6a:	623b      	str	r3, [r7, #32]
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <HAL_RCC_ClockConfig+0x260>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	2202      	movs	r2, #2
 8001c7a:	61ba      	str	r2, [r7, #24]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	fa92 f2a2 	rbit	r2, r2
 8001c82:	617a      	str	r2, [r7, #20]
  return result;
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	fab2 f282 	clz	r2, r2
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	f042 0220 	orr.w	r2, r2, #32
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	f002 021f 	and.w	r2, r2, #31
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e079      	b.n	8001d9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_ClockConfig+0x260>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 0203 	bic.w	r2, r3, #3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	491a      	ldr	r1, [pc, #104]	; (8001d1c <HAL_RCC_ClockConfig+0x260>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb8:	f7fe fd60 	bl	800077c <HAL_GetTick>
 8001cbc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc0:	f7fe fd5c 	bl	800077c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e061      	b.n	8001d9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_RCC_ClockConfig+0x260>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 020c 	and.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1eb      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_ClockConfig+0x25c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d214      	bcs.n	8001d20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_RCC_ClockConfig+0x25c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 0207 	bic.w	r2, r3, #7
 8001cfe:	4906      	ldr	r1, [pc, #24]	; (8001d18 <HAL_RCC_ClockConfig+0x25c>)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <HAL_RCC_ClockConfig+0x25c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e040      	b.n	8001d9a <HAL_RCC_ClockConfig+0x2de>
 8001d18:	40022000 	.word	0x40022000
 8001d1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d008      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	491a      	ldr	r1, [pc, #104]	; (8001da4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d009      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4912      	ldr	r1, [pc, #72]	; (8001da4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d5e:	f000 f829 	bl	8001db4 <HAL_RCC_GetSysClockFreq>
 8001d62:	4601      	mov	r1, r0
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_RCC_ClockConfig+0x2e8>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d6c:	22f0      	movs	r2, #240	; 0xf0
 8001d6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	fa92 f2a2 	rbit	r2, r2
 8001d76:	60fa      	str	r2, [r7, #12]
  return result;
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	fab2 f282 	clz	r2, r2
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	40d3      	lsrs	r3, r2
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <HAL_RCC_ClockConfig+0x2ec>)
 8001d84:	5cd3      	ldrb	r3, [r2, r3]
 8001d86:	fa21 f303 	lsr.w	r3, r1, r3
 8001d8a:	4a08      	ldr	r2, [pc, #32]	; (8001dac <HAL_RCC_ClockConfig+0x2f0>)
 8001d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_RCC_ClockConfig+0x2f4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fcae 	bl	80006f4 <HAL_InitTick>
  
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3778      	adds	r7, #120	; 0x78
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08003038 	.word	0x08003038
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000004 	.word	0x20000004

08001db4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b08b      	sub	sp, #44	; 0x2c
 8001db8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001dce:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d002      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d003      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x36>
 8001de2:	e03c      	b.n	8001e5e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001de6:	623b      	str	r3, [r7, #32]
      break;
 8001de8:	e03c      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001df0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001df4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	fa92 f2a2 	rbit	r2, r2
 8001dfc:	607a      	str	r2, [r7, #4]
  return result;
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	fab2 f282 	clz	r2, r2
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	40d3      	lsrs	r3, r2
 8001e08:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	220f      	movs	r2, #15
 8001e18:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	fa92 f2a2 	rbit	r2, r2
 8001e20:	60fa      	str	r2, [r7, #12]
  return result;
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	fab2 f282 	clz	r2, r2
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	40d3      	lsrs	r3, r2
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e2e:	5cd3      	ldrb	r3, [r2, r3]
 8001e30:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4c:	e004      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	4a0c      	ldr	r2, [pc, #48]	; (8001e84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	623b      	str	r3, [r7, #32]
      break;
 8001e5c:	e002      	b.n	8001e64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e60:	623b      	str	r3, [r7, #32]
      break;
 8001e62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e64:	6a3b      	ldr	r3, [r7, #32]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	372c      	adds	r7, #44	; 0x2c
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	007a1200 	.word	0x007a1200
 8001e7c:	08003048 	.word	0x08003048
 8001e80:	08003058 	.word	0x08003058
 8001e84:	003d0900 	.word	0x003d0900

08001e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e01d      	b.n	8001ed6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fb34 	bl	800051c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f000 fbba 	bl	8002640 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e01d      	b.n	8001f2c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d106      	bne.n	8001f0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f815 	bl	8001f34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	f000 fb8f 	bl	8002640 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	6839      	ldr	r1, [r7, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 ff70 	bl	8002e40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <HAL_TIM_PWM_Start+0x98>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d013      	beq.n	8001f92 <HAL_TIM_PWM_Start+0x4a>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <HAL_TIM_PWM_Start+0x9c>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00e      	beq.n	8001f92 <HAL_TIM_PWM_Start+0x4a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a1b      	ldr	r2, [pc, #108]	; (8001fe8 <HAL_TIM_PWM_Start+0xa0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d009      	beq.n	8001f92 <HAL_TIM_PWM_Start+0x4a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1a      	ldr	r2, [pc, #104]	; (8001fec <HAL_TIM_PWM_Start+0xa4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d004      	beq.n	8001f92 <HAL_TIM_PWM_Start+0x4a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a18      	ldr	r2, [pc, #96]	; (8001ff0 <HAL_TIM_PWM_Start+0xa8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_TIM_PWM_Start+0x4e>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_TIM_PWM_Start+0x50>
 8001f96:	2300      	movs	r3, #0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001faa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <HAL_TIM_PWM_Start+0xac>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b06      	cmp	r3, #6
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_TIM_PWM_Start+0x8e>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc4:	d007      	beq.n	8001fd6 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40012c00 	.word	0x40012c00
 8001fe4:	40013400 	.word	0x40013400
 8001fe8:	40014000 	.word	0x40014000
 8001fec:	40014400 	.word	0x40014400
 8001ff0:	40014800 	.word	0x40014800
 8001ff4:	00010007 	.word	0x00010007

08001ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b02      	cmp	r3, #2
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0202 	mvn.w	r2, #2
 8002024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fae1 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fad3 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fae4 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b04      	cmp	r3, #4
 8002060:	d122      	bne.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b04      	cmp	r3, #4
 800206e:	d11b      	bne.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0204 	mvn.w	r2, #4
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fab7 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 faa9 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 faba 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d122      	bne.n	80020fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d11b      	bne.n	80020fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0208 	mvn.w	r2, #8
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2204      	movs	r2, #4
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fa8d 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fa7f 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fa90 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b10      	cmp	r3, #16
 8002108:	d122      	bne.n	8002150 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b10      	cmp	r3, #16
 8002116:	d11b      	bne.n	8002150 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0210 	mvn.w	r2, #16
 8002120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2208      	movs	r2, #8
 8002126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fa63 	bl	8002602 <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 fa55 	bl	80025ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fa66 	bl	8002616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10e      	bne.n	800217c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0201 	mvn.w	r2, #1
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fa2f 	bl	80025da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b80      	cmp	r3, #128	; 0x80
 8002188:	d10e      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002194:	2b80      	cmp	r3, #128	; 0x80
 8002196:	d107      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fefc 	bl	8002fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021b6:	d10e      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c2:	2b80      	cmp	r3, #128	; 0x80
 80021c4:	d107      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 feef 	bl	8002fb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e0:	2b40      	cmp	r3, #64	; 0x40
 80021e2:	d10e      	bne.n	8002202 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ee:	2b40      	cmp	r3, #64	; 0x40
 80021f0:	d107      	bne.n	8002202 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 fa14 	bl	800262a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b20      	cmp	r3, #32
 800220e:	d10e      	bne.n	800222e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b20      	cmp	r3, #32
 800221c:	d107      	bne.n	800222e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f06f 0220 	mvn.w	r2, #32
 8002226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 feaf 	bl	8002f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800224e:	2302      	movs	r3, #2
 8002250:	e105      	b.n	800245e <HAL_TIM_PWM_ConfigChannel+0x226>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2202      	movs	r2, #2
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b14      	cmp	r3, #20
 8002266:	f200 80f0 	bhi.w	800244a <HAL_TIM_PWM_ConfigChannel+0x212>
 800226a:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800226c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002270:	080022c5 	.word	0x080022c5
 8002274:	0800244b 	.word	0x0800244b
 8002278:	0800244b 	.word	0x0800244b
 800227c:	0800244b 	.word	0x0800244b
 8002280:	08002305 	.word	0x08002305
 8002284:	0800244b 	.word	0x0800244b
 8002288:	0800244b 	.word	0x0800244b
 800228c:	0800244b 	.word	0x0800244b
 8002290:	08002347 	.word	0x08002347
 8002294:	0800244b 	.word	0x0800244b
 8002298:	0800244b 	.word	0x0800244b
 800229c:	0800244b 	.word	0x0800244b
 80022a0:	08002387 	.word	0x08002387
 80022a4:	0800244b 	.word	0x0800244b
 80022a8:	0800244b 	.word	0x0800244b
 80022ac:	0800244b 	.word	0x0800244b
 80022b0:	080023c9 	.word	0x080023c9
 80022b4:	0800244b 	.word	0x0800244b
 80022b8:	0800244b 	.word	0x0800244b
 80022bc:	0800244b 	.word	0x0800244b
 80022c0:	08002409 	.word	0x08002409
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fa48 	bl	8002760 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0208 	orr.w	r2, r2, #8
 80022de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0204 	bic.w	r2, r2, #4
 80022ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6999      	ldr	r1, [r3, #24]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	619a      	str	r2, [r3, #24]
      break;
 8002302:	e0a3      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fab8 	bl	8002880 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699a      	ldr	r2, [r3, #24]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800231e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800232e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6999      	ldr	r1, [r3, #24]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	021a      	lsls	r2, r3, #8
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	619a      	str	r2, [r3, #24]
      break;
 8002344:	e082      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fb21 	bl	8002994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f042 0208 	orr.w	r2, r2, #8
 8002360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0204 	bic.w	r2, r2, #4
 8002370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69d9      	ldr	r1, [r3, #28]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	61da      	str	r2, [r3, #28]
      break;
 8002384:	e062      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	4618      	mov	r0, r3
 800238e:	f000 fb89 	bl	8002aa4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69da      	ldr	r2, [r3, #28]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69d9      	ldr	r1, [r3, #28]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	021a      	lsls	r2, r3, #8
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	61da      	str	r2, [r3, #28]
      break;
 80023c6:	e041      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fbd2 	bl	8002b78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0208 	orr.w	r2, r2, #8
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0204 	bic.w	r2, r2, #4
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	691a      	ldr	r2, [r3, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002406:	e021      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 fc16 	bl	8002c40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002422:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	021a      	lsls	r2, r3, #8
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002448:	e000      	b.n	800244c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 800244a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop

08002468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_TIM_ConfigClockSource+0x18>
 800247c:	2302      	movs	r3, #2
 800247e:	e0a8      	b.n	80025d2 <HAL_TIM_ConfigClockSource+0x16a>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b40      	cmp	r3, #64	; 0x40
 80024ba:	d067      	beq.n	800258c <HAL_TIM_ConfigClockSource+0x124>
 80024bc:	2b40      	cmp	r3, #64	; 0x40
 80024be:	d80b      	bhi.n	80024d8 <HAL_TIM_ConfigClockSource+0x70>
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d073      	beq.n	80025ac <HAL_TIM_ConfigClockSource+0x144>
 80024c4:	2b10      	cmp	r3, #16
 80024c6:	d802      	bhi.n	80024ce <HAL_TIM_ConfigClockSource+0x66>
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d06f      	beq.n	80025ac <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80024cc:	e078      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d06c      	beq.n	80025ac <HAL_TIM_ConfigClockSource+0x144>
 80024d2:	2b30      	cmp	r3, #48	; 0x30
 80024d4:	d06a      	beq.n	80025ac <HAL_TIM_ConfigClockSource+0x144>
      break;
 80024d6:	e073      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80024d8:	2b70      	cmp	r3, #112	; 0x70
 80024da:	d00d      	beq.n	80024f8 <HAL_TIM_ConfigClockSource+0x90>
 80024dc:	2b70      	cmp	r3, #112	; 0x70
 80024de:	d804      	bhi.n	80024ea <HAL_TIM_ConfigClockSource+0x82>
 80024e0:	2b50      	cmp	r3, #80	; 0x50
 80024e2:	d033      	beq.n	800254c <HAL_TIM_ConfigClockSource+0xe4>
 80024e4:	2b60      	cmp	r3, #96	; 0x60
 80024e6:	d041      	beq.n	800256c <HAL_TIM_ConfigClockSource+0x104>
      break;
 80024e8:	e06a      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80024ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ee:	d066      	beq.n	80025be <HAL_TIM_ConfigClockSource+0x156>
 80024f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f4:	d017      	beq.n	8002526 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80024f6:	e063      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6818      	ldr	r0, [r3, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6899      	ldr	r1, [r3, #8]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f000 fc7a 	bl	8002e00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800251a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	609a      	str	r2, [r3, #8]
      break;
 8002524:	e04c      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f000 fc63 	bl	8002e00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002548:	609a      	str	r2, [r3, #8]
      break;
 800254a:	e039      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	461a      	mov	r2, r3
 800255a:	f000 fbd7 	bl	8002d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2150      	movs	r1, #80	; 0x50
 8002564:	4618      	mov	r0, r3
 8002566:	f000 fc30 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 800256a:	e029      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6859      	ldr	r1, [r3, #4]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	461a      	mov	r2, r3
 800257a:	f000 fbf6 	bl	8002d6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2160      	movs	r1, #96	; 0x60
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fc20 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 800258a:	e019      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	461a      	mov	r2, r3
 800259a:	f000 fbb7 	bl	8002d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2140      	movs	r1, #64	; 0x40
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fc10 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 80025aa:	e009      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f000 fc07 	bl	8002dca <TIM_ITRx_SetConfig>
      break;
 80025bc:	e000      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80025be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025da:	b480      	push	{r7}
 80025dc:	b083      	sub	sp, #12
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a3c      	ldr	r2, [pc, #240]	; (8002744 <TIM_Base_SetConfig+0x104>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d00f      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265e:	d00b      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a39      	ldr	r2, [pc, #228]	; (8002748 <TIM_Base_SetConfig+0x108>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d007      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a38      	ldr	r2, [pc, #224]	; (800274c <TIM_Base_SetConfig+0x10c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_Base_SetConfig+0x38>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a37      	ldr	r2, [pc, #220]	; (8002750 <TIM_Base_SetConfig+0x110>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d108      	bne.n	800268a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a2d      	ldr	r2, [pc, #180]	; (8002744 <TIM_Base_SetConfig+0x104>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d01b      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002698:	d017      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a2a      	ldr	r2, [pc, #168]	; (8002748 <TIM_Base_SetConfig+0x108>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d013      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a29      	ldr	r2, [pc, #164]	; (800274c <TIM_Base_SetConfig+0x10c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d00f      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a28      	ldr	r2, [pc, #160]	; (8002750 <TIM_Base_SetConfig+0x110>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00b      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a27      	ldr	r2, [pc, #156]	; (8002754 <TIM_Base_SetConfig+0x114>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a26      	ldr	r2, [pc, #152]	; (8002758 <TIM_Base_SetConfig+0x118>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d003      	beq.n	80026ca <TIM_Base_SetConfig+0x8a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a25      	ldr	r2, [pc, #148]	; (800275c <TIM_Base_SetConfig+0x11c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d108      	bne.n	80026dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a10      	ldr	r2, [pc, #64]	; (8002744 <TIM_Base_SetConfig+0x104>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d00f      	beq.n	8002728 <TIM_Base_SetConfig+0xe8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a11      	ldr	r2, [pc, #68]	; (8002750 <TIM_Base_SetConfig+0x110>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00b      	beq.n	8002728 <TIM_Base_SetConfig+0xe8>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a10      	ldr	r2, [pc, #64]	; (8002754 <TIM_Base_SetConfig+0x114>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d007      	beq.n	8002728 <TIM_Base_SetConfig+0xe8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <TIM_Base_SetConfig+0x118>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d003      	beq.n	8002728 <TIM_Base_SetConfig+0xe8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <TIM_Base_SetConfig+0x11c>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d103      	bne.n	8002730 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	615a      	str	r2, [r3, #20]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40000400 	.word	0x40000400
 800274c:	40000800 	.word	0x40000800
 8002750:	40013400 	.word	0x40013400
 8002754:	40014000 	.word	0x40014000
 8002758:	40014400 	.word	0x40014400
 800275c:	40014800 	.word	0x40014800

08002760 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f023 0201 	bic.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0303 	bic.w	r3, r3, #3
 800279a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f023 0302 	bic.w	r3, r3, #2
 80027ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a2c      	ldr	r2, [pc, #176]	; (800286c <TIM_OC1_SetConfig+0x10c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d00f      	beq.n	80027e0 <TIM_OC1_SetConfig+0x80>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a2b      	ldr	r2, [pc, #172]	; (8002870 <TIM_OC1_SetConfig+0x110>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00b      	beq.n	80027e0 <TIM_OC1_SetConfig+0x80>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4a2a      	ldr	r2, [pc, #168]	; (8002874 <TIM_OC1_SetConfig+0x114>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d007      	beq.n	80027e0 <TIM_OC1_SetConfig+0x80>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a29      	ldr	r2, [pc, #164]	; (8002878 <TIM_OC1_SetConfig+0x118>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d003      	beq.n	80027e0 <TIM_OC1_SetConfig+0x80>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a28      	ldr	r2, [pc, #160]	; (800287c <TIM_OC1_SetConfig+0x11c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10c      	bne.n	80027fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f023 0308 	bic.w	r3, r3, #8
 80027e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f023 0304 	bic.w	r3, r3, #4
 80027f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <TIM_OC1_SetConfig+0x10c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00f      	beq.n	8002822 <TIM_OC1_SetConfig+0xc2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <TIM_OC1_SetConfig+0x110>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00b      	beq.n	8002822 <TIM_OC1_SetConfig+0xc2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a19      	ldr	r2, [pc, #100]	; (8002874 <TIM_OC1_SetConfig+0x114>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <TIM_OC1_SetConfig+0xc2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a18      	ldr	r2, [pc, #96]	; (8002878 <TIM_OC1_SetConfig+0x118>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d003      	beq.n	8002822 <TIM_OC1_SetConfig+0xc2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a17      	ldr	r2, [pc, #92]	; (800287c <TIM_OC1_SetConfig+0x11c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d111      	bne.n	8002846 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	621a      	str	r2, [r3, #32]
}
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40013400 	.word	0x40013400
 8002874:	40014000 	.word	0x40014000
 8002878:	40014400 	.word	0x40014400
 800287c:	40014800 	.word	0x40014800

08002880 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	f023 0210 	bic.w	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
 800289a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f023 0320 	bic.w	r3, r3, #32
 80028ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4313      	orrs	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a28      	ldr	r2, [pc, #160]	; (8002980 <TIM_OC2_SetConfig+0x100>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_OC2_SetConfig+0x6c>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a27      	ldr	r2, [pc, #156]	; (8002984 <TIM_OC2_SetConfig+0x104>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d10d      	bne.n	8002908 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a1d      	ldr	r2, [pc, #116]	; (8002980 <TIM_OC2_SetConfig+0x100>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00f      	beq.n	8002930 <TIM_OC2_SetConfig+0xb0>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a1c      	ldr	r2, [pc, #112]	; (8002984 <TIM_OC2_SetConfig+0x104>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00b      	beq.n	8002930 <TIM_OC2_SetConfig+0xb0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a1b      	ldr	r2, [pc, #108]	; (8002988 <TIM_OC2_SetConfig+0x108>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <TIM_OC2_SetConfig+0xb0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a1a      	ldr	r2, [pc, #104]	; (800298c <TIM_OC2_SetConfig+0x10c>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d003      	beq.n	8002930 <TIM_OC2_SetConfig+0xb0>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a19      	ldr	r2, [pc, #100]	; (8002990 <TIM_OC2_SetConfig+0x110>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d113      	bne.n	8002958 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002936:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800293e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	621a      	str	r2, [r3, #32]
}
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40013400 	.word	0x40013400
 8002988:	40014000 	.word	0x40014000
 800298c:	40014400 	.word	0x40014400
 8002990:	40014800 	.word	0x40014800

08002994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	021b      	lsls	r3, r3, #8
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <TIM_OC3_SetConfig+0xfc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d003      	beq.n	80029fe <TIM_OC3_SetConfig+0x6a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a26      	ldr	r2, [pc, #152]	; (8002a94 <TIM_OC3_SetConfig+0x100>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d10d      	bne.n	8002a1a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a18:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <TIM_OC3_SetConfig+0xfc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00f      	beq.n	8002a42 <TIM_OC3_SetConfig+0xae>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <TIM_OC3_SetConfig+0x100>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00b      	beq.n	8002a42 <TIM_OC3_SetConfig+0xae>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1a      	ldr	r2, [pc, #104]	; (8002a98 <TIM_OC3_SetConfig+0x104>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d007      	beq.n	8002a42 <TIM_OC3_SetConfig+0xae>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <TIM_OC3_SetConfig+0x108>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d003      	beq.n	8002a42 <TIM_OC3_SetConfig+0xae>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <TIM_OC3_SetConfig+0x10c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d113      	bne.n	8002a6a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	621a      	str	r2, [r3, #32]
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	40012c00 	.word	0x40012c00
 8002a94:	40013400 	.word	0x40013400
 8002a98:	40014000 	.word	0x40014000
 8002a9c:	40014400 	.word	0x40014400
 8002aa0:	40014800 	.word	0x40014800

08002aa4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	021b      	lsls	r3, r3, #8
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	031b      	lsls	r3, r3, #12
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <TIM_OC4_SetConfig+0xc0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00f      	beq.n	8002b28 <TIM_OC4_SetConfig+0x84>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <TIM_OC4_SetConfig+0xc4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00b      	beq.n	8002b28 <TIM_OC4_SetConfig+0x84>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <TIM_OC4_SetConfig+0xc8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <TIM_OC4_SetConfig+0x84>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <TIM_OC4_SetConfig+0xcc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_OC4_SetConfig+0x84>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <TIM_OC4_SetConfig+0xd0>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d109      	bne.n	8002b3c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	019b      	lsls	r3, r3, #6
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	621a      	str	r2, [r3, #32]
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40012c00 	.word	0x40012c00
 8002b68:	40013400 	.word	0x40013400
 8002b6c:	40014000 	.word	0x40014000
 8002b70:	40014400 	.word	0x40014400
 8002b74:	40014800 	.word	0x40014800

08002b78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002bbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <TIM_OC5_SetConfig+0xb4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00f      	beq.n	8002bf2 <TIM_OC5_SetConfig+0x7a>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <TIM_OC5_SetConfig+0xb8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d00b      	beq.n	8002bf2 <TIM_OC5_SetConfig+0x7a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <TIM_OC5_SetConfig+0xbc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d007      	beq.n	8002bf2 <TIM_OC5_SetConfig+0x7a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <TIM_OC5_SetConfig+0xc0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d003      	beq.n	8002bf2 <TIM_OC5_SetConfig+0x7a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <TIM_OC5_SetConfig+0xc4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d109      	bne.n	8002c06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	621a      	str	r2, [r3, #32]
}
 8002c20:	bf00      	nop
 8002c22:	371c      	adds	r7, #28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40013400 	.word	0x40013400
 8002c34:	40014000 	.word	0x40014000
 8002c38:	40014400 	.word	0x40014400
 8002c3c:	40014800 	.word	0x40014800

08002c40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b087      	sub	sp, #28
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	051b      	lsls	r3, r3, #20
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <TIM_OC6_SetConfig+0xb8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00f      	beq.n	8002cbc <TIM_OC6_SetConfig+0x7c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <TIM_OC6_SetConfig+0xbc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00b      	beq.n	8002cbc <TIM_OC6_SetConfig+0x7c>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <TIM_OC6_SetConfig+0xc0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <TIM_OC6_SetConfig+0x7c>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <TIM_OC6_SetConfig+0xc4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_OC6_SetConfig+0x7c>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <TIM_OC6_SetConfig+0xc8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d109      	bne.n	8002cd0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	029b      	lsls	r3, r3, #10
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	621a      	str	r2, [r3, #32]
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40012c00 	.word	0x40012c00
 8002cfc:	40013400 	.word	0x40013400
 8002d00:	40014000 	.word	0x40014000
 8002d04:	40014400 	.word	0x40014400
 8002d08:	40014800 	.word	0x40014800

08002d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	f023 0201 	bic.w	r2, r3, #1
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f023 030a 	bic.w	r3, r3, #10
 8002d48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	621a      	str	r2, [r3, #32]
}
 8002d5e:	bf00      	nop
 8002d60:	371c      	adds	r7, #28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b087      	sub	sp, #28
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0210 	bic.w	r2, r3, #16
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	031b      	lsls	r3, r3, #12
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002da6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f043 0307 	orr.w	r3, r3, #7
 8002dec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	bf00      	nop
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	021a      	lsls	r2, r3, #8
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	609a      	str	r2, [r3, #8]
}
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2201      	movs	r2, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1a      	ldr	r2, [r3, #32]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	401a      	ands	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a1a      	ldr	r2, [r3, #32]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e063      	b.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2b      	ldr	r2, [pc, #172]	; (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d004      	beq.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2a      	ldr	r2, [pc, #168]	; (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d108      	bne.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ede:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d018      	beq.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f16:	d013      	beq.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00e      	beq.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a17      	ldr	r2, [pc, #92]	; (8002f84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d009      	beq.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a12      	ldr	r2, [pc, #72]	; (8002f7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d10c      	bne.n	8002f5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40012c00 	.word	0x40012c00
 8002f7c:	40013400 	.word	0x40013400
 8002f80:	40000400 	.word	0x40000400
 8002f84:	40000800 	.word	0x40000800
 8002f88:	40014000 	.word	0x40014000

08002f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <__libc_init_array>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	4e0d      	ldr	r6, [pc, #52]	; (8003000 <__libc_init_array+0x38>)
 8002fcc:	4c0d      	ldr	r4, [pc, #52]	; (8003004 <__libc_init_array+0x3c>)
 8002fce:	1ba4      	subs	r4, r4, r6
 8002fd0:	10a4      	asrs	r4, r4, #2
 8002fd2:	2500      	movs	r5, #0
 8002fd4:	42a5      	cmp	r5, r4
 8002fd6:	d109      	bne.n	8002fec <__libc_init_array+0x24>
 8002fd8:	4e0b      	ldr	r6, [pc, #44]	; (8003008 <__libc_init_array+0x40>)
 8002fda:	4c0c      	ldr	r4, [pc, #48]	; (800300c <__libc_init_array+0x44>)
 8002fdc:	f000 f820 	bl	8003020 <_init>
 8002fe0:	1ba4      	subs	r4, r4, r6
 8002fe2:	10a4      	asrs	r4, r4, #2
 8002fe4:	2500      	movs	r5, #0
 8002fe6:	42a5      	cmp	r5, r4
 8002fe8:	d105      	bne.n	8002ff6 <__libc_init_array+0x2e>
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff0:	4798      	blx	r3
 8002ff2:	3501      	adds	r5, #1
 8002ff4:	e7ee      	b.n	8002fd4 <__libc_init_array+0xc>
 8002ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ffa:	4798      	blx	r3
 8002ffc:	3501      	adds	r5, #1
 8002ffe:	e7f2      	b.n	8002fe6 <__libc_init_array+0x1e>
 8003000:	08003068 	.word	0x08003068
 8003004:	08003068 	.word	0x08003068
 8003008:	08003068 	.word	0x08003068
 800300c:	0800306c 	.word	0x0800306c

08003010 <memset>:
 8003010:	4402      	add	r2, r0
 8003012:	4603      	mov	r3, r0
 8003014:	4293      	cmp	r3, r2
 8003016:	d100      	bne.n	800301a <memset+0xa>
 8003018:	4770      	bx	lr
 800301a:	f803 1b01 	strb.w	r1, [r3], #1
 800301e:	e7f9      	b.n	8003014 <memset+0x4>

08003020 <_init>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	bf00      	nop
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr

0800302c <_fini>:
 800302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302e:	bf00      	nop
 8003030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003032:	bc08      	pop	{r3}
 8003034:	469e      	mov	lr, r3
 8003036:	4770      	bx	lr
