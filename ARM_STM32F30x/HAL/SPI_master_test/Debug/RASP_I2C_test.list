
RASP_I2C_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08005de0  08005de0  00015de0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006098  08006098  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006098  08006098  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006098  08006098  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006098  08006098  00016098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080060a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  200001dc  0800627c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  0800627c  00020308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009910  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016e4  00000000  00000000  00029b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000850  00000000  00000000  0002b200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002ba50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019f19  00000000  00000000  0002c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000078e9  00000000  00000000  000460f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009608d  00000000  00000000  0004d9da  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3a67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b40  00000000  00000000  000e3ae4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005dc8 	.word	0x08005dc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005dc8 	.word	0x08005dc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f90d 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f002 ff4e 	bl	8003a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f917 	bl	8000e26 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f8ed 	bl	8000dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000004 	.word	0x20000004
 8000c30:	20000000 	.word	0x20000000

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000004 	.word	0x20000004
 8000c58:	20000208 	.word	0x20000208

08000c5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000208 	.word	0x20000208

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff47 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff5c 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff ffb0 	bl	8000d94 <SysTick_Config>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b087      	sub	sp, #28
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e4e:	e154      	b.n	80010fa <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	2101      	movs	r1, #1
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 8146 	beq.w	80010f4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x38>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b12      	cmp	r3, #18
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	6939      	ldr	r1, [r7, #16]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d00b      	beq.n	8000f14 <HAL_GPIO_Init+0xd4>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f08:	2b11      	cmp	r3, #17
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b12      	cmp	r3, #18
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	f003 0201 	and.w	r2, r3, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 80a0 	beq.w	80010f4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb4:	4b58      	ldr	r3, [pc, #352]	; (8001118 <HAL_GPIO_Init+0x2d8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a57      	ldr	r2, [pc, #348]	; (8001118 <HAL_GPIO_Init+0x2d8>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b55      	ldr	r3, [pc, #340]	; (8001118 <HAL_GPIO_Init+0x2d8>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fcc:	4a53      	ldr	r2, [pc, #332]	; (800111c <HAL_GPIO_Init+0x2dc>)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ff6:	d019      	beq.n	800102c <HAL_GPIO_Init+0x1ec>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a49      	ldr	r2, [pc, #292]	; (8001120 <HAL_GPIO_Init+0x2e0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d013      	beq.n	8001028 <HAL_GPIO_Init+0x1e8>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a48      	ldr	r2, [pc, #288]	; (8001124 <HAL_GPIO_Init+0x2e4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d00d      	beq.n	8001024 <HAL_GPIO_Init+0x1e4>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a47      	ldr	r2, [pc, #284]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d007      	beq.n	8001020 <HAL_GPIO_Init+0x1e0>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a46      	ldr	r2, [pc, #280]	; (800112c <HAL_GPIO_Init+0x2ec>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d101      	bne.n	800101c <HAL_GPIO_Init+0x1dc>
 8001018:	2304      	movs	r3, #4
 800101a:	e008      	b.n	800102e <HAL_GPIO_Init+0x1ee>
 800101c:	2305      	movs	r3, #5
 800101e:	e006      	b.n	800102e <HAL_GPIO_Init+0x1ee>
 8001020:	2303      	movs	r3, #3
 8001022:	e004      	b.n	800102e <HAL_GPIO_Init+0x1ee>
 8001024:	2302      	movs	r3, #2
 8001026:	e002      	b.n	800102e <HAL_GPIO_Init+0x1ee>
 8001028:	2301      	movs	r3, #1
 800102a:	e000      	b.n	800102e <HAL_GPIO_Init+0x1ee>
 800102c:	2300      	movs	r3, #0
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	f002 0203 	and.w	r2, r2, #3
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	4093      	lsls	r3, r2
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800103e:	4937      	ldr	r1, [pc, #220]	; (800111c <HAL_GPIO_Init+0x2dc>)
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	089b      	lsrs	r3, r3, #2
 8001044:	3302      	adds	r3, #2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104c:	4b38      	ldr	r3, [pc, #224]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001070:	4a2f      	ldr	r2, [pc, #188]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001076:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800109a:	4a25      	ldr	r2, [pc, #148]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4013      	ands	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010c4:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43db      	mvns	r3, r3
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	4013      	ands	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010ee:	4a10      	ldr	r2, [pc, #64]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	3301      	adds	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	fa22 f303 	lsr.w	r3, r2, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	f47f aea3 	bne.w	8000e50 <HAL_GPIO_Init+0x10>
  }
}
 800110a:	bf00      	nop
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	40010000 	.word	0x40010000
 8001120:	48000400 	.word	0x48000400
 8001124:	48000800 	.word	0x48000800
 8001128:	48000c00 	.word	0x48000c00
 800112c:	48001000 	.word	0x48001000
 8001130:	40010400 	.word	0x40010400

08001134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
 8001140:	4613      	mov	r3, r2
 8001142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001144:	787b      	ldrb	r3, [r7, #1]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800114a:	887a      	ldrh	r2, [r7, #2]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001150:	e002      	b.n	8001158 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800116a:	af00      	add	r7, sp, #0
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	f000 bef4 	b.w	8001f66 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 816a 	beq.w	8001462 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800118e:	4bb3      	ldr	r3, [pc, #716]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b04      	cmp	r3, #4
 8001198:	d00c      	beq.n	80011b4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800119a:	4bb0      	ldr	r3, [pc, #704]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b08      	cmp	r3, #8
 80011a4:	d159      	bne.n	800125a <HAL_RCC_OscConfig+0xf6>
 80011a6:	4bad      	ldr	r3, [pc, #692]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b2:	d152      	bne.n	800125a <HAL_RCC_OscConfig+0xf6>
 80011b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011bc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80011c0:	fa93 f3a3 	rbit	r3, r3
 80011c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	fab3 f383 	clz	r3, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d102      	bne.n	80011e6 <HAL_RCC_OscConfig+0x82>
 80011e0:	4b9e      	ldr	r3, [pc, #632]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	e015      	b.n	8001212 <HAL_RCC_OscConfig+0xae>
 80011e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011ea:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011ee:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80011f2:	fa93 f3a3 	rbit	r3, r3
 80011f6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80011fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011fe:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001202:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800120e:	4b93      	ldr	r3, [pc, #588]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001216:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800121a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800121e:	fa92 f2a2 	rbit	r2, r2
 8001222:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001226:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800122a:	fab2 f282 	clz	r2, r2
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	f042 0220 	orr.w	r2, r2, #32
 8001234:	b2d2      	uxtb	r2, r2
 8001236:	f002 021f 	and.w	r2, r2, #31
 800123a:	2101      	movs	r1, #1
 800123c:	fa01 f202 	lsl.w	r2, r1, r2
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 810c 	beq.w	8001460 <HAL_RCC_OscConfig+0x2fc>
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 8106 	bne.w	8001460 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	f000 be86 	b.w	8001f66 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d106      	bne.n	8001274 <HAL_RCC_OscConfig+0x110>
 8001266:	4b7d      	ldr	r3, [pc, #500]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a7c      	ldr	r2, [pc, #496]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e030      	b.n	80012d6 <HAL_RCC_OscConfig+0x172>
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x134>
 800127e:	4b77      	ldr	r3, [pc, #476]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a76      	ldr	r2, [pc, #472]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 8001284:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b74      	ldr	r3, [pc, #464]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a73      	ldr	r2, [pc, #460]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 8001290:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e01e      	b.n	80012d6 <HAL_RCC_OscConfig+0x172>
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a2:	d10c      	bne.n	80012be <HAL_RCC_OscConfig+0x15a>
 80012a4:	4b6d      	ldr	r3, [pc, #436]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a6c      	ldr	r2, [pc, #432]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80012aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b6a      	ldr	r3, [pc, #424]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a69      	ldr	r2, [pc, #420]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80012b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	e00b      	b.n	80012d6 <HAL_RCC_OscConfig+0x172>
 80012be:	4b67      	ldr	r3, [pc, #412]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a66      	ldr	r2, [pc, #408]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80012c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a63      	ldr	r2, [pc, #396]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80012d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012d6:	4b61      	ldr	r3, [pc, #388]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	f023 020f 	bic.w	r2, r3, #15
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	495d      	ldr	r1, [pc, #372]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d059      	beq.n	80013a8 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fcb2 	bl	8000c5c <HAL_GetTick>
 80012f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fc:	e00a      	b.n	8001314 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fe:	f7ff fcad 	bl	8000c5c <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	; 0x64
 800130c:	d902      	bls.n	8001314 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	f000 be29 	b.w	8001f66 <HAL_RCC_OscConfig+0xe02>
 8001314:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001318:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800131c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001320:	fa93 f3a3 	rbit	r3, r3
 8001324:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001328:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132c:	fab3 f383 	clz	r3, r3
 8001330:	b2db      	uxtb	r3, r3
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d102      	bne.n	8001346 <HAL_RCC_OscConfig+0x1e2>
 8001340:	4b46      	ldr	r3, [pc, #280]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	e015      	b.n	8001372 <HAL_RCC_OscConfig+0x20e>
 8001346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001352:	fa93 f3a3 	rbit	r3, r3
 8001356:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800135a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800135e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001362:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001376:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800137a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800137e:	fa92 f2a2 	rbit	r2, r2
 8001382:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001386:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800138a:	fab2 f282 	clz	r2, r2
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	f042 0220 	orr.w	r2, r2, #32
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	f002 021f 	and.w	r2, r2, #31
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0ab      	beq.n	80012fe <HAL_RCC_OscConfig+0x19a>
 80013a6:	e05c      	b.n	8001462 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fc58 	bl	8000c5c <HAL_GetTick>
 80013ac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b2:	f7ff fc53 	bl	8000c5c <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d902      	bls.n	80013c8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	f000 bdcf 	b.w	8001f66 <HAL_RCC_OscConfig+0xe02>
 80013c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80013d4:	fa93 f3a3 	rbit	r3, r3
 80013d8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80013dc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e0:	fab3 f383 	clz	r3, r3
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d102      	bne.n	80013fa <HAL_RCC_OscConfig+0x296>
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	e015      	b.n	8001426 <HAL_RCC_OscConfig+0x2c2>
 80013fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800140e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001412:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001416:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <HAL_RCC_OscConfig+0x2f8>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800142a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800142e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001432:	fa92 f2a2 	rbit	r2, r2
 8001436:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800143a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800143e:	fab2 f282 	clz	r2, r2
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	f042 0220 	orr.w	r2, r2, #32
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	f002 021f 	and.w	r2, r2, #31
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ab      	bne.n	80013b2 <HAL_RCC_OscConfig+0x24e>
 800145a:	e002      	b.n	8001462 <HAL_RCC_OscConfig+0x2fe>
 800145c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 816f 	beq.w	8001750 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001472:	4bd0      	ldr	r3, [pc, #832]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800147e:	4bcd      	ldr	r3, [pc, #820]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b08      	cmp	r3, #8
 8001488:	d16c      	bne.n	8001564 <HAL_RCC_OscConfig+0x400>
 800148a:	4bca      	ldr	r3, [pc, #808]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d166      	bne.n	8001564 <HAL_RCC_OscConfig+0x400>
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80014a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ac:	fab3 f383 	clz	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d102      	bne.n	80014c6 <HAL_RCC_OscConfig+0x362>
 80014c0:	4bbc      	ldr	r3, [pc, #752]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	e013      	b.n	80014ee <HAL_RCC_OscConfig+0x38a>
 80014c6:	2302      	movs	r3, #2
 80014c8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80014d0:	fa93 f3a3 	rbit	r3, r3
 80014d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80014d8:	2302      	movs	r3, #2
 80014da:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80014de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80014e2:	fa93 f3a3 	rbit	r3, r3
 80014e6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80014ea:	4bb2      	ldr	r3, [pc, #712]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	2202      	movs	r2, #2
 80014f0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80014f4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80014f8:	fa92 f2a2 	rbit	r2, r2
 80014fc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001500:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001504:	fab2 f282 	clz	r2, r2
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	f042 0220 	orr.w	r2, r2, #32
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	f002 021f 	and.w	r2, r2, #31
 8001514:	2101      	movs	r1, #1
 8001516:	fa01 f202 	lsl.w	r2, r1, r2
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <HAL_RCC_OscConfig+0x3cc>
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d002      	beq.n	8001530 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	f000 bd1b 	b.w	8001f66 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4ba0      	ldr	r3, [pc, #640]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	21f8      	movs	r1, #248	; 0xf8
 8001540:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001548:	fa91 f1a1 	rbit	r1, r1
 800154c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001550:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001554:	fab1 f181 	clz	r1, r1
 8001558:	b2c9      	uxtb	r1, r1
 800155a:	408b      	lsls	r3, r1
 800155c:	4995      	ldr	r1, [pc, #596]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 800155e:	4313      	orrs	r3, r2
 8001560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	e0f5      	b.n	8001750 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 8085 	beq.w	800167a <HAL_RCC_OscConfig+0x516>
 8001570:	2301      	movs	r3, #1
 8001572:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001576:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800157a:	fa93 f3a3 	rbit	r3, r3
 800157e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001582:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001590:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	461a      	mov	r2, r3
 8001598:	2301      	movs	r3, #1
 800159a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fb5e 	bl	8000c5c <HAL_GetTick>
 80015a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fb59 	bl	8000c5c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d902      	bls.n	80015bc <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	f000 bcd5 	b.w	8001f66 <HAL_RCC_OscConfig+0xe02>
 80015bc:	2302      	movs	r3, #2
 80015be:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80015ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	095b      	lsrs	r3, r3, #5
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d102      	bne.n	80015ec <HAL_RCC_OscConfig+0x488>
 80015e6:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	e013      	b.n	8001614 <HAL_RCC_OscConfig+0x4b0>
 80015ec:	2302      	movs	r3, #2
 80015ee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80015f6:	fa93 f3a3 	rbit	r3, r3
 80015fa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80015fe:	2302      	movs	r3, #2
 8001600:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001604:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001608:	fa93 f3a3 	rbit	r3, r3
 800160c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001610:	4b68      	ldr	r3, [pc, #416]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	2202      	movs	r2, #2
 8001616:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800161a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800161e:	fa92 f2a2 	rbit	r2, r2
 8001622:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001626:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800162a:	fab2 f282 	clz	r2, r2
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	f042 0220 	orr.w	r2, r2, #32
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	f002 021f 	and.w	r2, r2, #31
 800163a:	2101      	movs	r1, #1
 800163c:	fa01 f202 	lsl.w	r2, r1, r2
 8001640:	4013      	ands	r3, r2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0af      	beq.n	80015a6 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001646:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	21f8      	movs	r1, #248	; 0xf8
 8001656:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800165e:	fa91 f1a1 	rbit	r1, r1
 8001662:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001666:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800166a:	fab1 f181 	clz	r1, r1
 800166e:	b2c9      	uxtb	r1, r1
 8001670:	408b      	lsls	r3, r1
 8001672:	4950      	ldr	r1, [pc, #320]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e06a      	b.n	8001750 <HAL_RCC_OscConfig+0x5ec>
 800167a:	2301      	movs	r3, #1
 800167c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001684:	fa93 f3a3 	rbit	r3, r3
 8001688:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800168c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001690:	fab3 f383 	clz	r3, r3
 8001694:	b2db      	uxtb	r3, r3
 8001696:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800169a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	461a      	mov	r2, r3
 80016a2:	2300      	movs	r3, #0
 80016a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fad9 	bl	8000c5c <HAL_GetTick>
 80016aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b0:	f7ff fad4 	bl	8000c5c <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d902      	bls.n	80016c6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f000 bc50 	b.w	8001f66 <HAL_RCC_OscConfig+0xe02>
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80016d0:	fa93 f3a3 	rbit	r3, r3
 80016d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80016d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016dc:	fab3 f383 	clz	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d102      	bne.n	80016f6 <HAL_RCC_OscConfig+0x592>
 80016f0:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	e013      	b.n	800171e <HAL_RCC_OscConfig+0x5ba>
 80016f6:	2302      	movs	r3, #2
 80016f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001708:	2302      	movs	r3, #2
 800170a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800170e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001712:	fa93 f3a3 	rbit	r3, r3
 8001716:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800171a:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <HAL_RCC_OscConfig+0x650>)
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	2202      	movs	r2, #2
 8001720:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001724:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001728:	fa92 f2a2 	rbit	r2, r2
 800172c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001730:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001734:	fab2 f282 	clz	r2, r2
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	f042 0220 	orr.w	r2, r2, #32
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	f002 021f 	and.w	r2, r2, #31
 8001744:	2101      	movs	r1, #1
 8001746:	fa01 f202 	lsl.w	r2, r1, r2
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1af      	bne.n	80016b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80da 	beq.w	8001914 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d069      	beq.n	800183e <HAL_RCC_OscConfig+0x6da>
 800176a:	2301      	movs	r3, #1
 800176c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001774:	fa93 f3a3 	rbit	r3, r3
 8001778:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800177c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001780:	fab3 f383 	clz	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_RCC_OscConfig+0x654>)
 800178a:	4413      	add	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	461a      	mov	r2, r3
 8001790:	2301      	movs	r3, #1
 8001792:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff fa62 	bl	8000c5c <HAL_GetTick>
 8001798:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179c:	e00e      	b.n	80017bc <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fa5d 	bl	8000c5c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d906      	bls.n	80017bc <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e3d9      	b.n	8001f66 <HAL_RCC_OscConfig+0xe02>
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	10908120 	.word	0x10908120
 80017bc:	2302      	movs	r3, #2
 80017be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80017ce:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017d2:	2202      	movs	r2, #2
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	fa93 f2a3 	rbit	r2, r3
 80017e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017ea:	2202      	movs	r2, #2
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80017fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	4ba5      	ldr	r3, [pc, #660]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 8001800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001802:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001806:	2102      	movs	r1, #2
 8001808:	6019      	str	r1, [r3, #0]
 800180a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f1a3 	rbit	r1, r3
 8001814:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001818:	6019      	str	r1, [r3, #0]
  return result;
 800181a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0b0      	beq.n	800179e <HAL_RCC_OscConfig+0x63a>
 800183c:	e06a      	b.n	8001914 <HAL_RCC_OscConfig+0x7b0>
 800183e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	fa93 f2a3 	rbit	r2, r3
 8001850:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001854:	601a      	str	r2, [r3, #0]
  return result;
 8001856:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800185a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	461a      	mov	r2, r3
 8001864:	4b8c      	ldr	r3, [pc, #560]	; (8001a98 <HAL_RCC_OscConfig+0x934>)
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	461a      	mov	r2, r3
 800186c:	2300      	movs	r3, #0
 800186e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001870:	f7ff f9f4 	bl	8000c5c <HAL_GetTick>
 8001874:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	e009      	b.n	800188e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187a:	f7ff f9ef 	bl	8000c5c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e36b      	b.n	8001f66 <HAL_RCC_OscConfig+0xe02>
 800188e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001892:	2202      	movs	r2, #2
 8001894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018aa:	2202      	movs	r2, #2
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	fa93 f2a3 	rbit	r2, r3
 80018b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018c2:	2202      	movs	r2, #2
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	fa93 f2a3 	rbit	r2, r3
 80018d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d6:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 80018d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018da:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018de:	2102      	movs	r1, #2
 80018e0:	6019      	str	r1, [r3, #0]
 80018e2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fa93 f1a3 	rbit	r1, r3
 80018ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018f0:	6019      	str	r1, [r3, #0]
  return result;
 80018f2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fab3 f383 	clz	r3, r3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001902:	b2db      	uxtb	r3, r3
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	2101      	movs	r1, #1
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	4013      	ands	r3, r2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1b2      	bne.n	800187a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 8158 	beq.w	8001bd4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192a:	4b5a      	ldr	r3, [pc, #360]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d112      	bne.n	800195c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b57      	ldr	r3, [pc, #348]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4a56      	ldr	r2, [pc, #344]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	61d3      	str	r3, [r2, #28]
 8001942:	4b54      	ldr	r3, [pc, #336]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001956:	2301      	movs	r3, #1
 8001958:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195c:	4b4f      	ldr	r3, [pc, #316]	; (8001a9c <HAL_RCC_OscConfig+0x938>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001964:	2b00      	cmp	r3, #0
 8001966:	d11a      	bne.n	800199e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001968:	4b4c      	ldr	r3, [pc, #304]	; (8001a9c <HAL_RCC_OscConfig+0x938>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a4b      	ldr	r2, [pc, #300]	; (8001a9c <HAL_RCC_OscConfig+0x938>)
 800196e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001972:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001974:	f7ff f972 	bl	8000c5c <HAL_GetTick>
 8001978:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197c:	e009      	b.n	8001992 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197e:	f7ff f96d 	bl	8000c5c <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e2e9      	b.n	8001f66 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001992:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <HAL_RCC_OscConfig+0x938>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0ef      	beq.n	800197e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d106      	bne.n	80019b6 <HAL_RCC_OscConfig+0x852>
 80019a8:	4b3a      	ldr	r3, [pc, #232]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4a39      	ldr	r2, [pc, #228]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	6213      	str	r3, [r2, #32]
 80019b4:	e02f      	b.n	8001a16 <HAL_RCC_OscConfig+0x8b2>
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x876>
 80019c0:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a33      	ldr	r2, [pc, #204]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a30      	ldr	r2, [pc, #192]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 80019d2:	f023 0304 	bic.w	r3, r3, #4
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e01d      	b.n	8001a16 <HAL_RCC_OscConfig+0x8b2>
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d10c      	bne.n	80019fe <HAL_RCC_OscConfig+0x89a>
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4a2a      	ldr	r2, [pc, #168]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6213      	str	r3, [r2, #32]
 80019f0:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	4a27      	ldr	r2, [pc, #156]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6213      	str	r3, [r2, #32]
 80019fc:	e00b      	b.n	8001a16 <HAL_RCC_OscConfig+0x8b2>
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a24      	ldr	r2, [pc, #144]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 8001a10:	f023 0304 	bic.w	r3, r3, #4
 8001a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d06b      	beq.n	8001af8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff f91c 	bl	8000c5c <HAL_GetTick>
 8001a24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f917 	bl	8000c5c <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e291      	b.n	8001f66 <HAL_RCC_OscConfig+0xe02>
 8001a42:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a46:	2202      	movs	r2, #2
 8001a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a5e:	2202      	movs	r2, #2
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a70:	601a      	str	r2, [r3, #0]
  return result;
 8001a72:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d109      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x93c>
 8001a8c:	4b01      	ldr	r3, [pc, #4]	; (8001a94 <HAL_RCC_OscConfig+0x930>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	e014      	b.n	8001abc <HAL_RCC_OscConfig+0x958>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
 8001a98:	10908120 	.word	0x10908120
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	4bbb      	ldr	r3, [pc, #748]	; (8001da8 <HAL_RCC_OscConfig+0xc44>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	6011      	str	r1, [r2, #0]
 8001ac4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ac8:	6812      	ldr	r2, [r2, #0]
 8001aca:	fa92 f1a2 	rbit	r1, r2
 8001ace:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ad2:	6011      	str	r1, [r2, #0]
  return result;
 8001ad4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	fab2 f282 	clz	r2, r2
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f002 021f 	and.w	r2, r2, #31
 8001aea:	2101      	movs	r1, #1
 8001aec:	fa01 f202 	lsl.w	r2, r1, r2
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d099      	beq.n	8001a2a <HAL_RCC_OscConfig+0x8c6>
 8001af6:	e063      	b.n	8001bc0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af8:	f7ff f8b0 	bl	8000c5c <HAL_GetTick>
 8001afc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b00:	e00b      	b.n	8001b1a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7ff f8ab 	bl	8000c5c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e225      	b.n	8001f66 <HAL_RCC_OscConfig+0xe02>
 8001b1a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b1e:	2202      	movs	r2, #2
 8001b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b36:	2202      	movs	r2, #2
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	fa93 f2a3 	rbit	r2, r3
 8001b44:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b48:	601a      	str	r2, [r3, #0]
  return result;
 8001b4a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b4e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	f043 0302 	orr.w	r3, r3, #2
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d102      	bne.n	8001b6a <HAL_RCC_OscConfig+0xa06>
 8001b64:	4b90      	ldr	r3, [pc, #576]	; (8001da8 <HAL_RCC_OscConfig+0xc44>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	e00d      	b.n	8001b86 <HAL_RCC_OscConfig+0xa22>
 8001b6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b6e:	2202      	movs	r2, #2
 8001b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	fa93 f2a3 	rbit	r2, r3
 8001b7c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	4b89      	ldr	r3, [pc, #548]	; (8001da8 <HAL_RCC_OscConfig+0xc44>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	6011      	str	r1, [r2, #0]
 8001b8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	fa92 f1a2 	rbit	r1, r2
 8001b98:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001b9c:	6011      	str	r1, [r2, #0]
  return result;
 8001b9e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f002 021f 	and.w	r2, r2, #31
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1a0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bc0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b77      	ldr	r3, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0xc44>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	4a76      	ldr	r2, [pc, #472]	; (8001da8 <HAL_RCC_OscConfig+0xc44>)
 8001bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 81c2 	beq.w	8001f64 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be0:	4b71      	ldr	r3, [pc, #452]	; (8001da8 <HAL_RCC_OscConfig+0xc44>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	f000 819c 	beq.w	8001f26 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	f040 8114 	bne.w	8001e22 <HAL_RCC_OscConfig+0xcbe>
 8001bfa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001bfe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c12:	601a      	str	r2, [r3, #0]
  return result;
 8001c14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c18:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	fab3 f383 	clz	r3, r3
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff f814 	bl	8000c5c <HAL_GetTick>
 8001c34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c38:	e009      	b.n	8001c4e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3a:	f7ff f80f 	bl	8000c5c <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e18b      	b.n	8001f66 <HAL_RCC_OscConfig+0xe02>
 8001c4e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	fa93 f2a3 	rbit	r2, r3
 8001c62:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c66:	601a      	str	r2, [r3, #0]
  return result;
 8001c68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	095b      	lsrs	r3, r3, #5
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d102      	bne.n	8001c88 <HAL_RCC_OscConfig+0xb24>
 8001c82:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <HAL_RCC_OscConfig+0xc44>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	e01b      	b.n	8001cc0 <HAL_RCC_OscConfig+0xb5c>
 8001c88:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	fa93 f2a3 	rbit	r2, r3
 8001c9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ca6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	fa93 f2a3 	rbit	r2, r3
 8001cb6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <HAL_RCC_OscConfig+0xc44>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cc4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cc8:	6011      	str	r1, [r2, #0]
 8001cca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	fa92 f1a2 	rbit	r1, r2
 8001cd4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cd8:	6011      	str	r1, [r2, #0]
  return result;
 8001cda:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	fab2 f282 	clz	r2, r2
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f042 0220 	orr.w	r2, r2, #32
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f002 021f 	and.w	r2, r2, #31
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d19e      	bne.n	8001c3a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_RCC_OscConfig+0xc44>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	430b      	orrs	r3, r1
 8001d12:	4925      	ldr	r1, [pc, #148]	; (8001da8 <HAL_RCC_OscConfig+0xc44>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d30:	601a      	str	r2, [r3, #0]
  return result;
 8001d32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d36:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d38:	fab3 f383 	clz	r3, r3
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d42:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7fe ff85 	bl	8000c5c <HAL_GetTick>
 8001d52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d56:	e009      	b.n	8001d6c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d58:	f7fe ff80 	bl	8000c5c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0fc      	b.n	8001f66 <HAL_RCC_OscConfig+0xe02>
 8001d6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	fa93 f2a3 	rbit	r2, r3
 8001d80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d84:	601a      	str	r2, [r3, #0]
  return result;
 8001d86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d8a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_RCC_OscConfig+0xc48>
 8001da0:	4b01      	ldr	r3, [pc, #4]	; (8001da8 <HAL_RCC_OscConfig+0xc44>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	e01e      	b.n	8001de4 <HAL_RCC_OscConfig+0xc80>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001db0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001db4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	fa93 f2a3 	rbit	r2, r3
 8001dc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_RCC_OscConfig+0xe0c>)
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001de8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dec:	6011      	str	r1, [r2, #0]
 8001dee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	fa92 f1a2 	rbit	r1, r2
 8001df8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001dfc:	6011      	str	r1, [r2, #0]
  return result;
 8001dfe:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	fab2 f282 	clz	r2, r2
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	f042 0220 	orr.w	r2, r2, #32
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	f002 021f 	and.w	r2, r2, #31
 8001e14:	2101      	movs	r1, #1
 8001e16:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d09b      	beq.n	8001d58 <HAL_RCC_OscConfig+0xbf4>
 8001e20:	e0a0      	b.n	8001f64 <HAL_RCC_OscConfig+0xe00>
 8001e22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	fa93 f2a3 	rbit	r2, r3
 8001e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3a:	601a      	str	r2, [r3, #0]
  return result;
 8001e3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e40:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	461a      	mov	r2, r3
 8001e54:	2300      	movs	r3, #0
 8001e56:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e58:	f7fe ff00 	bl	8000c5c <HAL_GetTick>
 8001e5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	e009      	b.n	8001e76 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe fefb 	bl	8000c5c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e077      	b.n	8001f66 <HAL_RCC_OscConfig+0xe02>
 8001e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fa93 f2a3 	rbit	r2, r3
 8001e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8e:	601a      	str	r2, [r3, #0]
  return result;
 8001e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	095b      	lsrs	r3, r3, #5
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d102      	bne.n	8001eb0 <HAL_RCC_OscConfig+0xd4c>
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_RCC_OscConfig+0xe0c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	e01b      	b.n	8001ee8 <HAL_RCC_OscConfig+0xd84>
 8001eb0:	f107 0320 	add.w	r3, r7, #32
 8001eb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f107 0320 	add.w	r3, r7, #32
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f107 0318 	add.w	r3, r7, #24
 8001ece:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	f107 0318 	add.w	r3, r7, #24
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f107 0314 	add.w	r3, r7, #20
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_RCC_OscConfig+0xe0c>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f107 0210 	add.w	r2, r7, #16
 8001eec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ef0:	6011      	str	r1, [r2, #0]
 8001ef2:	f107 0210 	add.w	r2, r7, #16
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	fa92 f1a2 	rbit	r1, r2
 8001efc:	f107 020c 	add.w	r2, r7, #12
 8001f00:	6011      	str	r1, [r2, #0]
  return result;
 8001f02:	f107 020c 	add.w	r2, r7, #12
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	fab2 f282 	clz	r2, r2
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	f042 0220 	orr.w	r2, r2, #32
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f002 021f 	and.w	r2, r2, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d19e      	bne.n	8001e62 <HAL_RCC_OscConfig+0xcfe>
 8001f24:	e01e      	b.n	8001f64 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e018      	b.n	8001f66 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f34:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <HAL_RCC_OscConfig+0xe0c>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f3c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d108      	bne.n	8001f60 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f4e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000

08001f74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b09e      	sub	sp, #120	; 0x78
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e162      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b90      	ldr	r3, [pc, #576]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d910      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b8d      	ldr	r3, [pc, #564]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	498b      	ldr	r1, [pc, #556]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b89      	ldr	r3, [pc, #548]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e14a      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b82      	ldr	r3, [pc, #520]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	497f      	ldr	r1, [pc, #508]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80dc 	beq.w	80021a0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d13c      	bne.n	800206a <HAL_RCC_ClockConfig+0xf6>
 8001ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f043 0301 	orr.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d102      	bne.n	800201a <HAL_RCC_ClockConfig+0xa6>
 8002014:	4b6f      	ldr	r3, [pc, #444]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	e00f      	b.n	800203a <HAL_RCC_ClockConfig+0xc6>
 800201a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800201e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	667b      	str	r3, [r7, #100]	; 0x64
 8002028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800202c:	663b      	str	r3, [r7, #96]	; 0x60
 800202e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002036:	4b67      	ldr	r3, [pc, #412]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800203e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002040:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002042:	fa92 f2a2 	rbit	r2, r2
 8002046:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002048:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800204a:	fab2 f282 	clz	r2, r2
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	f042 0220 	orr.w	r2, r2, #32
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	f002 021f 	and.w	r2, r2, #31
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f202 	lsl.w	r2, r1, r2
 8002060:	4013      	ands	r3, r2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d17b      	bne.n	800215e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0f3      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d13c      	bne.n	80020ec <HAL_RCC_ClockConfig+0x178>
 8002072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002076:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	fab3 f383 	clz	r3, r3
 8002086:	b2db      	uxtb	r3, r3
 8002088:	095b      	lsrs	r3, r3, #5
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d102      	bne.n	800209c <HAL_RCC_ClockConfig+0x128>
 8002096:	4b4f      	ldr	r3, [pc, #316]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	e00f      	b.n	80020bc <HAL_RCC_ClockConfig+0x148>
 800209c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	647b      	str	r3, [r7, #68]	; 0x44
 80020aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40
 80020b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b8:	4b46      	ldr	r3, [pc, #280]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c0:	63ba      	str	r2, [r7, #56]	; 0x38
 80020c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020c4:	fa92 f2a2 	rbit	r2, r2
 80020c8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020cc:	fab2 f282 	clz	r2, r2
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	f042 0220 	orr.w	r2, r2, #32
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	f002 021f 	and.w	r2, r2, #31
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f202 	lsl.w	r2, r1, r2
 80020e2:	4013      	ands	r3, r2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d13a      	bne.n	800215e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0b2      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
 80020ec:	2302      	movs	r3, #2
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b01      	cmp	r3, #1
 800210c:	d102      	bne.n	8002114 <HAL_RCC_ClockConfig+0x1a0>
 800210e:	4b31      	ldr	r3, [pc, #196]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	e00d      	b.n	8002130 <HAL_RCC_ClockConfig+0x1bc>
 8002114:	2302      	movs	r3, #2
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	fa93 f3a3 	rbit	r3, r3
 800211e:	627b      	str	r3, [r7, #36]	; 0x24
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	4b29      	ldr	r3, [pc, #164]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	2202      	movs	r2, #2
 8002132:	61ba      	str	r2, [r7, #24]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	fa92 f2a2 	rbit	r2, r2
 800213a:	617a      	str	r2, [r7, #20]
  return result;
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	fab2 f282 	clz	r2, r2
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	f042 0220 	orr.w	r2, r2, #32
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	f002 021f 	and.w	r2, r2, #31
 800214e:	2101      	movs	r1, #1
 8002150:	fa01 f202 	lsl.w	r2, r1, r2
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e079      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f023 0203 	bic.w	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	491a      	ldr	r1, [pc, #104]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002170:	f7fe fd74 	bl	8000c5c <HAL_GetTick>
 8002174:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	e00a      	b.n	800218e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002178:	f7fe fd70 	bl	8000c5c <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e061      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_RCC_ClockConfig+0x260>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 020c 	and.w	r2, r3, #12
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	429a      	cmp	r2, r3
 800219e:	d1eb      	bne.n	8002178 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d214      	bcs.n	80021d8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	4906      	ldr	r1, [pc, #24]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_RCC_ClockConfig+0x25c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e040      	b.n	8002252 <HAL_RCC_ClockConfig+0x2de>
 80021d0:	40022000 	.word	0x40022000
 80021d4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_ClockConfig+0x2e8>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	491a      	ldr	r1, [pc, #104]	; (800225c <HAL_RCC_ClockConfig+0x2e8>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d009      	beq.n	8002216 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x2e8>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4912      	ldr	r1, [pc, #72]	; (800225c <HAL_RCC_ClockConfig+0x2e8>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002216:	f000 f829 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800221a:	4601      	mov	r1, r0
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_RCC_ClockConfig+0x2e8>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002224:	22f0      	movs	r2, #240	; 0xf0
 8002226:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	fa92 f2a2 	rbit	r2, r2
 800222e:	60fa      	str	r2, [r7, #12]
  return result;
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	fab2 f282 	clz	r2, r2
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	40d3      	lsrs	r3, r2
 800223a:	4a09      	ldr	r2, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x2ec>)
 800223c:	5cd3      	ldrb	r3, [r2, r3]
 800223e:	fa21 f303 	lsr.w	r3, r1, r3
 8002242:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_RCC_ClockConfig+0x2f0>)
 8002244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002246:	4b08      	ldr	r3, [pc, #32]	; (8002268 <HAL_RCC_ClockConfig+0x2f4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fcc2 	bl	8000bd4 <HAL_InitTick>
  
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3778      	adds	r7, #120	; 0x78
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	08005e24 	.word	0x08005e24
 8002264:	20000008 	.word	0x20000008
 8002268:	20000000 	.word	0x20000000

0800226c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b08b      	sub	sp, #44	; 0x2c
 8002270:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	2300      	movs	r3, #0
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002286:	4b29      	ldr	r3, [pc, #164]	; (800232c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	2b04      	cmp	r3, #4
 8002294:	d002      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x30>
 8002296:	2b08      	cmp	r3, #8
 8002298:	d003      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x36>
 800229a:	e03c      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800229c:	4b24      	ldr	r3, [pc, #144]	; (8002330 <HAL_RCC_GetSysClockFreq+0xc4>)
 800229e:	623b      	str	r3, [r7, #32]
      break;
 80022a0:	e03c      	b.n	800231c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80022a8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80022ac:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	fa92 f2a2 	rbit	r2, r2
 80022b4:	607a      	str	r2, [r7, #4]
  return result;
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	fab2 f282 	clz	r2, r2
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	40d3      	lsrs	r3, r2
 80022c0:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <HAL_RCC_GetSysClockFreq+0xc8>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_RCC_GetSysClockFreq+0xc0>)
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	220f      	movs	r2, #15
 80022d0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	fa92 f2a2 	rbit	r2, r2
 80022d8:	60fa      	str	r2, [r7, #12]
  return result;
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	fab2 f282 	clz	r2, r2
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	40d3      	lsrs	r3, r2
 80022e4:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_RCC_GetSysClockFreq+0xcc>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022f4:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	627b      	str	r3, [r7, #36]	; 0x24
 8002304:	e004      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	4a0c      	ldr	r2, [pc, #48]	; (800233c <HAL_RCC_GetSysClockFreq+0xd0>)
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	623b      	str	r3, [r7, #32]
      break;
 8002314:	e002      	b.n	800231c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002318:	623b      	str	r3, [r7, #32]
      break;
 800231a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231c:	6a3b      	ldr	r3, [r7, #32]
}
 800231e:	4618      	mov	r0, r3
 8002320:	372c      	adds	r7, #44	; 0x2c
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	007a1200 	.word	0x007a1200
 8002334:	08005e04 	.word	0x08005e04
 8002338:	08005e14 	.word	0x08005e14
 800233c:	003d0900 	.word	0x003d0900

08002340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCC_GetHCLKFreq+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000008 	.word	0x20000008

08002358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800235e:	f7ff ffef 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002362:	4601      	mov	r1, r0
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800236c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002370:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	fa92 f2a2 	rbit	r2, r2
 8002378:	603a      	str	r2, [r7, #0]
  return result;
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	fab2 f282 	clz	r2, r2
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	40d3      	lsrs	r3, r2
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002386:	5cd3      	ldrb	r3, [r2, r3]
 8002388:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	08005e34 	.word	0x08005e34

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80023a2:	f7ff ffcd 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 80023a6:	4601      	mov	r1, r0
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80023b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80023b4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	fa92 f2a2 	rbit	r2, r2
 80023bc:	603a      	str	r2, [r7, #0]
  return result;
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	fab2 f282 	clz	r2, r2
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	40d3      	lsrs	r3, r2
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <HAL_RCC_GetPCLK2Freq+0x40>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	08005e34 	.word	0x08005e34

080023e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b092      	sub	sp, #72	; 0x48
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80d7 	beq.w	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002404:	4b4e      	ldr	r3, [pc, #312]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10e      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002410:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4a4a      	ldr	r2, [pc, #296]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241a:	61d3      	str	r3, [r2, #28]
 800241c:	4b48      	ldr	r3, [pc, #288]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002428:	2301      	movs	r3, #1
 800242a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242e:	4b45      	ldr	r3, [pc, #276]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d118      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800243a:	4b42      	ldr	r3, [pc, #264]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a41      	ldr	r2, [pc, #260]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002444:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002446:	f7fe fc09 	bl	8000c5c <HAL_GetTick>
 800244a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244c:	e008      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800244e:	f7fe fc05 	bl	8000c5c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b64      	cmp	r3, #100	; 0x64
 800245a:	d901      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e169      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	4b38      	ldr	r3, [pc, #224]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800246c:	4b34      	ldr	r3, [pc, #208]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002474:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8084 	beq.w	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002488:	429a      	cmp	r2, r3
 800248a:	d07c      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800249a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	461a      	mov	r2, r3
 80024b6:	2301      	movs	r3, #1
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c2:	fa93 f3a3 	rbit	r3, r3
 80024c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80024c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024ca:	fab3 f383 	clz	r3, r3
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	461a      	mov	r2, r3
 80024da:	2300      	movs	r3, #0
 80024dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024de:	4a18      	ldr	r2, [pc, #96]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d04b      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7fe fbb5 	bl	8000c5c <HAL_GetTick>
 80024f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe fbb1 	bl	8000c5c <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e113      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800250c:	2302      	movs	r3, #2
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002512:	fa93 f3a3 	rbit	r3, r3
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
 8002518:	2302      	movs	r3, #2
 800251a:	623b      	str	r3, [r7, #32]
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	61fb      	str	r3, [r7, #28]
  return result;
 8002524:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d108      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800253a:	4b01      	ldr	r3, [pc, #4]	; (8002540 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	e00d      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
 8002548:	10908100 	.word	0x10908100
 800254c:	2302      	movs	r3, #2
 800254e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	fa93 f3a3 	rbit	r3, r3
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	4b78      	ldr	r3, [pc, #480]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	2202      	movs	r2, #2
 800255e:	613a      	str	r2, [r7, #16]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	fa92 f2a2 	rbit	r2, r2
 8002566:	60fa      	str	r2, [r7, #12]
  return result;
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	fab2 f282 	clz	r2, r2
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f002 021f 	and.w	r2, r2, #31
 800257a:	2101      	movs	r1, #1
 800257c:	fa01 f202 	lsl.w	r2, r1, r2
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0b7      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002586:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	496a      	ldr	r1, [pc, #424]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002594:	4313      	orrs	r3, r2
 8002596:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002598:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a0:	4b66      	ldr	r3, [pc, #408]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	4a65      	ldr	r2, [pc, #404]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025b8:	4b60      	ldr	r3, [pc, #384]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f023 0203 	bic.w	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	495d      	ldr	r1, [pc, #372]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025d6:	4b59      	ldr	r3, [pc, #356]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4956      	ldr	r1, [pc, #344]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025f4:	4b51      	ldr	r3, [pc, #324]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	494e      	ldr	r1, [pc, #312]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	2b00      	cmp	r3, #0
 8002610:	d008      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002612:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f023 0210 	bic.w	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	4947      	ldr	r1, [pc, #284]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002620:	4313      	orrs	r3, r2
 8002622:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002630:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	493f      	ldr	r1, [pc, #252]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800263e:	4313      	orrs	r3, r2
 8002640:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f023 0220 	bic.w	r2, r3, #32
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4938      	ldr	r1, [pc, #224]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800265c:	4313      	orrs	r3, r2
 800265e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800266c:	4b33      	ldr	r3, [pc, #204]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	4930      	ldr	r1, [pc, #192]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800267a:	4313      	orrs	r3, r2
 800267c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800268a:	4b2c      	ldr	r3, [pc, #176]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	4929      	ldr	r1, [pc, #164]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002698:	4313      	orrs	r3, r2
 800269a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026a8:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	4921      	ldr	r1, [pc, #132]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	491a      	ldr	r1, [pc, #104]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80026e4:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	4912      	ldr	r1, [pc, #72]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d008      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	490b      	ldr	r1, [pc, #44]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002710:	4313      	orrs	r3, r2
 8002712:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272c:	4903      	ldr	r1, [pc, #12]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3748      	adds	r7, #72	; 0x48
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000

08002740 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e084      	b.n	800285c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d106      	bne.n	8002772 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f001 f99d 	bl	8003aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2202      	movs	r2, #2
 8002776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002788:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002792:	d902      	bls.n	800279a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e002      	b.n	80027a0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800279a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80027a8:	d007      	beq.n	80027ba <HAL_SPI_Init+0x7a>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027b2:	d002      	beq.n	80027ba <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10b      	bne.n	80027da <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027ca:	d903      	bls.n	80027d4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	631a      	str	r2, [r3, #48]	; 0x30
 80027d2:	e002      	b.n	80027da <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	ea42 0103 	orr.w	r1, r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	f003 0204 	and.w	r2, r3, #4
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	ea42 0103 	orr.w	r1, r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	430a      	orrs	r2, r1
 800283a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08a      	sub	sp, #40	; 0x28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
 8002870:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002872:	2301      	movs	r3, #1
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_SPI_TransmitReceive+0x26>
 8002886:	2302      	movs	r3, #2
 8002888:	e1fb      	b.n	8002c82 <HAL_SPI_TransmitReceive+0x41e>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002892:	f7fe f9e3 	bl	8000c5c <HAL_GetTick>
 8002896:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800289e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028ae:	7efb      	ldrb	r3, [r7, #27]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d00e      	beq.n	80028d2 <HAL_SPI_TransmitReceive+0x6e>
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028ba:	d106      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <HAL_SPI_TransmitReceive+0x66>
 80028c4:	7efb      	ldrb	r3, [r7, #27]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d003      	beq.n	80028d2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
 80028cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028d0:	e1cd      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x80>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_SPI_TransmitReceive+0x80>
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d103      	bne.n	80028ec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80028ea:	e1c0      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d003      	beq.n	8002900 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2205      	movs	r2, #5
 80028fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	887a      	ldrh	r2, [r7, #2]
 8002926:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	887a      	ldrh	r2, [r7, #2]
 800292c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002942:	d802      	bhi.n	800294a <HAL_SPI_TransmitReceive+0xe6>
 8002944:	8a3b      	ldrh	r3, [r7, #16]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d908      	bls.n	800295c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	e007      	b.n	800296c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800296a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d007      	beq.n	800298a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002988:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002992:	d97c      	bls.n	8002a8e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_SPI_TransmitReceive+0x13e>
 800299c:	8a7b      	ldrh	r3, [r7, #18]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d169      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	881a      	ldrh	r2, [r3, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	1c9a      	adds	r2, r3, #2
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029bc:	b29b      	uxth	r3, r3
 80029be:	3b01      	subs	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029c6:	e056      	b.n	8002a76 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d11b      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x1aa>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d016      	beq.n	8002a0e <HAL_SPI_TransmitReceive+0x1aa>
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d113      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	881a      	ldrh	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	1c9a      	adds	r2, r3, #2
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d11c      	bne.n	8002a56 <HAL_SPI_TransmitReceive+0x1f2>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d016      	beq.n	8002a56 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	b292      	uxth	r2, r2
 8002a34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	1c9a      	adds	r2, r3, #2
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a52:	2301      	movs	r3, #1
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a56:	f7fe f901 	bl	8000c5c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d807      	bhi.n	8002a76 <HAL_SPI_TransmitReceive+0x212>
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d003      	beq.n	8002a76 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002a74:	e0fb      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1a3      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x164>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d19d      	bne.n	80029c8 <HAL_SPI_TransmitReceive+0x164>
 8002a8c:	e0df      	b.n	8002c4e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0x23a>
 8002a96:	8a7b      	ldrh	r3, [r7, #18]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 80cb 	bne.w	8002c34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d912      	bls.n	8002ace <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	881a      	ldrh	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	1c9a      	adds	r2, r3, #2
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b02      	subs	r3, #2
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002acc:	e0b2      	b.n	8002c34 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	330c      	adds	r3, #12
 8002ad8:	7812      	ldrb	r2, [r2, #0]
 8002ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002af4:	e09e      	b.n	8002c34 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d134      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x30a>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d02f      	beq.n	8002b6e <HAL_SPI_TransmitReceive+0x30a>
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d12c      	bne.n	8002b6e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d912      	bls.n	8002b44 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2e:	1c9a      	adds	r2, r3, #2
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	3b02      	subs	r3, #2
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b42:	e012      	b.n	8002b6a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d148      	bne.n	8002c0e <HAL_SPI_TransmitReceive+0x3aa>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d042      	beq.n	8002c0e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d923      	bls.n	8002bdc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	b292      	uxth	r2, r2
 8002ba0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b02      	subs	r3, #2
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d81f      	bhi.n	8002c0a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	e016      	b.n	8002c0a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f103 020c 	add.w	r2, r3, #12
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	7812      	ldrb	r2, [r2, #0]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c0e:	f7fe f825 	bl	8000c5c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d803      	bhi.n	8002c26 <HAL_SPI_TransmitReceive+0x3c2>
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d102      	bne.n	8002c2c <HAL_SPI_TransmitReceive+0x3c8>
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002c32:	e01c      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f47f af5b 	bne.w	8002af6 <HAL_SPI_TransmitReceive+0x292>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f47f af54 	bne.w	8002af6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c4e:	69fa      	ldr	r2, [r7, #28]
 8002c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8f0 	bl	8002e38 <SPI_EndRxTxTransaction>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	661a      	str	r2, [r3, #96]	; 0x60
 8002c6a:	e000      	b.n	8002c6e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002c6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3728      	adds	r7, #40	; 0x28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	4613      	mov	r3, r2
 8002c98:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c9a:	e04c      	b.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d048      	beq.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002ca4:	f7fd ffda 	bl	8000c5c <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d902      	bls.n	8002cba <SPI_WaitFlagStateUntilTimeout+0x30>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d13d      	bne.n	8002d36 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cd2:	d111      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cdc:	d004      	beq.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce6:	d107      	bne.n	8002cf8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d00:	d10f      	bne.n	8002d22 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e00f      	b.n	8002d56 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1a3      	bne.n	8002c9c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002d6c:	e057      	b.n	8002e1e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d74:	d106      	bne.n	8002d84 <SPI_WaitFifoStateUntilTimeout+0x26>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d103      	bne.n	8002d84 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	330c      	adds	r3, #12
 8002d82:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8a:	d048      	beq.n	8002e1e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d8c:	f7fd ff66 	bl	8000c5c <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d902      	bls.n	8002da2 <SPI_WaitFifoStateUntilTimeout+0x44>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d13d      	bne.n	8002e1e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dba:	d111      	bne.n	8002de0 <SPI_WaitFifoStateUntilTimeout+0x82>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dc4:	d004      	beq.n	8002dd0 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dce:	d107      	bne.n	8002de0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de8:	d10f      	bne.n	8002e0a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e008      	b.n	8002e30 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4013      	ands	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d19f      	bne.n	8002d6e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af02      	add	r7, sp, #8
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7ff ff84 	bl	8002d5e <SPI_WaitFifoStateUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d007      	beq.n	8002e6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e027      	b.n	8002ebc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2200      	movs	r2, #0
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff ff07 	bl	8002c8a <SPI_WaitFlagStateUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e86:	f043 0220 	orr.w	r2, r3, #32
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e014      	b.n	8002ebc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff ff5d 	bl	8002d5e <SPI_WaitFifoStateUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eae:	f043 0220 	orr.w	r2, r3, #32
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e000      	b.n	8002ebc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e040      	b.n	8002f58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fe22 	bl	8003b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	; 0x24
 8002ef0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0201 	bic.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8c0 	bl	8003088 <UART_SetConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e022      	b.n	8002f58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d002      	beq.n	8002f20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 face 	bl	80034bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fb55 	bl	8003600 <UART_CheckIdleState>
 8002f56:	4603      	mov	r3, r0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b08a      	sub	sp, #40	; 0x28
 8002f64:	af02      	add	r7, sp, #8
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	f040 8081 	bne.w	800307c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_UART_Transmit+0x26>
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e079      	b.n	800307e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_UART_Transmit+0x38>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e072      	b.n	800307e <HAL_UART_Transmit+0x11e>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2221      	movs	r2, #33	; 0x21
 8002faa:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002fac:	f7fd fe56 	bl	8000c5c <HAL_GetTick>
 8002fb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fca:	d108      	bne.n	8002fde <HAL_UART_Transmit+0x7e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	e003      	b.n	8002fe6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fe6:	e02d      	b.n	8003044 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2180      	movs	r1, #128	; 0x80
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fb49 	bl	800368a <UART_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e03d      	b.n	800307e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10b      	bne.n	8003020 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	881a      	ldrh	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003014:	b292      	uxth	r2, r2
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	3302      	adds	r3, #2
 800301c:	61bb      	str	r3, [r7, #24]
 800301e:	e008      	b.n	8003032 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	b292      	uxth	r2, r2
 800302a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003038:	b29b      	uxth	r3, r3
 800303a:	3b01      	subs	r3, #1
 800303c:	b29a      	uxth	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1cb      	bne.n	8002fe8 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2200      	movs	r2, #0
 8003058:	2140      	movs	r1, #64	; 0x40
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fb15 	bl	800368a <UART_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e009      	b.n	800307e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	e000      	b.n	800307e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800307c:	2302      	movs	r3, #2
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003090:	2300      	movs	r3, #0
 8003092:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	431a      	orrs	r2, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80030ba:	f023 030c 	bic.w	r3, r3, #12
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	6939      	ldr	r1, [r7, #16]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	430a      	orrs	r2, r1
 8003100:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4aa9      	ldr	r2, [pc, #676]	; (80033ac <UART_SetConfig+0x324>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d121      	bne.n	8003150 <UART_SetConfig+0xc8>
 800310c:	4ba8      	ldr	r3, [pc, #672]	; (80033b0 <UART_SetConfig+0x328>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	2b03      	cmp	r3, #3
 8003116:	d817      	bhi.n	8003148 <UART_SetConfig+0xc0>
 8003118:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <UART_SetConfig+0x98>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003131 	.word	0x08003131
 8003124:	0800313d 	.word	0x0800313d
 8003128:	08003143 	.word	0x08003143
 800312c:	08003137 	.word	0x08003137
 8003130:	2301      	movs	r3, #1
 8003132:	77fb      	strb	r3, [r7, #31]
 8003134:	e0b2      	b.n	800329c <UART_SetConfig+0x214>
 8003136:	2302      	movs	r3, #2
 8003138:	77fb      	strb	r3, [r7, #31]
 800313a:	e0af      	b.n	800329c <UART_SetConfig+0x214>
 800313c:	2304      	movs	r3, #4
 800313e:	77fb      	strb	r3, [r7, #31]
 8003140:	e0ac      	b.n	800329c <UART_SetConfig+0x214>
 8003142:	2308      	movs	r3, #8
 8003144:	77fb      	strb	r3, [r7, #31]
 8003146:	e0a9      	b.n	800329c <UART_SetConfig+0x214>
 8003148:	2310      	movs	r3, #16
 800314a:	77fb      	strb	r3, [r7, #31]
 800314c:	bf00      	nop
 800314e:	e0a5      	b.n	800329c <UART_SetConfig+0x214>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a97      	ldr	r2, [pc, #604]	; (80033b4 <UART_SetConfig+0x32c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d123      	bne.n	80031a2 <UART_SetConfig+0x11a>
 800315a:	4b95      	ldr	r3, [pc, #596]	; (80033b0 <UART_SetConfig+0x328>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003166:	d012      	beq.n	800318e <UART_SetConfig+0x106>
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316c:	d802      	bhi.n	8003174 <UART_SetConfig+0xec>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <UART_SetConfig+0xfa>
 8003172:	e012      	b.n	800319a <UART_SetConfig+0x112>
 8003174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003178:	d00c      	beq.n	8003194 <UART_SetConfig+0x10c>
 800317a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800317e:	d003      	beq.n	8003188 <UART_SetConfig+0x100>
 8003180:	e00b      	b.n	800319a <UART_SetConfig+0x112>
 8003182:	2300      	movs	r3, #0
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e089      	b.n	800329c <UART_SetConfig+0x214>
 8003188:	2302      	movs	r3, #2
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e086      	b.n	800329c <UART_SetConfig+0x214>
 800318e:	2304      	movs	r3, #4
 8003190:	77fb      	strb	r3, [r7, #31]
 8003192:	e083      	b.n	800329c <UART_SetConfig+0x214>
 8003194:	2308      	movs	r3, #8
 8003196:	77fb      	strb	r3, [r7, #31]
 8003198:	e080      	b.n	800329c <UART_SetConfig+0x214>
 800319a:	2310      	movs	r3, #16
 800319c:	77fb      	strb	r3, [r7, #31]
 800319e:	bf00      	nop
 80031a0:	e07c      	b.n	800329c <UART_SetConfig+0x214>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a84      	ldr	r2, [pc, #528]	; (80033b8 <UART_SetConfig+0x330>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d123      	bne.n	80031f4 <UART_SetConfig+0x16c>
 80031ac:	4b80      	ldr	r3, [pc, #512]	; (80033b0 <UART_SetConfig+0x328>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80031b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031b8:	d012      	beq.n	80031e0 <UART_SetConfig+0x158>
 80031ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031be:	d802      	bhi.n	80031c6 <UART_SetConfig+0x13e>
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <UART_SetConfig+0x14c>
 80031c4:	e012      	b.n	80031ec <UART_SetConfig+0x164>
 80031c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031ca:	d00c      	beq.n	80031e6 <UART_SetConfig+0x15e>
 80031cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80031d0:	d003      	beq.n	80031da <UART_SetConfig+0x152>
 80031d2:	e00b      	b.n	80031ec <UART_SetConfig+0x164>
 80031d4:	2300      	movs	r3, #0
 80031d6:	77fb      	strb	r3, [r7, #31]
 80031d8:	e060      	b.n	800329c <UART_SetConfig+0x214>
 80031da:	2302      	movs	r3, #2
 80031dc:	77fb      	strb	r3, [r7, #31]
 80031de:	e05d      	b.n	800329c <UART_SetConfig+0x214>
 80031e0:	2304      	movs	r3, #4
 80031e2:	77fb      	strb	r3, [r7, #31]
 80031e4:	e05a      	b.n	800329c <UART_SetConfig+0x214>
 80031e6:	2308      	movs	r3, #8
 80031e8:	77fb      	strb	r3, [r7, #31]
 80031ea:	e057      	b.n	800329c <UART_SetConfig+0x214>
 80031ec:	2310      	movs	r3, #16
 80031ee:	77fb      	strb	r3, [r7, #31]
 80031f0:	bf00      	nop
 80031f2:	e053      	b.n	800329c <UART_SetConfig+0x214>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a70      	ldr	r2, [pc, #448]	; (80033bc <UART_SetConfig+0x334>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d123      	bne.n	8003246 <UART_SetConfig+0x1be>
 80031fe:	4b6c      	ldr	r3, [pc, #432]	; (80033b0 <UART_SetConfig+0x328>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800320a:	d012      	beq.n	8003232 <UART_SetConfig+0x1aa>
 800320c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003210:	d802      	bhi.n	8003218 <UART_SetConfig+0x190>
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <UART_SetConfig+0x19e>
 8003216:	e012      	b.n	800323e <UART_SetConfig+0x1b6>
 8003218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800321c:	d00c      	beq.n	8003238 <UART_SetConfig+0x1b0>
 800321e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003222:	d003      	beq.n	800322c <UART_SetConfig+0x1a4>
 8003224:	e00b      	b.n	800323e <UART_SetConfig+0x1b6>
 8003226:	2300      	movs	r3, #0
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e037      	b.n	800329c <UART_SetConfig+0x214>
 800322c:	2302      	movs	r3, #2
 800322e:	77fb      	strb	r3, [r7, #31]
 8003230:	e034      	b.n	800329c <UART_SetConfig+0x214>
 8003232:	2304      	movs	r3, #4
 8003234:	77fb      	strb	r3, [r7, #31]
 8003236:	e031      	b.n	800329c <UART_SetConfig+0x214>
 8003238:	2308      	movs	r3, #8
 800323a:	77fb      	strb	r3, [r7, #31]
 800323c:	e02e      	b.n	800329c <UART_SetConfig+0x214>
 800323e:	2310      	movs	r3, #16
 8003240:	77fb      	strb	r3, [r7, #31]
 8003242:	bf00      	nop
 8003244:	e02a      	b.n	800329c <UART_SetConfig+0x214>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a5d      	ldr	r2, [pc, #372]	; (80033c0 <UART_SetConfig+0x338>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d123      	bne.n	8003298 <UART_SetConfig+0x210>
 8003250:	4b57      	ldr	r3, [pc, #348]	; (80033b0 <UART_SetConfig+0x328>)
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003258:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800325c:	d012      	beq.n	8003284 <UART_SetConfig+0x1fc>
 800325e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003262:	d802      	bhi.n	800326a <UART_SetConfig+0x1e2>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <UART_SetConfig+0x1f0>
 8003268:	e012      	b.n	8003290 <UART_SetConfig+0x208>
 800326a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800326e:	d00c      	beq.n	800328a <UART_SetConfig+0x202>
 8003270:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003274:	d003      	beq.n	800327e <UART_SetConfig+0x1f6>
 8003276:	e00b      	b.n	8003290 <UART_SetConfig+0x208>
 8003278:	2300      	movs	r3, #0
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	e00e      	b.n	800329c <UART_SetConfig+0x214>
 800327e:	2302      	movs	r3, #2
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	e00b      	b.n	800329c <UART_SetConfig+0x214>
 8003284:	2304      	movs	r3, #4
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e008      	b.n	800329c <UART_SetConfig+0x214>
 800328a:	2308      	movs	r3, #8
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	e005      	b.n	800329c <UART_SetConfig+0x214>
 8003290:	2310      	movs	r3, #16
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	bf00      	nop
 8003296:	e001      	b.n	800329c <UART_SetConfig+0x214>
 8003298:	2310      	movs	r3, #16
 800329a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032a4:	f040 808e 	bne.w	80033c4 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80032a8:	7ffb      	ldrb	r3, [r7, #31]
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d85e      	bhi.n	800336c <UART_SetConfig+0x2e4>
 80032ae:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <UART_SetConfig+0x22c>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	080032d9 	.word	0x080032d9
 80032b8:	080032f9 	.word	0x080032f9
 80032bc:	08003319 	.word	0x08003319
 80032c0:	0800336d 	.word	0x0800336d
 80032c4:	08003335 	.word	0x08003335
 80032c8:	0800336d 	.word	0x0800336d
 80032cc:	0800336d 	.word	0x0800336d
 80032d0:	0800336d 	.word	0x0800336d
 80032d4:	08003355 	.word	0x08003355
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d8:	f7ff f83e 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 80032dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	005a      	lsls	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	441a      	add	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	61bb      	str	r3, [r7, #24]
        break;
 80032f6:	e03c      	b.n	8003372 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f8:	f7ff f850 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 80032fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	005a      	lsls	r2, r3, #1
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	085b      	lsrs	r3, r3, #1
 8003308:	441a      	add	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	b29b      	uxth	r3, r3
 8003314:	61bb      	str	r3, [r7, #24]
        break;
 8003316:	e02c      	b.n	8003372 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003322:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6852      	ldr	r2, [r2, #4]
 800332a:	fbb3 f3f2 	udiv	r3, r3, r2
 800332e:	b29b      	uxth	r3, r3
 8003330:	61bb      	str	r3, [r7, #24]
        break;
 8003332:	e01e      	b.n	8003372 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003334:	f7fe ff9a 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8003338:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	005a      	lsls	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	441a      	add	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	b29b      	uxth	r3, r3
 8003350:	61bb      	str	r3, [r7, #24]
        break;
 8003352:	e00e      	b.n	8003372 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	fbb2 f3f3 	udiv	r3, r2, r3
 8003366:	b29b      	uxth	r3, r3
 8003368:	61bb      	str	r3, [r7, #24]
        break;
 800336a:	e002      	b.n	8003372 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	75fb      	strb	r3, [r7, #23]
        break;
 8003370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b0f      	cmp	r3, #15
 8003376:	d916      	bls.n	80033a6 <UART_SetConfig+0x31e>
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337e:	d212      	bcs.n	80033a6 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	b29b      	uxth	r3, r3
 8003384:	f023 030f 	bic.w	r3, r3, #15
 8003388:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	b29b      	uxth	r3, r3
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	b29a      	uxth	r2, r3
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	4313      	orrs	r3, r2
 800339a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	897a      	ldrh	r2, [r7, #10]
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	e07e      	b.n	80034a4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
 80033aa:	e07b      	b.n	80034a4 <UART_SetConfig+0x41c>
 80033ac:	40013800 	.word	0x40013800
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40004400 	.word	0x40004400
 80033b8:	40004800 	.word	0x40004800
 80033bc:	40004c00 	.word	0x40004c00
 80033c0:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 80033c4:	7ffb      	ldrb	r3, [r7, #31]
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d85b      	bhi.n	8003482 <UART_SetConfig+0x3fa>
 80033ca:	a201      	add	r2, pc, #4	; (adr r2, 80033d0 <UART_SetConfig+0x348>)
 80033cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033d0:	080033f5 	.word	0x080033f5
 80033d4:	08003413 	.word	0x08003413
 80033d8:	08003431 	.word	0x08003431
 80033dc:	08003483 	.word	0x08003483
 80033e0:	0800344d 	.word	0x0800344d
 80033e4:	08003483 	.word	0x08003483
 80033e8:	08003483 	.word	0x08003483
 80033ec:	08003483 	.word	0x08003483
 80033f0:	0800346b 	.word	0x0800346b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033f4:	f7fe ffb0 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 80033f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	085a      	lsrs	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	441a      	add	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	b29b      	uxth	r3, r3
 800340e:	61bb      	str	r3, [r7, #24]
        break;
 8003410:	e03a      	b.n	8003488 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003412:	f7fe ffc3 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 8003416:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	085a      	lsrs	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	441a      	add	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	b29b      	uxth	r3, r3
 800342c:	61bb      	str	r3, [r7, #24]
        break;
 800342e:	e02b      	b.n	8003488 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800343a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6852      	ldr	r2, [r2, #4]
 8003442:	fbb3 f3f2 	udiv	r3, r3, r2
 8003446:	b29b      	uxth	r3, r3
 8003448:	61bb      	str	r3, [r7, #24]
        break;
 800344a:	e01d      	b.n	8003488 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800344c:	f7fe ff0e 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8003450:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	085a      	lsrs	r2, r3, #1
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	441a      	add	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	b29b      	uxth	r3, r3
 8003466:	61bb      	str	r3, [r7, #24]
        break;
 8003468:	e00e      	b.n	8003488 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	085b      	lsrs	r3, r3, #1
 8003470:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	b29b      	uxth	r3, r3
 800347e:	61bb      	str	r3, [r7, #24]
        break;
 8003480:	e002      	b.n	8003488 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	75fb      	strb	r3, [r7, #23]
        break;
 8003486:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b0f      	cmp	r3, #15
 800348c:	d908      	bls.n	80034a0 <UART_SetConfig+0x418>
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d204      	bcs.n	80034a0 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	e001      	b.n	80034a4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3720      	adds	r7, #32
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop

080034bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01a      	beq.n	80035d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ba:	d10a      	bne.n	80035d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800360e:	f7fd fb25 	bl	8000c5c <HAL_GetTick>
 8003612:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d10e      	bne.n	8003640 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003622:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f82a 	bl	800368a <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e020      	b.n	8003682 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d10e      	bne.n	800366c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800364e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 f814 	bl	800368a <UART_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e00a      	b.n	8003682 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369a:	e05d      	b.n	8003758 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d059      	beq.n	8003758 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	f7fd fada 	bl	8000c5c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <UART_WaitOnFlagUntilTimeout+0x30>
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d11b      	bne.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2220      	movs	r2, #32
 80036de:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e042      	b.n	8003778 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d02b      	beq.n	8003758 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800370a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800370e:	d123      	bne.n	8003758 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003718:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003728:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e00f      	b.n	8003778 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4013      	ands	r3, r2
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	429a      	cmp	r2, r3
 8003774:	d092      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t i=0;
 8003786:	2300      	movs	r3, #0
 8003788:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800378a:	f7fd fa0d 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800378e:	f000 f84f 	bl	8003830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003792:	f000 f915 	bl	80039c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003796:	f000 f8a5 	bl	80038e4 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800379a:	f000 f8e1 	bl	8003960 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  sprintf(uartBuf, "START Counter: %d\r\n", i);
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	461a      	mov	r2, r3
 80037a2:	491d      	ldr	r1, [pc, #116]	; (8003818 <main+0x98>)
 80037a4:	481d      	ldr	r0, [pc, #116]	; (800381c <main+0x9c>)
 80037a6:	f000 ff2f 	bl	8004608 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 80037aa:	481c      	ldr	r0, [pc, #112]	; (800381c <main+0x9c>)
 80037ac:	f7fc fd10 	bl	80001d0 <strlen>
 80037b0:	4603      	mov	r3, r0
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	4918      	ldr	r1, [pc, #96]	; (800381c <main+0x9c>)
 80037ba:	4819      	ldr	r0, [pc, #100]	; (8003820 <main+0xa0>)
 80037bc:	f7ff fbd0 	bl	8002f60 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    i++;
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	3301      	adds	r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	71fb      	strb	r3, [r7, #7]
	    if(i>9999) i=0;
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80037c8:	2200      	movs	r2, #0
 80037ca:	2110      	movs	r1, #16
 80037cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037d0:	f7fd fcb0 	bl	8001134 <HAL_GPIO_WritePin>
	    HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &i, (uint8_t *)RxBuf, 1, 5000);
 80037d4:	1df9      	adds	r1, r7, #7
 80037d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	2301      	movs	r3, #1
 80037de:	4a11      	ldr	r2, [pc, #68]	; (8003824 <main+0xa4>)
 80037e0:	4811      	ldr	r0, [pc, #68]	; (8003828 <main+0xa8>)
 80037e2:	f7ff f83f 	bl	8002864 <HAL_SPI_TransmitReceive>
	    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 , GPIO_PIN_SET);
 80037e6:	2201      	movs	r2, #1
 80037e8:	2110      	movs	r1, #16
 80037ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ee:	f7fd fca1 	bl	8001134 <HAL_GPIO_WritePin>
	    sprintf(uartBuf, "Counter: %d\r\n", RxBuf[0]);
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <main+0xa4>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	490c      	ldr	r1, [pc, #48]	; (800382c <main+0xac>)
 80037fa:	4808      	ldr	r0, [pc, #32]	; (800381c <main+0x9c>)
 80037fc:	f000 ff04 	bl	8004608 <siprintf>
	    HAL_UART_Transmit(&huart1, (uint8_t*) uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
 8003800:	4806      	ldr	r0, [pc, #24]	; (800381c <main+0x9c>)
 8003802:	f7fc fce5 	bl	80001d0 <strlen>
 8003806:	4603      	mov	r3, r0
 8003808:	b29a      	uxth	r2, r3
 800380a:	f04f 33ff 	mov.w	r3, #4294967295
 800380e:	4903      	ldr	r1, [pc, #12]	; (800381c <main+0x9c>)
 8003810:	4803      	ldr	r0, [pc, #12]	; (8003820 <main+0xa0>)
 8003812:	f7ff fba5 	bl	8002f60 <HAL_UART_Transmit>
	    i++;
 8003816:	e7d3      	b.n	80037c0 <main+0x40>
 8003818:	08005de0 	.word	0x08005de0
 800381c:	2000028c 	.word	0x2000028c
 8003820:	2000020c 	.word	0x2000020c
 8003824:	200001f8 	.word	0x200001f8
 8003828:	200002a0 	.word	0x200002a0
 800382c:	08005df4 	.word	0x08005df4

08003830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b09e      	sub	sp, #120	; 0x78
 8003834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003836:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800383a:	2228      	movs	r2, #40	; 0x28
 800383c:	2100      	movs	r1, #0
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fa7e 	bl	8003d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003844:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003854:	463b      	mov	r3, r7
 8003856:	223c      	movs	r2, #60	; 0x3c
 8003858:	2100      	movs	r1, #0
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fa70 	bl	8003d40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003860:	2301      	movs	r3, #1
 8003862:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003868:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800386a:	2300      	movs	r3, #0
 800386c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800386e:	2301      	movs	r3, #1
 8003870:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003872:	2302      	movs	r3, #2
 8003874:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800387a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800387c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003880:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd fc6c 	bl	8001164 <HAL_RCC_OscConfig>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003892:	f000 f8df 	bl	8003a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003896:	230f      	movs	r3, #15
 8003898:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800389a:	2302      	movs	r3, #2
 800389c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800389e:	2300      	movs	r3, #0
 80038a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038a8:	2300      	movs	r3, #0
 80038aa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038b0:	2102      	movs	r1, #2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fb5e 	bl	8001f74 <HAL_RCC_ClockConfig>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80038be:	f000 f8c9 	bl	8003a54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80038c2:	2301      	movs	r3, #1
 80038c4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ca:	463b      	mov	r3, r7
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fe fd87 	bl	80023e0 <HAL_RCCEx_PeriphCLKConfig>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <SystemClock_Config+0xac>
  {
    Error_Handler();
 80038d8:	f000 f8bc 	bl	8003a54 <Error_Handler>
  }
}
 80038dc:	bf00      	nop
 80038de:	3778      	adds	r7, #120	; 0x78
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <MX_SPI1_Init+0x74>)
 80038ea:	4a1c      	ldr	r2, [pc, #112]	; (800395c <MX_SPI1_Init+0x78>)
 80038ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038ee:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <MX_SPI1_Init+0x74>)
 80038f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038f6:	4b18      	ldr	r3, [pc, #96]	; (8003958 <MX_SPI1_Init+0x74>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80038fc:	4b16      	ldr	r3, [pc, #88]	; (8003958 <MX_SPI1_Init+0x74>)
 80038fe:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8003902:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003904:	4b14      	ldr	r3, [pc, #80]	; (8003958 <MX_SPI1_Init+0x74>)
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800390a:	4b13      	ldr	r3, [pc, #76]	; (8003958 <MX_SPI1_Init+0x74>)
 800390c:	2200      	movs	r2, #0
 800390e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <MX_SPI1_Init+0x74>)
 8003912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003916:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <MX_SPI1_Init+0x74>)
 800391a:	2218      	movs	r2, #24
 800391c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800391e:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <MX_SPI1_Init+0x74>)
 8003920:	2200      	movs	r2, #0
 8003922:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <MX_SPI1_Init+0x74>)
 8003926:	2200      	movs	r2, #0
 8003928:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800392a:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <MX_SPI1_Init+0x74>)
 800392c:	2200      	movs	r2, #0
 800392e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <MX_SPI1_Init+0x74>)
 8003932:	2207      	movs	r2, #7
 8003934:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003936:	4b08      	ldr	r3, [pc, #32]	; (8003958 <MX_SPI1_Init+0x74>)
 8003938:	2200      	movs	r2, #0
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <MX_SPI1_Init+0x74>)
 800393e:	2208      	movs	r2, #8
 8003940:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003942:	4805      	ldr	r0, [pc, #20]	; (8003958 <MX_SPI1_Init+0x74>)
 8003944:	f7fe fefc 	bl	8002740 <HAL_SPI_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800394e:	f000 f881 	bl	8003a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200002a0 	.word	0x200002a0
 800395c:	40013000 	.word	0x40013000

08003960 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003964:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003966:	4a15      	ldr	r2, [pc, #84]	; (80039bc <MX_USART1_UART_Init+0x5c>)
 8003968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 800396c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003972:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003974:	2200      	movs	r2, #0
 8003976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 800397a:	2200      	movs	r2, #0
 800397c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800397e:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003980:	2200      	movs	r2, #0
 8003982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003986:	220c      	movs	r2, #12
 8003988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800398a:	4b0b      	ldr	r3, [pc, #44]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 800398c:	2200      	movs	r2, #0
 800398e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003992:	2200      	movs	r2, #0
 8003994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003996:	4b08      	ldr	r3, [pc, #32]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 8003998:	2200      	movs	r2, #0
 800399a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 800399e:	2200      	movs	r2, #0
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039a2:	4805      	ldr	r0, [pc, #20]	; (80039b8 <MX_USART1_UART_Init+0x58>)
 80039a4:	f7ff fa8e 	bl	8002ec4 <HAL_UART_Init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80039ae:	f000 f851 	bl	8003a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	2000020c 	.word	0x2000020c
 80039bc:	40013800 	.word	0x40013800

080039c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039c6:	f107 030c 	add.w	r3, r7, #12
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	609a      	str	r2, [r3, #8]
 80039d2:	60da      	str	r2, [r3, #12]
 80039d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039d6:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <MX_GPIO_Init+0x90>)
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <MX_GPIO_Init+0x90>)
 80039dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039e0:	6153      	str	r3, [r2, #20]
 80039e2:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <MX_GPIO_Init+0x90>)
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ea:	60bb      	str	r3, [r7, #8]
 80039ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ee:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <MX_GPIO_Init+0x90>)
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	4a17      	ldr	r2, [pc, #92]	; (8003a50 <MX_GPIO_Init+0x90>)
 80039f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f8:	6153      	str	r3, [r2, #20]
 80039fa:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <MX_GPIO_Init+0x90>)
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a06:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <MX_GPIO_Init+0x90>)
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4a11      	ldr	r2, [pc, #68]	; (8003a50 <MX_GPIO_Init+0x90>)
 8003a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a10:	6153      	str	r3, [r2, #20]
 8003a12:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <MX_GPIO_Init+0x90>)
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2110      	movs	r1, #16
 8003a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a26:	f7fd fb85 	bl	8001134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003a2a:	2310      	movs	r3, #16
 8003a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3a:	f107 030c 	add.w	r3, r7, #12
 8003a3e:	4619      	mov	r1, r3
 8003a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a44:	f7fd f9fc 	bl	8000e40 <HAL_GPIO_Init>

}
 8003a48:	bf00      	nop
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000

08003a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6193      	str	r3, [r2, #24]
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	4a08      	ldr	r2, [pc, #32]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	61d3      	str	r3, [r2, #28]
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_MspInit+0x44>)
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	40021000 	.word	0x40021000

08003aac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a17      	ldr	r2, [pc, #92]	; (8003b28 <HAL_SPI_MspInit+0x7c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d128      	bne.n	8003b20 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ace:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <HAL_SPI_MspInit+0x80>)
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_SPI_MspInit+0x80>)
 8003ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ad8:	6193      	str	r3, [r2, #24]
 8003ada:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <HAL_SPI_MspInit+0x80>)
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae6:	4b11      	ldr	r3, [pc, #68]	; (8003b2c <HAL_SPI_MspInit+0x80>)
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	4a10      	ldr	r2, [pc, #64]	; (8003b2c <HAL_SPI_MspInit+0x80>)
 8003aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af0:	6153      	str	r3, [r2, #20]
 8003af2:	4b0e      	ldr	r3, [pc, #56]	; (8003b2c <HAL_SPI_MspInit+0x80>)
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003afe:	23e0      	movs	r3, #224	; 0xe0
 8003b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b02:	2302      	movs	r3, #2
 8003b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003b0e:	2305      	movs	r3, #5
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b12:	f107 0314 	add.w	r3, r7, #20
 8003b16:	4619      	mov	r1, r3
 8003b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b1c:	f7fd f990 	bl	8000e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b20:	bf00      	nop
 8003b22:	3728      	adds	r7, #40	; 0x28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40013000 	.word	0x40013000
 8003b2c:	40021000 	.word	0x40021000

08003b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08a      	sub	sp, #40	; 0x28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 0314 	add.w	r3, r7, #20
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_UART_MspInit+0x7c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d127      	bne.n	8003ba2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b52:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <HAL_UART_MspInit+0x80>)
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <HAL_UART_MspInit+0x80>)
 8003b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b5c:	6193      	str	r3, [r2, #24]
 8003b5e:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <HAL_UART_MspInit+0x80>)
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_UART_MspInit+0x80>)
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	4a10      	ldr	r2, [pc, #64]	; (8003bb0 <HAL_UART_MspInit+0x80>)
 8003b70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b74:	6153      	str	r3, [r2, #20]
 8003b76:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <HAL_UART_MspInit+0x80>)
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003b82:	2330      	movs	r3, #48	; 0x30
 8003b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b86:	2302      	movs	r3, #2
 8003b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b92:	2307      	movs	r3, #7
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b96:	f107 0314 	add.w	r3, r7, #20
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <HAL_UART_MspInit+0x84>)
 8003b9e:	f7fd f94f 	bl	8000e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ba2:	bf00      	nop
 8003ba4:	3728      	adds	r7, #40	; 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40013800 	.word	0x40013800
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	48000800 	.word	0x48000800

08003bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003bbc:	bf00      	nop
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bca:	e7fe      	b.n	8003bca <HardFault_Handler+0x4>

08003bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bd0:	e7fe      	b.n	8003bd0 <MemManage_Handler+0x4>

08003bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bd6:	e7fe      	b.n	8003bd6 <BusFault_Handler+0x4>

08003bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bdc:	e7fe      	b.n	8003bdc <UsageFault_Handler+0x4>

08003bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c0c:	f7fd f812 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <_sbrk>:
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <_sbrk+0x50>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d102      	bne.n	8003c2a <_sbrk+0x16>
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <_sbrk+0x50>)
 8003c26:	4a10      	ldr	r2, [pc, #64]	; (8003c68 <_sbrk+0x54>)
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <_sbrk+0x50>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <_sbrk+0x50>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	466a      	mov	r2, sp
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d907      	bls.n	8003c4e <_sbrk+0x3a>
 8003c3e:	f000 f855 	bl	8003cec <__errno>
 8003c42:	4602      	mov	r2, r0
 8003c44:	230c      	movs	r3, #12
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4c:	e006      	b.n	8003c5c <_sbrk+0x48>
 8003c4e:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <_sbrk+0x50>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4413      	add	r3, r2
 8003c56:	4a03      	ldr	r2, [pc, #12]	; (8003c64 <_sbrk+0x50>)
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	200001fc 	.word	0x200001fc
 8003c68:	20000308 	.word	0x20000308

08003c6c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c70:	4b08      	ldr	r3, [pc, #32]	; (8003c94 <SystemInit+0x28>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	4a07      	ldr	r2, [pc, #28]	; (8003c94 <SystemInit+0x28>)
 8003c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <SystemInit+0x28>)
 8003c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c86:	609a      	str	r2, [r3, #8]
#endif
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <Reset_Handler>:
 8003c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cd0 <LoopForever+0x2>
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	e003      	b.n	8003ca8 <LoopCopyDataInit>

08003ca0 <CopyDataInit>:
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <LoopForever+0x6>)
 8003ca2:	585b      	ldr	r3, [r3, r1]
 8003ca4:	5043      	str	r3, [r0, r1]
 8003ca6:	3104      	adds	r1, #4

08003ca8 <LoopCopyDataInit>:
 8003ca8:	480b      	ldr	r0, [pc, #44]	; (8003cd8 <LoopForever+0xa>)
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <LoopForever+0xe>)
 8003cac:	1842      	adds	r2, r0, r1
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d3f6      	bcc.n	8003ca0 <CopyDataInit>
 8003cb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ce0 <LoopForever+0x12>)
 8003cb4:	e002      	b.n	8003cbc <LoopFillZerobss>

08003cb6 <FillZerobss>:
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f842 3b04 	str.w	r3, [r2], #4

08003cbc <LoopFillZerobss>:
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <LoopForever+0x16>)
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d3f9      	bcc.n	8003cb6 <FillZerobss>
 8003cc2:	f7ff ffd3 	bl	8003c6c <SystemInit>
 8003cc6:	f000 f817 	bl	8003cf8 <__libc_init_array>
 8003cca:	f7ff fd59 	bl	8003780 <main>

08003cce <LoopForever>:
 8003cce:	e7fe      	b.n	8003cce <LoopForever>
 8003cd0:	2000a000 	.word	0x2000a000
 8003cd4:	080060a0 	.word	0x080060a0
 8003cd8:	20000000 	.word	0x20000000
 8003cdc:	200001dc 	.word	0x200001dc
 8003ce0:	200001dc 	.word	0x200001dc
 8003ce4:	20000308 	.word	0x20000308

08003ce8 <ADC1_2_IRQHandler>:
 8003ce8:	e7fe      	b.n	8003ce8 <ADC1_2_IRQHandler>
	...

08003cec <__errno>:
 8003cec:	4b01      	ldr	r3, [pc, #4]	; (8003cf4 <__errno+0x8>)
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	2000000c 	.word	0x2000000c

08003cf8 <__libc_init_array>:
 8003cf8:	b570      	push	{r4, r5, r6, lr}
 8003cfa:	4e0d      	ldr	r6, [pc, #52]	; (8003d30 <__libc_init_array+0x38>)
 8003cfc:	4c0d      	ldr	r4, [pc, #52]	; (8003d34 <__libc_init_array+0x3c>)
 8003cfe:	1ba4      	subs	r4, r4, r6
 8003d00:	10a4      	asrs	r4, r4, #2
 8003d02:	2500      	movs	r5, #0
 8003d04:	42a5      	cmp	r5, r4
 8003d06:	d109      	bne.n	8003d1c <__libc_init_array+0x24>
 8003d08:	4e0b      	ldr	r6, [pc, #44]	; (8003d38 <__libc_init_array+0x40>)
 8003d0a:	4c0c      	ldr	r4, [pc, #48]	; (8003d3c <__libc_init_array+0x44>)
 8003d0c:	f002 f85c 	bl	8005dc8 <_init>
 8003d10:	1ba4      	subs	r4, r4, r6
 8003d12:	10a4      	asrs	r4, r4, #2
 8003d14:	2500      	movs	r5, #0
 8003d16:	42a5      	cmp	r5, r4
 8003d18:	d105      	bne.n	8003d26 <__libc_init_array+0x2e>
 8003d1a:	bd70      	pop	{r4, r5, r6, pc}
 8003d1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d20:	4798      	blx	r3
 8003d22:	3501      	adds	r5, #1
 8003d24:	e7ee      	b.n	8003d04 <__libc_init_array+0xc>
 8003d26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d2a:	4798      	blx	r3
 8003d2c:	3501      	adds	r5, #1
 8003d2e:	e7f2      	b.n	8003d16 <__libc_init_array+0x1e>
 8003d30:	08006098 	.word	0x08006098
 8003d34:	08006098 	.word	0x08006098
 8003d38:	08006098 	.word	0x08006098
 8003d3c:	0800609c 	.word	0x0800609c

08003d40 <memset>:
 8003d40:	4402      	add	r2, r0
 8003d42:	4603      	mov	r3, r0
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d100      	bne.n	8003d4a <memset+0xa>
 8003d48:	4770      	bx	lr
 8003d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4e:	e7f9      	b.n	8003d44 <memset+0x4>

08003d50 <__cvt>:
 8003d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d54:	ec55 4b10 	vmov	r4, r5, d0
 8003d58:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003d5a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d5e:	2d00      	cmp	r5, #0
 8003d60:	460e      	mov	r6, r1
 8003d62:	4691      	mov	r9, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	bfb8      	it	lt
 8003d68:	4622      	movlt	r2, r4
 8003d6a:	462b      	mov	r3, r5
 8003d6c:	f027 0720 	bic.w	r7, r7, #32
 8003d70:	bfbb      	ittet	lt
 8003d72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d76:	461d      	movlt	r5, r3
 8003d78:	2300      	movge	r3, #0
 8003d7a:	232d      	movlt	r3, #45	; 0x2d
 8003d7c:	bfb8      	it	lt
 8003d7e:	4614      	movlt	r4, r2
 8003d80:	2f46      	cmp	r7, #70	; 0x46
 8003d82:	700b      	strb	r3, [r1, #0]
 8003d84:	d004      	beq.n	8003d90 <__cvt+0x40>
 8003d86:	2f45      	cmp	r7, #69	; 0x45
 8003d88:	d100      	bne.n	8003d8c <__cvt+0x3c>
 8003d8a:	3601      	adds	r6, #1
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	e000      	b.n	8003d92 <__cvt+0x42>
 8003d90:	2103      	movs	r1, #3
 8003d92:	ab03      	add	r3, sp, #12
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	ab02      	add	r3, sp, #8
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	4632      	mov	r2, r6
 8003d9c:	4653      	mov	r3, sl
 8003d9e:	ec45 4b10 	vmov	d0, r4, r5
 8003da2:	f000 fcdd 	bl	8004760 <_dtoa_r>
 8003da6:	2f47      	cmp	r7, #71	; 0x47
 8003da8:	4680      	mov	r8, r0
 8003daa:	d102      	bne.n	8003db2 <__cvt+0x62>
 8003dac:	f019 0f01 	tst.w	r9, #1
 8003db0:	d026      	beq.n	8003e00 <__cvt+0xb0>
 8003db2:	2f46      	cmp	r7, #70	; 0x46
 8003db4:	eb08 0906 	add.w	r9, r8, r6
 8003db8:	d111      	bne.n	8003dde <__cvt+0x8e>
 8003dba:	f898 3000 	ldrb.w	r3, [r8]
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	d10a      	bne.n	8003dd8 <__cvt+0x88>
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	4629      	mov	r1, r5
 8003dca:	f7fc fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8003dce:	b918      	cbnz	r0, 8003dd8 <__cvt+0x88>
 8003dd0:	f1c6 0601 	rsb	r6, r6, #1
 8003dd4:	f8ca 6000 	str.w	r6, [sl]
 8003dd8:	f8da 3000 	ldr.w	r3, [sl]
 8003ddc:	4499      	add	r9, r3
 8003dde:	2200      	movs	r2, #0
 8003de0:	2300      	movs	r3, #0
 8003de2:	4620      	mov	r0, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	f7fc fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8003dea:	b938      	cbnz	r0, 8003dfc <__cvt+0xac>
 8003dec:	2230      	movs	r2, #48	; 0x30
 8003dee:	9b03      	ldr	r3, [sp, #12]
 8003df0:	454b      	cmp	r3, r9
 8003df2:	d205      	bcs.n	8003e00 <__cvt+0xb0>
 8003df4:	1c59      	adds	r1, r3, #1
 8003df6:	9103      	str	r1, [sp, #12]
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	e7f8      	b.n	8003dee <__cvt+0x9e>
 8003dfc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e04:	eba3 0308 	sub.w	r3, r3, r8
 8003e08:	4640      	mov	r0, r8
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	b004      	add	sp, #16
 8003e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003e12 <__exponent>:
 8003e12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e14:	2900      	cmp	r1, #0
 8003e16:	4604      	mov	r4, r0
 8003e18:	bfba      	itte	lt
 8003e1a:	4249      	neglt	r1, r1
 8003e1c:	232d      	movlt	r3, #45	; 0x2d
 8003e1e:	232b      	movge	r3, #43	; 0x2b
 8003e20:	2909      	cmp	r1, #9
 8003e22:	f804 2b02 	strb.w	r2, [r4], #2
 8003e26:	7043      	strb	r3, [r0, #1]
 8003e28:	dd20      	ble.n	8003e6c <__exponent+0x5a>
 8003e2a:	f10d 0307 	add.w	r3, sp, #7
 8003e2e:	461f      	mov	r7, r3
 8003e30:	260a      	movs	r6, #10
 8003e32:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e36:	fb06 1115 	mls	r1, r6, r5, r1
 8003e3a:	3130      	adds	r1, #48	; 0x30
 8003e3c:	2d09      	cmp	r5, #9
 8003e3e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e42:	f103 32ff 	add.w	r2, r3, #4294967295
 8003e46:	4629      	mov	r1, r5
 8003e48:	dc09      	bgt.n	8003e5e <__exponent+0x4c>
 8003e4a:	3130      	adds	r1, #48	; 0x30
 8003e4c:	3b02      	subs	r3, #2
 8003e4e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e52:	42bb      	cmp	r3, r7
 8003e54:	4622      	mov	r2, r4
 8003e56:	d304      	bcc.n	8003e62 <__exponent+0x50>
 8003e58:	1a10      	subs	r0, r2, r0
 8003e5a:	b003      	add	sp, #12
 8003e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e5e:	4613      	mov	r3, r2
 8003e60:	e7e7      	b.n	8003e32 <__exponent+0x20>
 8003e62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e66:	f804 2b01 	strb.w	r2, [r4], #1
 8003e6a:	e7f2      	b.n	8003e52 <__exponent+0x40>
 8003e6c:	2330      	movs	r3, #48	; 0x30
 8003e6e:	4419      	add	r1, r3
 8003e70:	7083      	strb	r3, [r0, #2]
 8003e72:	1d02      	adds	r2, r0, #4
 8003e74:	70c1      	strb	r1, [r0, #3]
 8003e76:	e7ef      	b.n	8003e58 <__exponent+0x46>

08003e78 <_printf_float>:
 8003e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7c:	b08d      	sub	sp, #52	; 0x34
 8003e7e:	460c      	mov	r4, r1
 8003e80:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003e84:	4616      	mov	r6, r2
 8003e86:	461f      	mov	r7, r3
 8003e88:	4605      	mov	r5, r0
 8003e8a:	f001 fa21 	bl	80052d0 <_localeconv_r>
 8003e8e:	6803      	ldr	r3, [r0, #0]
 8003e90:	9304      	str	r3, [sp, #16]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc f99c 	bl	80001d0 <strlen>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	930a      	str	r3, [sp, #40]	; 0x28
 8003e9c:	f8d8 3000 	ldr.w	r3, [r8]
 8003ea0:	9005      	str	r0, [sp, #20]
 8003ea2:	3307      	adds	r3, #7
 8003ea4:	f023 0307 	bic.w	r3, r3, #7
 8003ea8:	f103 0208 	add.w	r2, r3, #8
 8003eac:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003eb0:	f8d4 b000 	ldr.w	fp, [r4]
 8003eb4:	f8c8 2000 	str.w	r2, [r8]
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ec0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ec4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ec8:	9307      	str	r3, [sp, #28]
 8003eca:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ece:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed2:	4ba7      	ldr	r3, [pc, #668]	; (8004170 <_printf_float+0x2f8>)
 8003ed4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ed8:	f7fc fe28 	bl	8000b2c <__aeabi_dcmpun>
 8003edc:	bb70      	cbnz	r0, 8003f3c <_printf_float+0xc4>
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	4ba3      	ldr	r3, [pc, #652]	; (8004170 <_printf_float+0x2f8>)
 8003ee4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ee8:	f7fc fe02 	bl	8000af0 <__aeabi_dcmple>
 8003eec:	bb30      	cbnz	r0, 8003f3c <_printf_float+0xc4>
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	4649      	mov	r1, r9
 8003ef6:	f7fc fdf1 	bl	8000adc <__aeabi_dcmplt>
 8003efa:	b110      	cbz	r0, 8003f02 <_printf_float+0x8a>
 8003efc:	232d      	movs	r3, #45	; 0x2d
 8003efe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f02:	4a9c      	ldr	r2, [pc, #624]	; (8004174 <_printf_float+0x2fc>)
 8003f04:	4b9c      	ldr	r3, [pc, #624]	; (8004178 <_printf_float+0x300>)
 8003f06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003f0a:	bf8c      	ite	hi
 8003f0c:	4690      	movhi	r8, r2
 8003f0e:	4698      	movls	r8, r3
 8003f10:	2303      	movs	r3, #3
 8003f12:	f02b 0204 	bic.w	r2, fp, #4
 8003f16:	6123      	str	r3, [r4, #16]
 8003f18:	6022      	str	r2, [r4, #0]
 8003f1a:	f04f 0900 	mov.w	r9, #0
 8003f1e:	9700      	str	r7, [sp, #0]
 8003f20:	4633      	mov	r3, r6
 8003f22:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f24:	4621      	mov	r1, r4
 8003f26:	4628      	mov	r0, r5
 8003f28:	f000 f9e6 	bl	80042f8 <_printf_common>
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	f040 808d 	bne.w	800404c <_printf_float+0x1d4>
 8003f32:	f04f 30ff 	mov.w	r0, #4294967295
 8003f36:	b00d      	add	sp, #52	; 0x34
 8003f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	464b      	mov	r3, r9
 8003f40:	4640      	mov	r0, r8
 8003f42:	4649      	mov	r1, r9
 8003f44:	f7fc fdf2 	bl	8000b2c <__aeabi_dcmpun>
 8003f48:	b110      	cbz	r0, 8003f50 <_printf_float+0xd8>
 8003f4a:	4a8c      	ldr	r2, [pc, #560]	; (800417c <_printf_float+0x304>)
 8003f4c:	4b8c      	ldr	r3, [pc, #560]	; (8004180 <_printf_float+0x308>)
 8003f4e:	e7da      	b.n	8003f06 <_printf_float+0x8e>
 8003f50:	6861      	ldr	r1, [r4, #4]
 8003f52:	1c4b      	adds	r3, r1, #1
 8003f54:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003f58:	a80a      	add	r0, sp, #40	; 0x28
 8003f5a:	d13e      	bne.n	8003fda <_printf_float+0x162>
 8003f5c:	2306      	movs	r3, #6
 8003f5e:	6063      	str	r3, [r4, #4]
 8003f60:	2300      	movs	r3, #0
 8003f62:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003f66:	ab09      	add	r3, sp, #36	; 0x24
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	ec49 8b10 	vmov	d0, r8, r9
 8003f6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003f72:	6022      	str	r2, [r4, #0]
 8003f74:	f8cd a004 	str.w	sl, [sp, #4]
 8003f78:	6861      	ldr	r1, [r4, #4]
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f7ff fee8 	bl	8003d50 <__cvt>
 8003f80:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003f84:	2b47      	cmp	r3, #71	; 0x47
 8003f86:	4680      	mov	r8, r0
 8003f88:	d109      	bne.n	8003f9e <_printf_float+0x126>
 8003f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f8c:	1cd8      	adds	r0, r3, #3
 8003f8e:	db02      	blt.n	8003f96 <_printf_float+0x11e>
 8003f90:	6862      	ldr	r2, [r4, #4]
 8003f92:	4293      	cmp	r3, r2
 8003f94:	dd47      	ble.n	8004026 <_printf_float+0x1ae>
 8003f96:	f1aa 0a02 	sub.w	sl, sl, #2
 8003f9a:	fa5f fa8a 	uxtb.w	sl, sl
 8003f9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fa4:	d824      	bhi.n	8003ff0 <_printf_float+0x178>
 8003fa6:	3901      	subs	r1, #1
 8003fa8:	4652      	mov	r2, sl
 8003faa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fae:	9109      	str	r1, [sp, #36]	; 0x24
 8003fb0:	f7ff ff2f 	bl	8003e12 <__exponent>
 8003fb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fb6:	1813      	adds	r3, r2, r0
 8003fb8:	2a01      	cmp	r2, #1
 8003fba:	4681      	mov	r9, r0
 8003fbc:	6123      	str	r3, [r4, #16]
 8003fbe:	dc02      	bgt.n	8003fc6 <_printf_float+0x14e>
 8003fc0:	6822      	ldr	r2, [r4, #0]
 8003fc2:	07d1      	lsls	r1, r2, #31
 8003fc4:	d501      	bpl.n	8003fca <_printf_float+0x152>
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	6123      	str	r3, [r4, #16]
 8003fca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0a5      	beq.n	8003f1e <_printf_float+0xa6>
 8003fd2:	232d      	movs	r3, #45	; 0x2d
 8003fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fd8:	e7a1      	b.n	8003f1e <_printf_float+0xa6>
 8003fda:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003fde:	f000 8177 	beq.w	80042d0 <_printf_float+0x458>
 8003fe2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003fe6:	d1bb      	bne.n	8003f60 <_printf_float+0xe8>
 8003fe8:	2900      	cmp	r1, #0
 8003fea:	d1b9      	bne.n	8003f60 <_printf_float+0xe8>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e7b6      	b.n	8003f5e <_printf_float+0xe6>
 8003ff0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003ff4:	d119      	bne.n	800402a <_printf_float+0x1b2>
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	6863      	ldr	r3, [r4, #4]
 8003ffa:	dd0c      	ble.n	8004016 <_printf_float+0x19e>
 8003ffc:	6121      	str	r1, [r4, #16]
 8003ffe:	b913      	cbnz	r3, 8004006 <_printf_float+0x18e>
 8004000:	6822      	ldr	r2, [r4, #0]
 8004002:	07d2      	lsls	r2, r2, #31
 8004004:	d502      	bpl.n	800400c <_printf_float+0x194>
 8004006:	3301      	adds	r3, #1
 8004008:	440b      	add	r3, r1
 800400a:	6123      	str	r3, [r4, #16]
 800400c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800400e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004010:	f04f 0900 	mov.w	r9, #0
 8004014:	e7d9      	b.n	8003fca <_printf_float+0x152>
 8004016:	b913      	cbnz	r3, 800401e <_printf_float+0x1a6>
 8004018:	6822      	ldr	r2, [r4, #0]
 800401a:	07d0      	lsls	r0, r2, #31
 800401c:	d501      	bpl.n	8004022 <_printf_float+0x1aa>
 800401e:	3302      	adds	r3, #2
 8004020:	e7f3      	b.n	800400a <_printf_float+0x192>
 8004022:	2301      	movs	r3, #1
 8004024:	e7f1      	b.n	800400a <_printf_float+0x192>
 8004026:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800402a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800402e:	4293      	cmp	r3, r2
 8004030:	db05      	blt.n	800403e <_printf_float+0x1c6>
 8004032:	6822      	ldr	r2, [r4, #0]
 8004034:	6123      	str	r3, [r4, #16]
 8004036:	07d1      	lsls	r1, r2, #31
 8004038:	d5e8      	bpl.n	800400c <_printf_float+0x194>
 800403a:	3301      	adds	r3, #1
 800403c:	e7e5      	b.n	800400a <_printf_float+0x192>
 800403e:	2b00      	cmp	r3, #0
 8004040:	bfd4      	ite	le
 8004042:	f1c3 0302 	rsble	r3, r3, #2
 8004046:	2301      	movgt	r3, #1
 8004048:	4413      	add	r3, r2
 800404a:	e7de      	b.n	800400a <_printf_float+0x192>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	055a      	lsls	r2, r3, #21
 8004050:	d407      	bmi.n	8004062 <_printf_float+0x1ea>
 8004052:	6923      	ldr	r3, [r4, #16]
 8004054:	4642      	mov	r2, r8
 8004056:	4631      	mov	r1, r6
 8004058:	4628      	mov	r0, r5
 800405a:	47b8      	blx	r7
 800405c:	3001      	adds	r0, #1
 800405e:	d12b      	bne.n	80040b8 <_printf_float+0x240>
 8004060:	e767      	b.n	8003f32 <_printf_float+0xba>
 8004062:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004066:	f240 80dc 	bls.w	8004222 <_printf_float+0x3aa>
 800406a:	2200      	movs	r2, #0
 800406c:	2300      	movs	r3, #0
 800406e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004072:	f7fc fd29 	bl	8000ac8 <__aeabi_dcmpeq>
 8004076:	2800      	cmp	r0, #0
 8004078:	d033      	beq.n	80040e2 <_printf_float+0x26a>
 800407a:	2301      	movs	r3, #1
 800407c:	4a41      	ldr	r2, [pc, #260]	; (8004184 <_printf_float+0x30c>)
 800407e:	4631      	mov	r1, r6
 8004080:	4628      	mov	r0, r5
 8004082:	47b8      	blx	r7
 8004084:	3001      	adds	r0, #1
 8004086:	f43f af54 	beq.w	8003f32 <_printf_float+0xba>
 800408a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800408e:	429a      	cmp	r2, r3
 8004090:	db02      	blt.n	8004098 <_printf_float+0x220>
 8004092:	6823      	ldr	r3, [r4, #0]
 8004094:	07d8      	lsls	r0, r3, #31
 8004096:	d50f      	bpl.n	80040b8 <_printf_float+0x240>
 8004098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800409c:	4631      	mov	r1, r6
 800409e:	4628      	mov	r0, r5
 80040a0:	47b8      	blx	r7
 80040a2:	3001      	adds	r0, #1
 80040a4:	f43f af45 	beq.w	8003f32 <_printf_float+0xba>
 80040a8:	f04f 0800 	mov.w	r8, #0
 80040ac:	f104 091a 	add.w	r9, r4, #26
 80040b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040b2:	3b01      	subs	r3, #1
 80040b4:	4543      	cmp	r3, r8
 80040b6:	dc09      	bgt.n	80040cc <_printf_float+0x254>
 80040b8:	6823      	ldr	r3, [r4, #0]
 80040ba:	079b      	lsls	r3, r3, #30
 80040bc:	f100 8103 	bmi.w	80042c6 <_printf_float+0x44e>
 80040c0:	68e0      	ldr	r0, [r4, #12]
 80040c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040c4:	4298      	cmp	r0, r3
 80040c6:	bfb8      	it	lt
 80040c8:	4618      	movlt	r0, r3
 80040ca:	e734      	b.n	8003f36 <_printf_float+0xbe>
 80040cc:	2301      	movs	r3, #1
 80040ce:	464a      	mov	r2, r9
 80040d0:	4631      	mov	r1, r6
 80040d2:	4628      	mov	r0, r5
 80040d4:	47b8      	blx	r7
 80040d6:	3001      	adds	r0, #1
 80040d8:	f43f af2b 	beq.w	8003f32 <_printf_float+0xba>
 80040dc:	f108 0801 	add.w	r8, r8, #1
 80040e0:	e7e6      	b.n	80040b0 <_printf_float+0x238>
 80040e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	dc2b      	bgt.n	8004140 <_printf_float+0x2c8>
 80040e8:	2301      	movs	r3, #1
 80040ea:	4a26      	ldr	r2, [pc, #152]	; (8004184 <_printf_float+0x30c>)
 80040ec:	4631      	mov	r1, r6
 80040ee:	4628      	mov	r0, r5
 80040f0:	47b8      	blx	r7
 80040f2:	3001      	adds	r0, #1
 80040f4:	f43f af1d 	beq.w	8003f32 <_printf_float+0xba>
 80040f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040fa:	b923      	cbnz	r3, 8004106 <_printf_float+0x28e>
 80040fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040fe:	b913      	cbnz	r3, 8004106 <_printf_float+0x28e>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	07d9      	lsls	r1, r3, #31
 8004104:	d5d8      	bpl.n	80040b8 <_printf_float+0x240>
 8004106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800410a:	4631      	mov	r1, r6
 800410c:	4628      	mov	r0, r5
 800410e:	47b8      	blx	r7
 8004110:	3001      	adds	r0, #1
 8004112:	f43f af0e 	beq.w	8003f32 <_printf_float+0xba>
 8004116:	f04f 0900 	mov.w	r9, #0
 800411a:	f104 0a1a 	add.w	sl, r4, #26
 800411e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004120:	425b      	negs	r3, r3
 8004122:	454b      	cmp	r3, r9
 8004124:	dc01      	bgt.n	800412a <_printf_float+0x2b2>
 8004126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004128:	e794      	b.n	8004054 <_printf_float+0x1dc>
 800412a:	2301      	movs	r3, #1
 800412c:	4652      	mov	r2, sl
 800412e:	4631      	mov	r1, r6
 8004130:	4628      	mov	r0, r5
 8004132:	47b8      	blx	r7
 8004134:	3001      	adds	r0, #1
 8004136:	f43f aefc 	beq.w	8003f32 <_printf_float+0xba>
 800413a:	f109 0901 	add.w	r9, r9, #1
 800413e:	e7ee      	b.n	800411e <_printf_float+0x2a6>
 8004140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004144:	429a      	cmp	r2, r3
 8004146:	bfa8      	it	ge
 8004148:	461a      	movge	r2, r3
 800414a:	2a00      	cmp	r2, #0
 800414c:	4691      	mov	r9, r2
 800414e:	dd07      	ble.n	8004160 <_printf_float+0x2e8>
 8004150:	4613      	mov	r3, r2
 8004152:	4631      	mov	r1, r6
 8004154:	4642      	mov	r2, r8
 8004156:	4628      	mov	r0, r5
 8004158:	47b8      	blx	r7
 800415a:	3001      	adds	r0, #1
 800415c:	f43f aee9 	beq.w	8003f32 <_printf_float+0xba>
 8004160:	f104 031a 	add.w	r3, r4, #26
 8004164:	f04f 0b00 	mov.w	fp, #0
 8004168:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800416c:	9306      	str	r3, [sp, #24]
 800416e:	e015      	b.n	800419c <_printf_float+0x324>
 8004170:	7fefffff 	.word	0x7fefffff
 8004174:	08005e40 	.word	0x08005e40
 8004178:	08005e3c 	.word	0x08005e3c
 800417c:	08005e48 	.word	0x08005e48
 8004180:	08005e44 	.word	0x08005e44
 8004184:	08005e4c 	.word	0x08005e4c
 8004188:	2301      	movs	r3, #1
 800418a:	9a06      	ldr	r2, [sp, #24]
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f43f aecd 	beq.w	8003f32 <_printf_float+0xba>
 8004198:	f10b 0b01 	add.w	fp, fp, #1
 800419c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041a0:	ebaa 0309 	sub.w	r3, sl, r9
 80041a4:	455b      	cmp	r3, fp
 80041a6:	dcef      	bgt.n	8004188 <_printf_float+0x310>
 80041a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041ac:	429a      	cmp	r2, r3
 80041ae:	44d0      	add	r8, sl
 80041b0:	db15      	blt.n	80041de <_printf_float+0x366>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	07da      	lsls	r2, r3, #31
 80041b6:	d412      	bmi.n	80041de <_printf_float+0x366>
 80041b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041bc:	eba3 020a 	sub.w	r2, r3, sl
 80041c0:	eba3 0a01 	sub.w	sl, r3, r1
 80041c4:	4592      	cmp	sl, r2
 80041c6:	bfa8      	it	ge
 80041c8:	4692      	movge	sl, r2
 80041ca:	f1ba 0f00 	cmp.w	sl, #0
 80041ce:	dc0e      	bgt.n	80041ee <_printf_float+0x376>
 80041d0:	f04f 0800 	mov.w	r8, #0
 80041d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80041d8:	f104 091a 	add.w	r9, r4, #26
 80041dc:	e019      	b.n	8004212 <_printf_float+0x39a>
 80041de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041e2:	4631      	mov	r1, r6
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b8      	blx	r7
 80041e8:	3001      	adds	r0, #1
 80041ea:	d1e5      	bne.n	80041b8 <_printf_float+0x340>
 80041ec:	e6a1      	b.n	8003f32 <_printf_float+0xba>
 80041ee:	4653      	mov	r3, sl
 80041f0:	4642      	mov	r2, r8
 80041f2:	4631      	mov	r1, r6
 80041f4:	4628      	mov	r0, r5
 80041f6:	47b8      	blx	r7
 80041f8:	3001      	adds	r0, #1
 80041fa:	d1e9      	bne.n	80041d0 <_printf_float+0x358>
 80041fc:	e699      	b.n	8003f32 <_printf_float+0xba>
 80041fe:	2301      	movs	r3, #1
 8004200:	464a      	mov	r2, r9
 8004202:	4631      	mov	r1, r6
 8004204:	4628      	mov	r0, r5
 8004206:	47b8      	blx	r7
 8004208:	3001      	adds	r0, #1
 800420a:	f43f ae92 	beq.w	8003f32 <_printf_float+0xba>
 800420e:	f108 0801 	add.w	r8, r8, #1
 8004212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	eba3 030a 	sub.w	r3, r3, sl
 800421c:	4543      	cmp	r3, r8
 800421e:	dcee      	bgt.n	80041fe <_printf_float+0x386>
 8004220:	e74a      	b.n	80040b8 <_printf_float+0x240>
 8004222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004224:	2a01      	cmp	r2, #1
 8004226:	dc01      	bgt.n	800422c <_printf_float+0x3b4>
 8004228:	07db      	lsls	r3, r3, #31
 800422a:	d53a      	bpl.n	80042a2 <_printf_float+0x42a>
 800422c:	2301      	movs	r3, #1
 800422e:	4642      	mov	r2, r8
 8004230:	4631      	mov	r1, r6
 8004232:	4628      	mov	r0, r5
 8004234:	47b8      	blx	r7
 8004236:	3001      	adds	r0, #1
 8004238:	f43f ae7b 	beq.w	8003f32 <_printf_float+0xba>
 800423c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004240:	4631      	mov	r1, r6
 8004242:	4628      	mov	r0, r5
 8004244:	47b8      	blx	r7
 8004246:	3001      	adds	r0, #1
 8004248:	f108 0801 	add.w	r8, r8, #1
 800424c:	f43f ae71 	beq.w	8003f32 <_printf_float+0xba>
 8004250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004252:	2200      	movs	r2, #0
 8004254:	f103 3aff 	add.w	sl, r3, #4294967295
 8004258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800425c:	2300      	movs	r3, #0
 800425e:	f7fc fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 8004262:	b9c8      	cbnz	r0, 8004298 <_printf_float+0x420>
 8004264:	4653      	mov	r3, sl
 8004266:	4642      	mov	r2, r8
 8004268:	4631      	mov	r1, r6
 800426a:	4628      	mov	r0, r5
 800426c:	47b8      	blx	r7
 800426e:	3001      	adds	r0, #1
 8004270:	d10e      	bne.n	8004290 <_printf_float+0x418>
 8004272:	e65e      	b.n	8003f32 <_printf_float+0xba>
 8004274:	2301      	movs	r3, #1
 8004276:	4652      	mov	r2, sl
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	f43f ae57 	beq.w	8003f32 <_printf_float+0xba>
 8004284:	f108 0801 	add.w	r8, r8, #1
 8004288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800428a:	3b01      	subs	r3, #1
 800428c:	4543      	cmp	r3, r8
 800428e:	dcf1      	bgt.n	8004274 <_printf_float+0x3fc>
 8004290:	464b      	mov	r3, r9
 8004292:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004296:	e6de      	b.n	8004056 <_printf_float+0x1de>
 8004298:	f04f 0800 	mov.w	r8, #0
 800429c:	f104 0a1a 	add.w	sl, r4, #26
 80042a0:	e7f2      	b.n	8004288 <_printf_float+0x410>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e7df      	b.n	8004266 <_printf_float+0x3ee>
 80042a6:	2301      	movs	r3, #1
 80042a8:	464a      	mov	r2, r9
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	f43f ae3e 	beq.w	8003f32 <_printf_float+0xba>
 80042b6:	f108 0801 	add.w	r8, r8, #1
 80042ba:	68e3      	ldr	r3, [r4, #12]
 80042bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	4543      	cmp	r3, r8
 80042c2:	dcf0      	bgt.n	80042a6 <_printf_float+0x42e>
 80042c4:	e6fc      	b.n	80040c0 <_printf_float+0x248>
 80042c6:	f04f 0800 	mov.w	r8, #0
 80042ca:	f104 0919 	add.w	r9, r4, #25
 80042ce:	e7f4      	b.n	80042ba <_printf_float+0x442>
 80042d0:	2900      	cmp	r1, #0
 80042d2:	f43f ae8b 	beq.w	8003fec <_printf_float+0x174>
 80042d6:	2300      	movs	r3, #0
 80042d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80042dc:	ab09      	add	r3, sp, #36	; 0x24
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	ec49 8b10 	vmov	d0, r8, r9
 80042e4:	6022      	str	r2, [r4, #0]
 80042e6:	f8cd a004 	str.w	sl, [sp, #4]
 80042ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042ee:	4628      	mov	r0, r5
 80042f0:	f7ff fd2e 	bl	8003d50 <__cvt>
 80042f4:	4680      	mov	r8, r0
 80042f6:	e648      	b.n	8003f8a <_printf_float+0x112>

080042f8 <_printf_common>:
 80042f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042fc:	4691      	mov	r9, r2
 80042fe:	461f      	mov	r7, r3
 8004300:	688a      	ldr	r2, [r1, #8]
 8004302:	690b      	ldr	r3, [r1, #16]
 8004304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004308:	4293      	cmp	r3, r2
 800430a:	bfb8      	it	lt
 800430c:	4613      	movlt	r3, r2
 800430e:	f8c9 3000 	str.w	r3, [r9]
 8004312:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004316:	4606      	mov	r6, r0
 8004318:	460c      	mov	r4, r1
 800431a:	b112      	cbz	r2, 8004322 <_printf_common+0x2a>
 800431c:	3301      	adds	r3, #1
 800431e:	f8c9 3000 	str.w	r3, [r9]
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	0699      	lsls	r1, r3, #26
 8004326:	bf42      	ittt	mi
 8004328:	f8d9 3000 	ldrmi.w	r3, [r9]
 800432c:	3302      	addmi	r3, #2
 800432e:	f8c9 3000 	strmi.w	r3, [r9]
 8004332:	6825      	ldr	r5, [r4, #0]
 8004334:	f015 0506 	ands.w	r5, r5, #6
 8004338:	d107      	bne.n	800434a <_printf_common+0x52>
 800433a:	f104 0a19 	add.w	sl, r4, #25
 800433e:	68e3      	ldr	r3, [r4, #12]
 8004340:	f8d9 2000 	ldr.w	r2, [r9]
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	42ab      	cmp	r3, r5
 8004348:	dc28      	bgt.n	800439c <_printf_common+0xa4>
 800434a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800434e:	6822      	ldr	r2, [r4, #0]
 8004350:	3300      	adds	r3, #0
 8004352:	bf18      	it	ne
 8004354:	2301      	movne	r3, #1
 8004356:	0692      	lsls	r2, r2, #26
 8004358:	d42d      	bmi.n	80043b6 <_printf_common+0xbe>
 800435a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800435e:	4639      	mov	r1, r7
 8004360:	4630      	mov	r0, r6
 8004362:	47c0      	blx	r8
 8004364:	3001      	adds	r0, #1
 8004366:	d020      	beq.n	80043aa <_printf_common+0xb2>
 8004368:	6823      	ldr	r3, [r4, #0]
 800436a:	68e5      	ldr	r5, [r4, #12]
 800436c:	f8d9 2000 	ldr.w	r2, [r9]
 8004370:	f003 0306 	and.w	r3, r3, #6
 8004374:	2b04      	cmp	r3, #4
 8004376:	bf08      	it	eq
 8004378:	1aad      	subeq	r5, r5, r2
 800437a:	68a3      	ldr	r3, [r4, #8]
 800437c:	6922      	ldr	r2, [r4, #16]
 800437e:	bf0c      	ite	eq
 8004380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004384:	2500      	movne	r5, #0
 8004386:	4293      	cmp	r3, r2
 8004388:	bfc4      	itt	gt
 800438a:	1a9b      	subgt	r3, r3, r2
 800438c:	18ed      	addgt	r5, r5, r3
 800438e:	f04f 0900 	mov.w	r9, #0
 8004392:	341a      	adds	r4, #26
 8004394:	454d      	cmp	r5, r9
 8004396:	d11a      	bne.n	80043ce <_printf_common+0xd6>
 8004398:	2000      	movs	r0, #0
 800439a:	e008      	b.n	80043ae <_printf_common+0xb6>
 800439c:	2301      	movs	r3, #1
 800439e:	4652      	mov	r2, sl
 80043a0:	4639      	mov	r1, r7
 80043a2:	4630      	mov	r0, r6
 80043a4:	47c0      	blx	r8
 80043a6:	3001      	adds	r0, #1
 80043a8:	d103      	bne.n	80043b2 <_printf_common+0xba>
 80043aa:	f04f 30ff 	mov.w	r0, #4294967295
 80043ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043b2:	3501      	adds	r5, #1
 80043b4:	e7c3      	b.n	800433e <_printf_common+0x46>
 80043b6:	18e1      	adds	r1, r4, r3
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	2030      	movs	r0, #48	; 0x30
 80043bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043c0:	4422      	add	r2, r4
 80043c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043ca:	3302      	adds	r3, #2
 80043cc:	e7c5      	b.n	800435a <_printf_common+0x62>
 80043ce:	2301      	movs	r3, #1
 80043d0:	4622      	mov	r2, r4
 80043d2:	4639      	mov	r1, r7
 80043d4:	4630      	mov	r0, r6
 80043d6:	47c0      	blx	r8
 80043d8:	3001      	adds	r0, #1
 80043da:	d0e6      	beq.n	80043aa <_printf_common+0xb2>
 80043dc:	f109 0901 	add.w	r9, r9, #1
 80043e0:	e7d8      	b.n	8004394 <_printf_common+0x9c>
	...

080043e4 <_printf_i>:
 80043e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80043ec:	460c      	mov	r4, r1
 80043ee:	7e09      	ldrb	r1, [r1, #24]
 80043f0:	b085      	sub	sp, #20
 80043f2:	296e      	cmp	r1, #110	; 0x6e
 80043f4:	4617      	mov	r7, r2
 80043f6:	4606      	mov	r6, r0
 80043f8:	4698      	mov	r8, r3
 80043fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043fc:	f000 80b3 	beq.w	8004566 <_printf_i+0x182>
 8004400:	d822      	bhi.n	8004448 <_printf_i+0x64>
 8004402:	2963      	cmp	r1, #99	; 0x63
 8004404:	d036      	beq.n	8004474 <_printf_i+0x90>
 8004406:	d80a      	bhi.n	800441e <_printf_i+0x3a>
 8004408:	2900      	cmp	r1, #0
 800440a:	f000 80b9 	beq.w	8004580 <_printf_i+0x19c>
 800440e:	2958      	cmp	r1, #88	; 0x58
 8004410:	f000 8083 	beq.w	800451a <_printf_i+0x136>
 8004414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004418:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800441c:	e032      	b.n	8004484 <_printf_i+0xa0>
 800441e:	2964      	cmp	r1, #100	; 0x64
 8004420:	d001      	beq.n	8004426 <_printf_i+0x42>
 8004422:	2969      	cmp	r1, #105	; 0x69
 8004424:	d1f6      	bne.n	8004414 <_printf_i+0x30>
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	0605      	lsls	r5, r0, #24
 800442c:	f103 0104 	add.w	r1, r3, #4
 8004430:	d52a      	bpl.n	8004488 <_printf_i+0xa4>
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	da03      	bge.n	8004442 <_printf_i+0x5e>
 800443a:	222d      	movs	r2, #45	; 0x2d
 800443c:	425b      	negs	r3, r3
 800443e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004442:	486f      	ldr	r0, [pc, #444]	; (8004600 <_printf_i+0x21c>)
 8004444:	220a      	movs	r2, #10
 8004446:	e039      	b.n	80044bc <_printf_i+0xd8>
 8004448:	2973      	cmp	r1, #115	; 0x73
 800444a:	f000 809d 	beq.w	8004588 <_printf_i+0x1a4>
 800444e:	d808      	bhi.n	8004462 <_printf_i+0x7e>
 8004450:	296f      	cmp	r1, #111	; 0x6f
 8004452:	d020      	beq.n	8004496 <_printf_i+0xb2>
 8004454:	2970      	cmp	r1, #112	; 0x70
 8004456:	d1dd      	bne.n	8004414 <_printf_i+0x30>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	f043 0320 	orr.w	r3, r3, #32
 800445e:	6023      	str	r3, [r4, #0]
 8004460:	e003      	b.n	800446a <_printf_i+0x86>
 8004462:	2975      	cmp	r1, #117	; 0x75
 8004464:	d017      	beq.n	8004496 <_printf_i+0xb2>
 8004466:	2978      	cmp	r1, #120	; 0x78
 8004468:	d1d4      	bne.n	8004414 <_printf_i+0x30>
 800446a:	2378      	movs	r3, #120	; 0x78
 800446c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004470:	4864      	ldr	r0, [pc, #400]	; (8004604 <_printf_i+0x220>)
 8004472:	e055      	b.n	8004520 <_printf_i+0x13c>
 8004474:	6813      	ldr	r3, [r2, #0]
 8004476:	1d19      	adds	r1, r3, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	6011      	str	r1, [r2, #0]
 800447c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004484:	2301      	movs	r3, #1
 8004486:	e08c      	b.n	80045a2 <_printf_i+0x1be>
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6011      	str	r1, [r2, #0]
 800448c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004490:	bf18      	it	ne
 8004492:	b21b      	sxthne	r3, r3
 8004494:	e7cf      	b.n	8004436 <_printf_i+0x52>
 8004496:	6813      	ldr	r3, [r2, #0]
 8004498:	6825      	ldr	r5, [r4, #0]
 800449a:	1d18      	adds	r0, r3, #4
 800449c:	6010      	str	r0, [r2, #0]
 800449e:	0628      	lsls	r0, r5, #24
 80044a0:	d501      	bpl.n	80044a6 <_printf_i+0xc2>
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	e002      	b.n	80044ac <_printf_i+0xc8>
 80044a6:	0668      	lsls	r0, r5, #25
 80044a8:	d5fb      	bpl.n	80044a2 <_printf_i+0xbe>
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	4854      	ldr	r0, [pc, #336]	; (8004600 <_printf_i+0x21c>)
 80044ae:	296f      	cmp	r1, #111	; 0x6f
 80044b0:	bf14      	ite	ne
 80044b2:	220a      	movne	r2, #10
 80044b4:	2208      	moveq	r2, #8
 80044b6:	2100      	movs	r1, #0
 80044b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044bc:	6865      	ldr	r5, [r4, #4]
 80044be:	60a5      	str	r5, [r4, #8]
 80044c0:	2d00      	cmp	r5, #0
 80044c2:	f2c0 8095 	blt.w	80045f0 <_printf_i+0x20c>
 80044c6:	6821      	ldr	r1, [r4, #0]
 80044c8:	f021 0104 	bic.w	r1, r1, #4
 80044cc:	6021      	str	r1, [r4, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d13d      	bne.n	800454e <_printf_i+0x16a>
 80044d2:	2d00      	cmp	r5, #0
 80044d4:	f040 808e 	bne.w	80045f4 <_printf_i+0x210>
 80044d8:	4665      	mov	r5, ip
 80044da:	2a08      	cmp	r2, #8
 80044dc:	d10b      	bne.n	80044f6 <_printf_i+0x112>
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	07db      	lsls	r3, r3, #31
 80044e2:	d508      	bpl.n	80044f6 <_printf_i+0x112>
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	6862      	ldr	r2, [r4, #4]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	bfde      	ittt	le
 80044ec:	2330      	movle	r3, #48	; 0x30
 80044ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044f6:	ebac 0305 	sub.w	r3, ip, r5
 80044fa:	6123      	str	r3, [r4, #16]
 80044fc:	f8cd 8000 	str.w	r8, [sp]
 8004500:	463b      	mov	r3, r7
 8004502:	aa03      	add	r2, sp, #12
 8004504:	4621      	mov	r1, r4
 8004506:	4630      	mov	r0, r6
 8004508:	f7ff fef6 	bl	80042f8 <_printf_common>
 800450c:	3001      	adds	r0, #1
 800450e:	d14d      	bne.n	80045ac <_printf_i+0x1c8>
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	b005      	add	sp, #20
 8004516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800451a:	4839      	ldr	r0, [pc, #228]	; (8004600 <_printf_i+0x21c>)
 800451c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004520:	6813      	ldr	r3, [r2, #0]
 8004522:	6821      	ldr	r1, [r4, #0]
 8004524:	1d1d      	adds	r5, r3, #4
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6015      	str	r5, [r2, #0]
 800452a:	060a      	lsls	r2, r1, #24
 800452c:	d50b      	bpl.n	8004546 <_printf_i+0x162>
 800452e:	07ca      	lsls	r2, r1, #31
 8004530:	bf44      	itt	mi
 8004532:	f041 0120 	orrmi.w	r1, r1, #32
 8004536:	6021      	strmi	r1, [r4, #0]
 8004538:	b91b      	cbnz	r3, 8004542 <_printf_i+0x15e>
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	f022 0220 	bic.w	r2, r2, #32
 8004540:	6022      	str	r2, [r4, #0]
 8004542:	2210      	movs	r2, #16
 8004544:	e7b7      	b.n	80044b6 <_printf_i+0xd2>
 8004546:	064d      	lsls	r5, r1, #25
 8004548:	bf48      	it	mi
 800454a:	b29b      	uxthmi	r3, r3
 800454c:	e7ef      	b.n	800452e <_printf_i+0x14a>
 800454e:	4665      	mov	r5, ip
 8004550:	fbb3 f1f2 	udiv	r1, r3, r2
 8004554:	fb02 3311 	mls	r3, r2, r1, r3
 8004558:	5cc3      	ldrb	r3, [r0, r3]
 800455a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800455e:	460b      	mov	r3, r1
 8004560:	2900      	cmp	r1, #0
 8004562:	d1f5      	bne.n	8004550 <_printf_i+0x16c>
 8004564:	e7b9      	b.n	80044da <_printf_i+0xf6>
 8004566:	6813      	ldr	r3, [r2, #0]
 8004568:	6825      	ldr	r5, [r4, #0]
 800456a:	6961      	ldr	r1, [r4, #20]
 800456c:	1d18      	adds	r0, r3, #4
 800456e:	6010      	str	r0, [r2, #0]
 8004570:	0628      	lsls	r0, r5, #24
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	d501      	bpl.n	800457a <_printf_i+0x196>
 8004576:	6019      	str	r1, [r3, #0]
 8004578:	e002      	b.n	8004580 <_printf_i+0x19c>
 800457a:	066a      	lsls	r2, r5, #25
 800457c:	d5fb      	bpl.n	8004576 <_printf_i+0x192>
 800457e:	8019      	strh	r1, [r3, #0]
 8004580:	2300      	movs	r3, #0
 8004582:	6123      	str	r3, [r4, #16]
 8004584:	4665      	mov	r5, ip
 8004586:	e7b9      	b.n	80044fc <_printf_i+0x118>
 8004588:	6813      	ldr	r3, [r2, #0]
 800458a:	1d19      	adds	r1, r3, #4
 800458c:	6011      	str	r1, [r2, #0]
 800458e:	681d      	ldr	r5, [r3, #0]
 8004590:	6862      	ldr	r2, [r4, #4]
 8004592:	2100      	movs	r1, #0
 8004594:	4628      	mov	r0, r5
 8004596:	f7fb fe23 	bl	80001e0 <memchr>
 800459a:	b108      	cbz	r0, 80045a0 <_printf_i+0x1bc>
 800459c:	1b40      	subs	r0, r0, r5
 800459e:	6060      	str	r0, [r4, #4]
 80045a0:	6863      	ldr	r3, [r4, #4]
 80045a2:	6123      	str	r3, [r4, #16]
 80045a4:	2300      	movs	r3, #0
 80045a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045aa:	e7a7      	b.n	80044fc <_printf_i+0x118>
 80045ac:	6923      	ldr	r3, [r4, #16]
 80045ae:	462a      	mov	r2, r5
 80045b0:	4639      	mov	r1, r7
 80045b2:	4630      	mov	r0, r6
 80045b4:	47c0      	blx	r8
 80045b6:	3001      	adds	r0, #1
 80045b8:	d0aa      	beq.n	8004510 <_printf_i+0x12c>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	079b      	lsls	r3, r3, #30
 80045be:	d413      	bmi.n	80045e8 <_printf_i+0x204>
 80045c0:	68e0      	ldr	r0, [r4, #12]
 80045c2:	9b03      	ldr	r3, [sp, #12]
 80045c4:	4298      	cmp	r0, r3
 80045c6:	bfb8      	it	lt
 80045c8:	4618      	movlt	r0, r3
 80045ca:	e7a3      	b.n	8004514 <_printf_i+0x130>
 80045cc:	2301      	movs	r3, #1
 80045ce:	464a      	mov	r2, r9
 80045d0:	4639      	mov	r1, r7
 80045d2:	4630      	mov	r0, r6
 80045d4:	47c0      	blx	r8
 80045d6:	3001      	adds	r0, #1
 80045d8:	d09a      	beq.n	8004510 <_printf_i+0x12c>
 80045da:	3501      	adds	r5, #1
 80045dc:	68e3      	ldr	r3, [r4, #12]
 80045de:	9a03      	ldr	r2, [sp, #12]
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	42ab      	cmp	r3, r5
 80045e4:	dcf2      	bgt.n	80045cc <_printf_i+0x1e8>
 80045e6:	e7eb      	b.n	80045c0 <_printf_i+0x1dc>
 80045e8:	2500      	movs	r5, #0
 80045ea:	f104 0919 	add.w	r9, r4, #25
 80045ee:	e7f5      	b.n	80045dc <_printf_i+0x1f8>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1ac      	bne.n	800454e <_printf_i+0x16a>
 80045f4:	7803      	ldrb	r3, [r0, #0]
 80045f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045fe:	e76c      	b.n	80044da <_printf_i+0xf6>
 8004600:	08005e4e 	.word	0x08005e4e
 8004604:	08005e5f 	.word	0x08005e5f

08004608 <siprintf>:
 8004608:	b40e      	push	{r1, r2, r3}
 800460a:	b500      	push	{lr}
 800460c:	b09c      	sub	sp, #112	; 0x70
 800460e:	ab1d      	add	r3, sp, #116	; 0x74
 8004610:	9002      	str	r0, [sp, #8]
 8004612:	9006      	str	r0, [sp, #24]
 8004614:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004618:	4809      	ldr	r0, [pc, #36]	; (8004640 <siprintf+0x38>)
 800461a:	9107      	str	r1, [sp, #28]
 800461c:	9104      	str	r1, [sp, #16]
 800461e:	4909      	ldr	r1, [pc, #36]	; (8004644 <siprintf+0x3c>)
 8004620:	f853 2b04 	ldr.w	r2, [r3], #4
 8004624:	9105      	str	r1, [sp, #20]
 8004626:	6800      	ldr	r0, [r0, #0]
 8004628:	9301      	str	r3, [sp, #4]
 800462a:	a902      	add	r1, sp, #8
 800462c:	f001 fa5c 	bl	8005ae8 <_svfiprintf_r>
 8004630:	9b02      	ldr	r3, [sp, #8]
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	b01c      	add	sp, #112	; 0x70
 8004638:	f85d eb04 	ldr.w	lr, [sp], #4
 800463c:	b003      	add	sp, #12
 800463e:	4770      	bx	lr
 8004640:	2000000c 	.word	0x2000000c
 8004644:	ffff0208 	.word	0xffff0208

08004648 <quorem>:
 8004648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464c:	6903      	ldr	r3, [r0, #16]
 800464e:	690c      	ldr	r4, [r1, #16]
 8004650:	42a3      	cmp	r3, r4
 8004652:	4680      	mov	r8, r0
 8004654:	f2c0 8082 	blt.w	800475c <quorem+0x114>
 8004658:	3c01      	subs	r4, #1
 800465a:	f101 0714 	add.w	r7, r1, #20
 800465e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004662:	f100 0614 	add.w	r6, r0, #20
 8004666:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800466a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800466e:	eb06 030c 	add.w	r3, r6, ip
 8004672:	3501      	adds	r5, #1
 8004674:	eb07 090c 	add.w	r9, r7, ip
 8004678:	9301      	str	r3, [sp, #4]
 800467a:	fbb0 f5f5 	udiv	r5, r0, r5
 800467e:	b395      	cbz	r5, 80046e6 <quorem+0x9e>
 8004680:	f04f 0a00 	mov.w	sl, #0
 8004684:	4638      	mov	r0, r7
 8004686:	46b6      	mov	lr, r6
 8004688:	46d3      	mov	fp, sl
 800468a:	f850 2b04 	ldr.w	r2, [r0], #4
 800468e:	b293      	uxth	r3, r2
 8004690:	fb05 a303 	mla	r3, r5, r3, sl
 8004694:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004698:	b29b      	uxth	r3, r3
 800469a:	ebab 0303 	sub.w	r3, fp, r3
 800469e:	0c12      	lsrs	r2, r2, #16
 80046a0:	f8de b000 	ldr.w	fp, [lr]
 80046a4:	fb05 a202 	mla	r2, r5, r2, sl
 80046a8:	fa13 f38b 	uxtah	r3, r3, fp
 80046ac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80046b0:	fa1f fb82 	uxth.w	fp, r2
 80046b4:	f8de 2000 	ldr.w	r2, [lr]
 80046b8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80046bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046c6:	4581      	cmp	r9, r0
 80046c8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80046cc:	f84e 3b04 	str.w	r3, [lr], #4
 80046d0:	d2db      	bcs.n	800468a <quorem+0x42>
 80046d2:	f856 300c 	ldr.w	r3, [r6, ip]
 80046d6:	b933      	cbnz	r3, 80046e6 <quorem+0x9e>
 80046d8:	9b01      	ldr	r3, [sp, #4]
 80046da:	3b04      	subs	r3, #4
 80046dc:	429e      	cmp	r6, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	d330      	bcc.n	8004744 <quorem+0xfc>
 80046e2:	f8c8 4010 	str.w	r4, [r8, #16]
 80046e6:	4640      	mov	r0, r8
 80046e8:	f001 f828 	bl	800573c <__mcmp>
 80046ec:	2800      	cmp	r0, #0
 80046ee:	db25      	blt.n	800473c <quorem+0xf4>
 80046f0:	3501      	adds	r5, #1
 80046f2:	4630      	mov	r0, r6
 80046f4:	f04f 0c00 	mov.w	ip, #0
 80046f8:	f857 2b04 	ldr.w	r2, [r7], #4
 80046fc:	f8d0 e000 	ldr.w	lr, [r0]
 8004700:	b293      	uxth	r3, r2
 8004702:	ebac 0303 	sub.w	r3, ip, r3
 8004706:	0c12      	lsrs	r2, r2, #16
 8004708:	fa13 f38e 	uxtah	r3, r3, lr
 800470c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004710:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004714:	b29b      	uxth	r3, r3
 8004716:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800471a:	45b9      	cmp	r9, r7
 800471c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004720:	f840 3b04 	str.w	r3, [r0], #4
 8004724:	d2e8      	bcs.n	80046f8 <quorem+0xb0>
 8004726:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800472a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800472e:	b92a      	cbnz	r2, 800473c <quorem+0xf4>
 8004730:	3b04      	subs	r3, #4
 8004732:	429e      	cmp	r6, r3
 8004734:	461a      	mov	r2, r3
 8004736:	d30b      	bcc.n	8004750 <quorem+0x108>
 8004738:	f8c8 4010 	str.w	r4, [r8, #16]
 800473c:	4628      	mov	r0, r5
 800473e:	b003      	add	sp, #12
 8004740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	3b04      	subs	r3, #4
 8004748:	2a00      	cmp	r2, #0
 800474a:	d1ca      	bne.n	80046e2 <quorem+0x9a>
 800474c:	3c01      	subs	r4, #1
 800474e:	e7c5      	b.n	80046dc <quorem+0x94>
 8004750:	6812      	ldr	r2, [r2, #0]
 8004752:	3b04      	subs	r3, #4
 8004754:	2a00      	cmp	r2, #0
 8004756:	d1ef      	bne.n	8004738 <quorem+0xf0>
 8004758:	3c01      	subs	r4, #1
 800475a:	e7ea      	b.n	8004732 <quorem+0xea>
 800475c:	2000      	movs	r0, #0
 800475e:	e7ee      	b.n	800473e <quorem+0xf6>

08004760 <_dtoa_r>:
 8004760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004764:	ec57 6b10 	vmov	r6, r7, d0
 8004768:	b097      	sub	sp, #92	; 0x5c
 800476a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800476c:	9106      	str	r1, [sp, #24]
 800476e:	4604      	mov	r4, r0
 8004770:	920b      	str	r2, [sp, #44]	; 0x2c
 8004772:	9312      	str	r3, [sp, #72]	; 0x48
 8004774:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004778:	e9cd 6700 	strd	r6, r7, [sp]
 800477c:	b93d      	cbnz	r5, 800478e <_dtoa_r+0x2e>
 800477e:	2010      	movs	r0, #16
 8004780:	f000 fdb4 	bl	80052ec <malloc>
 8004784:	6260      	str	r0, [r4, #36]	; 0x24
 8004786:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800478a:	6005      	str	r5, [r0, #0]
 800478c:	60c5      	str	r5, [r0, #12]
 800478e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004790:	6819      	ldr	r1, [r3, #0]
 8004792:	b151      	cbz	r1, 80047aa <_dtoa_r+0x4a>
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	604a      	str	r2, [r1, #4]
 8004798:	2301      	movs	r3, #1
 800479a:	4093      	lsls	r3, r2
 800479c:	608b      	str	r3, [r1, #8]
 800479e:	4620      	mov	r0, r4
 80047a0:	f000 fdeb 	bl	800537a <_Bfree>
 80047a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	1e3b      	subs	r3, r7, #0
 80047ac:	bfbb      	ittet	lt
 80047ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80047b2:	9301      	strlt	r3, [sp, #4]
 80047b4:	2300      	movge	r3, #0
 80047b6:	2201      	movlt	r2, #1
 80047b8:	bfac      	ite	ge
 80047ba:	f8c8 3000 	strge.w	r3, [r8]
 80047be:	f8c8 2000 	strlt.w	r2, [r8]
 80047c2:	4baf      	ldr	r3, [pc, #700]	; (8004a80 <_dtoa_r+0x320>)
 80047c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80047c8:	ea33 0308 	bics.w	r3, r3, r8
 80047cc:	d114      	bne.n	80047f8 <_dtoa_r+0x98>
 80047ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	9b00      	ldr	r3, [sp, #0]
 80047d8:	b923      	cbnz	r3, 80047e4 <_dtoa_r+0x84>
 80047da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80047de:	2800      	cmp	r0, #0
 80047e0:	f000 8542 	beq.w	8005268 <_dtoa_r+0xb08>
 80047e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004a94 <_dtoa_r+0x334>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8544 	beq.w	8005278 <_dtoa_r+0xb18>
 80047f0:	f10b 0303 	add.w	r3, fp, #3
 80047f4:	f000 bd3e 	b.w	8005274 <_dtoa_r+0xb14>
 80047f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2300      	movs	r3, #0
 8004800:	4630      	mov	r0, r6
 8004802:	4639      	mov	r1, r7
 8004804:	f7fc f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8004808:	4681      	mov	r9, r0
 800480a:	b168      	cbz	r0, 8004828 <_dtoa_r+0xc8>
 800480c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800480e:	2301      	movs	r3, #1
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8524 	beq.w	8005262 <_dtoa_r+0xb02>
 800481a:	4b9a      	ldr	r3, [pc, #616]	; (8004a84 <_dtoa_r+0x324>)
 800481c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800481e:	f103 3bff 	add.w	fp, r3, #4294967295
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	f000 bd28 	b.w	8005278 <_dtoa_r+0xb18>
 8004828:	aa14      	add	r2, sp, #80	; 0x50
 800482a:	a915      	add	r1, sp, #84	; 0x54
 800482c:	ec47 6b10 	vmov	d0, r6, r7
 8004830:	4620      	mov	r0, r4
 8004832:	f000 fffa 	bl	800582a <__d2b>
 8004836:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800483a:	9004      	str	r0, [sp, #16]
 800483c:	2d00      	cmp	r5, #0
 800483e:	d07c      	beq.n	800493a <_dtoa_r+0x1da>
 8004840:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004844:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004848:	46b2      	mov	sl, r6
 800484a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800484e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004852:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004856:	2200      	movs	r2, #0
 8004858:	4b8b      	ldr	r3, [pc, #556]	; (8004a88 <_dtoa_r+0x328>)
 800485a:	4650      	mov	r0, sl
 800485c:	4659      	mov	r1, fp
 800485e:	f7fb fd13 	bl	8000288 <__aeabi_dsub>
 8004862:	a381      	add	r3, pc, #516	; (adr r3, 8004a68 <_dtoa_r+0x308>)
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	f7fb fec6 	bl	80005f8 <__aeabi_dmul>
 800486c:	a380      	add	r3, pc, #512	; (adr r3, 8004a70 <_dtoa_r+0x310>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f7fb fd0b 	bl	800028c <__adddf3>
 8004876:	4606      	mov	r6, r0
 8004878:	4628      	mov	r0, r5
 800487a:	460f      	mov	r7, r1
 800487c:	f7fb fe52 	bl	8000524 <__aeabi_i2d>
 8004880:	a37d      	add	r3, pc, #500	; (adr r3, 8004a78 <_dtoa_r+0x318>)
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f7fb feb7 	bl	80005f8 <__aeabi_dmul>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4630      	mov	r0, r6
 8004890:	4639      	mov	r1, r7
 8004892:	f7fb fcfb 	bl	800028c <__adddf3>
 8004896:	4606      	mov	r6, r0
 8004898:	460f      	mov	r7, r1
 800489a:	f7fc f95d 	bl	8000b58 <__aeabi_d2iz>
 800489e:	2200      	movs	r2, #0
 80048a0:	4682      	mov	sl, r0
 80048a2:	2300      	movs	r3, #0
 80048a4:	4630      	mov	r0, r6
 80048a6:	4639      	mov	r1, r7
 80048a8:	f7fc f918 	bl	8000adc <__aeabi_dcmplt>
 80048ac:	b148      	cbz	r0, 80048c2 <_dtoa_r+0x162>
 80048ae:	4650      	mov	r0, sl
 80048b0:	f7fb fe38 	bl	8000524 <__aeabi_i2d>
 80048b4:	4632      	mov	r2, r6
 80048b6:	463b      	mov	r3, r7
 80048b8:	f7fc f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80048bc:	b908      	cbnz	r0, 80048c2 <_dtoa_r+0x162>
 80048be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048c2:	f1ba 0f16 	cmp.w	sl, #22
 80048c6:	d859      	bhi.n	800497c <_dtoa_r+0x21c>
 80048c8:	4970      	ldr	r1, [pc, #448]	; (8004a8c <_dtoa_r+0x32c>)
 80048ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80048ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048d6:	f7fc f91f 	bl	8000b18 <__aeabi_dcmpgt>
 80048da:	2800      	cmp	r0, #0
 80048dc:	d050      	beq.n	8004980 <_dtoa_r+0x220>
 80048de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048e2:	2300      	movs	r3, #0
 80048e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80048e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048e8:	1b5d      	subs	r5, r3, r5
 80048ea:	f1b5 0801 	subs.w	r8, r5, #1
 80048ee:	bf49      	itett	mi
 80048f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80048f4:	2300      	movpl	r3, #0
 80048f6:	9305      	strmi	r3, [sp, #20]
 80048f8:	f04f 0800 	movmi.w	r8, #0
 80048fc:	bf58      	it	pl
 80048fe:	9305      	strpl	r3, [sp, #20]
 8004900:	f1ba 0f00 	cmp.w	sl, #0
 8004904:	db3e      	blt.n	8004984 <_dtoa_r+0x224>
 8004906:	2300      	movs	r3, #0
 8004908:	44d0      	add	r8, sl
 800490a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800490e:	9307      	str	r3, [sp, #28]
 8004910:	9b06      	ldr	r3, [sp, #24]
 8004912:	2b09      	cmp	r3, #9
 8004914:	f200 8090 	bhi.w	8004a38 <_dtoa_r+0x2d8>
 8004918:	2b05      	cmp	r3, #5
 800491a:	bfc4      	itt	gt
 800491c:	3b04      	subgt	r3, #4
 800491e:	9306      	strgt	r3, [sp, #24]
 8004920:	9b06      	ldr	r3, [sp, #24]
 8004922:	f1a3 0302 	sub.w	r3, r3, #2
 8004926:	bfcc      	ite	gt
 8004928:	2500      	movgt	r5, #0
 800492a:	2501      	movle	r5, #1
 800492c:	2b03      	cmp	r3, #3
 800492e:	f200 808f 	bhi.w	8004a50 <_dtoa_r+0x2f0>
 8004932:	e8df f003 	tbb	[pc, r3]
 8004936:	7f7d      	.short	0x7f7d
 8004938:	7131      	.short	0x7131
 800493a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800493e:	441d      	add	r5, r3
 8004940:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004944:	2820      	cmp	r0, #32
 8004946:	dd13      	ble.n	8004970 <_dtoa_r+0x210>
 8004948:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800494c:	9b00      	ldr	r3, [sp, #0]
 800494e:	fa08 f800 	lsl.w	r8, r8, r0
 8004952:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004956:	fa23 f000 	lsr.w	r0, r3, r0
 800495a:	ea48 0000 	orr.w	r0, r8, r0
 800495e:	f7fb fdd1 	bl	8000504 <__aeabi_ui2d>
 8004962:	2301      	movs	r3, #1
 8004964:	4682      	mov	sl, r0
 8004966:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800496a:	3d01      	subs	r5, #1
 800496c:	9313      	str	r3, [sp, #76]	; 0x4c
 800496e:	e772      	b.n	8004856 <_dtoa_r+0xf6>
 8004970:	9b00      	ldr	r3, [sp, #0]
 8004972:	f1c0 0020 	rsb	r0, r0, #32
 8004976:	fa03 f000 	lsl.w	r0, r3, r0
 800497a:	e7f0      	b.n	800495e <_dtoa_r+0x1fe>
 800497c:	2301      	movs	r3, #1
 800497e:	e7b1      	b.n	80048e4 <_dtoa_r+0x184>
 8004980:	900f      	str	r0, [sp, #60]	; 0x3c
 8004982:	e7b0      	b.n	80048e6 <_dtoa_r+0x186>
 8004984:	9b05      	ldr	r3, [sp, #20]
 8004986:	eba3 030a 	sub.w	r3, r3, sl
 800498a:	9305      	str	r3, [sp, #20]
 800498c:	f1ca 0300 	rsb	r3, sl, #0
 8004990:	9307      	str	r3, [sp, #28]
 8004992:	2300      	movs	r3, #0
 8004994:	930e      	str	r3, [sp, #56]	; 0x38
 8004996:	e7bb      	b.n	8004910 <_dtoa_r+0x1b0>
 8004998:	2301      	movs	r3, #1
 800499a:	930a      	str	r3, [sp, #40]	; 0x28
 800499c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	dd59      	ble.n	8004a56 <_dtoa_r+0x2f6>
 80049a2:	9302      	str	r3, [sp, #8]
 80049a4:	4699      	mov	r9, r3
 80049a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80049a8:	2200      	movs	r2, #0
 80049aa:	6072      	str	r2, [r6, #4]
 80049ac:	2204      	movs	r2, #4
 80049ae:	f102 0014 	add.w	r0, r2, #20
 80049b2:	4298      	cmp	r0, r3
 80049b4:	6871      	ldr	r1, [r6, #4]
 80049b6:	d953      	bls.n	8004a60 <_dtoa_r+0x300>
 80049b8:	4620      	mov	r0, r4
 80049ba:	f000 fcaa 	bl	8005312 <_Balloc>
 80049be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049c0:	6030      	str	r0, [r6, #0]
 80049c2:	f1b9 0f0e 	cmp.w	r9, #14
 80049c6:	f8d3 b000 	ldr.w	fp, [r3]
 80049ca:	f200 80e6 	bhi.w	8004b9a <_dtoa_r+0x43a>
 80049ce:	2d00      	cmp	r5, #0
 80049d0:	f000 80e3 	beq.w	8004b9a <_dtoa_r+0x43a>
 80049d4:	ed9d 7b00 	vldr	d7, [sp]
 80049d8:	f1ba 0f00 	cmp.w	sl, #0
 80049dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80049e0:	dd74      	ble.n	8004acc <_dtoa_r+0x36c>
 80049e2:	4a2a      	ldr	r2, [pc, #168]	; (8004a8c <_dtoa_r+0x32c>)
 80049e4:	f00a 030f 	and.w	r3, sl, #15
 80049e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80049ec:	ed93 7b00 	vldr	d7, [r3]
 80049f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80049f4:	06f0      	lsls	r0, r6, #27
 80049f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80049fa:	d565      	bpl.n	8004ac8 <_dtoa_r+0x368>
 80049fc:	4b24      	ldr	r3, [pc, #144]	; (8004a90 <_dtoa_r+0x330>)
 80049fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a06:	f7fb ff21 	bl	800084c <__aeabi_ddiv>
 8004a0a:	e9cd 0100 	strd	r0, r1, [sp]
 8004a0e:	f006 060f 	and.w	r6, r6, #15
 8004a12:	2503      	movs	r5, #3
 8004a14:	4f1e      	ldr	r7, [pc, #120]	; (8004a90 <_dtoa_r+0x330>)
 8004a16:	e04c      	b.n	8004ab2 <_dtoa_r+0x352>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a1e:	4453      	add	r3, sl
 8004a20:	f103 0901 	add.w	r9, r3, #1
 8004a24:	9302      	str	r3, [sp, #8]
 8004a26:	464b      	mov	r3, r9
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	bfb8      	it	lt
 8004a2c:	2301      	movlt	r3, #1
 8004a2e:	e7ba      	b.n	80049a6 <_dtoa_r+0x246>
 8004a30:	2300      	movs	r3, #0
 8004a32:	e7b2      	b.n	800499a <_dtoa_r+0x23a>
 8004a34:	2300      	movs	r3, #0
 8004a36:	e7f0      	b.n	8004a1a <_dtoa_r+0x2ba>
 8004a38:	2501      	movs	r5, #1
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	9306      	str	r3, [sp, #24]
 8004a3e:	950a      	str	r5, [sp, #40]	; 0x28
 8004a40:	f04f 33ff 	mov.w	r3, #4294967295
 8004a44:	9302      	str	r3, [sp, #8]
 8004a46:	4699      	mov	r9, r3
 8004a48:	2200      	movs	r2, #0
 8004a4a:	2312      	movs	r3, #18
 8004a4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a4e:	e7aa      	b.n	80049a6 <_dtoa_r+0x246>
 8004a50:	2301      	movs	r3, #1
 8004a52:	930a      	str	r3, [sp, #40]	; 0x28
 8004a54:	e7f4      	b.n	8004a40 <_dtoa_r+0x2e0>
 8004a56:	2301      	movs	r3, #1
 8004a58:	9302      	str	r3, [sp, #8]
 8004a5a:	4699      	mov	r9, r3
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	e7f5      	b.n	8004a4c <_dtoa_r+0x2ec>
 8004a60:	3101      	adds	r1, #1
 8004a62:	6071      	str	r1, [r6, #4]
 8004a64:	0052      	lsls	r2, r2, #1
 8004a66:	e7a2      	b.n	80049ae <_dtoa_r+0x24e>
 8004a68:	636f4361 	.word	0x636f4361
 8004a6c:	3fd287a7 	.word	0x3fd287a7
 8004a70:	8b60c8b3 	.word	0x8b60c8b3
 8004a74:	3fc68a28 	.word	0x3fc68a28
 8004a78:	509f79fb 	.word	0x509f79fb
 8004a7c:	3fd34413 	.word	0x3fd34413
 8004a80:	7ff00000 	.word	0x7ff00000
 8004a84:	08005e4d 	.word	0x08005e4d
 8004a88:	3ff80000 	.word	0x3ff80000
 8004a8c:	08005ea8 	.word	0x08005ea8
 8004a90:	08005e80 	.word	0x08005e80
 8004a94:	08005e79 	.word	0x08005e79
 8004a98:	07f1      	lsls	r1, r6, #31
 8004a9a:	d508      	bpl.n	8004aae <_dtoa_r+0x34e>
 8004a9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aa4:	f7fb fda8 	bl	80005f8 <__aeabi_dmul>
 8004aa8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004aac:	3501      	adds	r5, #1
 8004aae:	1076      	asrs	r6, r6, #1
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	2e00      	cmp	r6, #0
 8004ab4:	d1f0      	bne.n	8004a98 <_dtoa_r+0x338>
 8004ab6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004aba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004abe:	f7fb fec5 	bl	800084c <__aeabi_ddiv>
 8004ac2:	e9cd 0100 	strd	r0, r1, [sp]
 8004ac6:	e01a      	b.n	8004afe <_dtoa_r+0x39e>
 8004ac8:	2502      	movs	r5, #2
 8004aca:	e7a3      	b.n	8004a14 <_dtoa_r+0x2b4>
 8004acc:	f000 80a0 	beq.w	8004c10 <_dtoa_r+0x4b0>
 8004ad0:	f1ca 0600 	rsb	r6, sl, #0
 8004ad4:	4b9f      	ldr	r3, [pc, #636]	; (8004d54 <_dtoa_r+0x5f4>)
 8004ad6:	4fa0      	ldr	r7, [pc, #640]	; (8004d58 <_dtoa_r+0x5f8>)
 8004ad8:	f006 020f 	and.w	r2, r6, #15
 8004adc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ae8:	f7fb fd86 	bl	80005f8 <__aeabi_dmul>
 8004aec:	e9cd 0100 	strd	r0, r1, [sp]
 8004af0:	1136      	asrs	r6, r6, #4
 8004af2:	2300      	movs	r3, #0
 8004af4:	2502      	movs	r5, #2
 8004af6:	2e00      	cmp	r6, #0
 8004af8:	d17f      	bne.n	8004bfa <_dtoa_r+0x49a>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1e1      	bne.n	8004ac2 <_dtoa_r+0x362>
 8004afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 8087 	beq.w	8004c14 <_dtoa_r+0x4b4>
 8004b06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	4b93      	ldr	r3, [pc, #588]	; (8004d5c <_dtoa_r+0x5fc>)
 8004b0e:	4630      	mov	r0, r6
 8004b10:	4639      	mov	r1, r7
 8004b12:	f7fb ffe3 	bl	8000adc <__aeabi_dcmplt>
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d07c      	beq.n	8004c14 <_dtoa_r+0x4b4>
 8004b1a:	f1b9 0f00 	cmp.w	r9, #0
 8004b1e:	d079      	beq.n	8004c14 <_dtoa_r+0x4b4>
 8004b20:	9b02      	ldr	r3, [sp, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	dd35      	ble.n	8004b92 <_dtoa_r+0x432>
 8004b26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004b2a:	9308      	str	r3, [sp, #32]
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	2200      	movs	r2, #0
 8004b30:	4b8b      	ldr	r3, [pc, #556]	; (8004d60 <_dtoa_r+0x600>)
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7fb fd60 	bl	80005f8 <__aeabi_dmul>
 8004b38:	e9cd 0100 	strd	r0, r1, [sp]
 8004b3c:	9f02      	ldr	r7, [sp, #8]
 8004b3e:	3501      	adds	r5, #1
 8004b40:	4628      	mov	r0, r5
 8004b42:	f7fb fcef 	bl	8000524 <__aeabi_i2d>
 8004b46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b4a:	f7fb fd55 	bl	80005f8 <__aeabi_dmul>
 8004b4e:	2200      	movs	r2, #0
 8004b50:	4b84      	ldr	r3, [pc, #528]	; (8004d64 <_dtoa_r+0x604>)
 8004b52:	f7fb fb9b 	bl	800028c <__adddf3>
 8004b56:	4605      	mov	r5, r0
 8004b58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	d15d      	bne.n	8004c1c <_dtoa_r+0x4bc>
 8004b60:	2200      	movs	r2, #0
 8004b62:	4b81      	ldr	r3, [pc, #516]	; (8004d68 <_dtoa_r+0x608>)
 8004b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b68:	f7fb fb8e 	bl	8000288 <__aeabi_dsub>
 8004b6c:	462a      	mov	r2, r5
 8004b6e:	4633      	mov	r3, r6
 8004b70:	e9cd 0100 	strd	r0, r1, [sp]
 8004b74:	f7fb ffd0 	bl	8000b18 <__aeabi_dcmpgt>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	f040 8288 	bne.w	800508e <_dtoa_r+0x92e>
 8004b7e:	462a      	mov	r2, r5
 8004b80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004b84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b88:	f7fb ffa8 	bl	8000adc <__aeabi_dcmplt>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	f040 827c 	bne.w	800508a <_dtoa_r+0x92a>
 8004b92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004b96:	e9cd 2300 	strd	r2, r3, [sp]
 8004b9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f2c0 8150 	blt.w	8004e42 <_dtoa_r+0x6e2>
 8004ba2:	f1ba 0f0e 	cmp.w	sl, #14
 8004ba6:	f300 814c 	bgt.w	8004e42 <_dtoa_r+0x6e2>
 8004baa:	4b6a      	ldr	r3, [pc, #424]	; (8004d54 <_dtoa_r+0x5f4>)
 8004bac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004bb0:	ed93 7b00 	vldr	d7, [r3]
 8004bb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004bbc:	f280 80d8 	bge.w	8004d70 <_dtoa_r+0x610>
 8004bc0:	f1b9 0f00 	cmp.w	r9, #0
 8004bc4:	f300 80d4 	bgt.w	8004d70 <_dtoa_r+0x610>
 8004bc8:	f040 825e 	bne.w	8005088 <_dtoa_r+0x928>
 8004bcc:	2200      	movs	r2, #0
 8004bce:	4b66      	ldr	r3, [pc, #408]	; (8004d68 <_dtoa_r+0x608>)
 8004bd0:	ec51 0b17 	vmov	r0, r1, d7
 8004bd4:	f7fb fd10 	bl	80005f8 <__aeabi_dmul>
 8004bd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bdc:	f7fb ff92 	bl	8000b04 <__aeabi_dcmpge>
 8004be0:	464f      	mov	r7, r9
 8004be2:	464e      	mov	r6, r9
 8004be4:	2800      	cmp	r0, #0
 8004be6:	f040 8234 	bne.w	8005052 <_dtoa_r+0x8f2>
 8004bea:	2331      	movs	r3, #49	; 0x31
 8004bec:	f10b 0501 	add.w	r5, fp, #1
 8004bf0:	f88b 3000 	strb.w	r3, [fp]
 8004bf4:	f10a 0a01 	add.w	sl, sl, #1
 8004bf8:	e22f      	b.n	800505a <_dtoa_r+0x8fa>
 8004bfa:	07f2      	lsls	r2, r6, #31
 8004bfc:	d505      	bpl.n	8004c0a <_dtoa_r+0x4aa>
 8004bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c02:	f7fb fcf9 	bl	80005f8 <__aeabi_dmul>
 8004c06:	3501      	adds	r5, #1
 8004c08:	2301      	movs	r3, #1
 8004c0a:	1076      	asrs	r6, r6, #1
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	e772      	b.n	8004af6 <_dtoa_r+0x396>
 8004c10:	2502      	movs	r5, #2
 8004c12:	e774      	b.n	8004afe <_dtoa_r+0x39e>
 8004c14:	f8cd a020 	str.w	sl, [sp, #32]
 8004c18:	464f      	mov	r7, r9
 8004c1a:	e791      	b.n	8004b40 <_dtoa_r+0x3e0>
 8004c1c:	4b4d      	ldr	r3, [pc, #308]	; (8004d54 <_dtoa_r+0x5f4>)
 8004c1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d047      	beq.n	8004cbc <_dtoa_r+0x55c>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	2000      	movs	r0, #0
 8004c32:	494e      	ldr	r1, [pc, #312]	; (8004d6c <_dtoa_r+0x60c>)
 8004c34:	f7fb fe0a 	bl	800084c <__aeabi_ddiv>
 8004c38:	462a      	mov	r2, r5
 8004c3a:	4633      	mov	r3, r6
 8004c3c:	f7fb fb24 	bl	8000288 <__aeabi_dsub>
 8004c40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004c44:	465d      	mov	r5, fp
 8004c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c4a:	f7fb ff85 	bl	8000b58 <__aeabi_d2iz>
 8004c4e:	4606      	mov	r6, r0
 8004c50:	f7fb fc68 	bl	8000524 <__aeabi_i2d>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c5c:	f7fb fb14 	bl	8000288 <__aeabi_dsub>
 8004c60:	3630      	adds	r6, #48	; 0x30
 8004c62:	f805 6b01 	strb.w	r6, [r5], #1
 8004c66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c6a:	e9cd 0100 	strd	r0, r1, [sp]
 8004c6e:	f7fb ff35 	bl	8000adc <__aeabi_dcmplt>
 8004c72:	2800      	cmp	r0, #0
 8004c74:	d163      	bne.n	8004d3e <_dtoa_r+0x5de>
 8004c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	4937      	ldr	r1, [pc, #220]	; (8004d5c <_dtoa_r+0x5fc>)
 8004c7e:	f7fb fb03 	bl	8000288 <__aeabi_dsub>
 8004c82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c86:	f7fb ff29 	bl	8000adc <__aeabi_dcmplt>
 8004c8a:	2800      	cmp	r0, #0
 8004c8c:	f040 80b7 	bne.w	8004dfe <_dtoa_r+0x69e>
 8004c90:	eba5 030b 	sub.w	r3, r5, fp
 8004c94:	429f      	cmp	r7, r3
 8004c96:	f77f af7c 	ble.w	8004b92 <_dtoa_r+0x432>
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	4b30      	ldr	r3, [pc, #192]	; (8004d60 <_dtoa_r+0x600>)
 8004c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ca2:	f7fb fca9 	bl	80005f8 <__aeabi_dmul>
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004cac:	4b2c      	ldr	r3, [pc, #176]	; (8004d60 <_dtoa_r+0x600>)
 8004cae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cb2:	f7fb fca1 	bl	80005f8 <__aeabi_dmul>
 8004cb6:	e9cd 0100 	strd	r0, r1, [sp]
 8004cba:	e7c4      	b.n	8004c46 <_dtoa_r+0x4e6>
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	4633      	mov	r3, r6
 8004cc0:	f7fb fc9a 	bl	80005f8 <__aeabi_dmul>
 8004cc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004cc8:	eb0b 0507 	add.w	r5, fp, r7
 8004ccc:	465e      	mov	r6, fp
 8004cce:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cd2:	f7fb ff41 	bl	8000b58 <__aeabi_d2iz>
 8004cd6:	4607      	mov	r7, r0
 8004cd8:	f7fb fc24 	bl	8000524 <__aeabi_i2d>
 8004cdc:	3730      	adds	r7, #48	; 0x30
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ce6:	f7fb facf 	bl	8000288 <__aeabi_dsub>
 8004cea:	f806 7b01 	strb.w	r7, [r6], #1
 8004cee:	42ae      	cmp	r6, r5
 8004cf0:	e9cd 0100 	strd	r0, r1, [sp]
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	d126      	bne.n	8004d48 <_dtoa_r+0x5e8>
 8004cfa:	4b1c      	ldr	r3, [pc, #112]	; (8004d6c <_dtoa_r+0x60c>)
 8004cfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d00:	f7fb fac4 	bl	800028c <__adddf3>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d0c:	f7fb ff04 	bl	8000b18 <__aeabi_dcmpgt>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	d174      	bne.n	8004dfe <_dtoa_r+0x69e>
 8004d14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d18:	2000      	movs	r0, #0
 8004d1a:	4914      	ldr	r1, [pc, #80]	; (8004d6c <_dtoa_r+0x60c>)
 8004d1c:	f7fb fab4 	bl	8000288 <__aeabi_dsub>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d28:	f7fb fed8 	bl	8000adc <__aeabi_dcmplt>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f43f af30 	beq.w	8004b92 <_dtoa_r+0x432>
 8004d32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d36:	2b30      	cmp	r3, #48	; 0x30
 8004d38:	f105 32ff 	add.w	r2, r5, #4294967295
 8004d3c:	d002      	beq.n	8004d44 <_dtoa_r+0x5e4>
 8004d3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004d42:	e04a      	b.n	8004dda <_dtoa_r+0x67a>
 8004d44:	4615      	mov	r5, r2
 8004d46:	e7f4      	b.n	8004d32 <_dtoa_r+0x5d2>
 8004d48:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <_dtoa_r+0x600>)
 8004d4a:	f7fb fc55 	bl	80005f8 <__aeabi_dmul>
 8004d4e:	e9cd 0100 	strd	r0, r1, [sp]
 8004d52:	e7bc      	b.n	8004cce <_dtoa_r+0x56e>
 8004d54:	08005ea8 	.word	0x08005ea8
 8004d58:	08005e80 	.word	0x08005e80
 8004d5c:	3ff00000 	.word	0x3ff00000
 8004d60:	40240000 	.word	0x40240000
 8004d64:	401c0000 	.word	0x401c0000
 8004d68:	40140000 	.word	0x40140000
 8004d6c:	3fe00000 	.word	0x3fe00000
 8004d70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d74:	465d      	mov	r5, fp
 8004d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	4639      	mov	r1, r7
 8004d7e:	f7fb fd65 	bl	800084c <__aeabi_ddiv>
 8004d82:	f7fb fee9 	bl	8000b58 <__aeabi_d2iz>
 8004d86:	4680      	mov	r8, r0
 8004d88:	f7fb fbcc 	bl	8000524 <__aeabi_i2d>
 8004d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d90:	f7fb fc32 	bl	80005f8 <__aeabi_dmul>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4630      	mov	r0, r6
 8004d9a:	4639      	mov	r1, r7
 8004d9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004da0:	f7fb fa72 	bl	8000288 <__aeabi_dsub>
 8004da4:	f805 6b01 	strb.w	r6, [r5], #1
 8004da8:	eba5 060b 	sub.w	r6, r5, fp
 8004dac:	45b1      	cmp	r9, r6
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	d139      	bne.n	8004e28 <_dtoa_r+0x6c8>
 8004db4:	f7fb fa6a 	bl	800028c <__adddf3>
 8004db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dbc:	4606      	mov	r6, r0
 8004dbe:	460f      	mov	r7, r1
 8004dc0:	f7fb feaa 	bl	8000b18 <__aeabi_dcmpgt>
 8004dc4:	b9c8      	cbnz	r0, 8004dfa <_dtoa_r+0x69a>
 8004dc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dca:	4630      	mov	r0, r6
 8004dcc:	4639      	mov	r1, r7
 8004dce:	f7fb fe7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dd2:	b110      	cbz	r0, 8004dda <_dtoa_r+0x67a>
 8004dd4:	f018 0f01 	tst.w	r8, #1
 8004dd8:	d10f      	bne.n	8004dfa <_dtoa_r+0x69a>
 8004dda:	9904      	ldr	r1, [sp, #16]
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f000 facc 	bl	800537a <_Bfree>
 8004de2:	2300      	movs	r3, #0
 8004de4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004de6:	702b      	strb	r3, [r5, #0]
 8004de8:	f10a 0301 	add.w	r3, sl, #1
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8241 	beq.w	8005278 <_dtoa_r+0xb18>
 8004df6:	601d      	str	r5, [r3, #0]
 8004df8:	e23e      	b.n	8005278 <_dtoa_r+0xb18>
 8004dfa:	f8cd a020 	str.w	sl, [sp, #32]
 8004dfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e02:	2a39      	cmp	r2, #57	; 0x39
 8004e04:	f105 33ff 	add.w	r3, r5, #4294967295
 8004e08:	d108      	bne.n	8004e1c <_dtoa_r+0x6bc>
 8004e0a:	459b      	cmp	fp, r3
 8004e0c:	d10a      	bne.n	8004e24 <_dtoa_r+0x6c4>
 8004e0e:	9b08      	ldr	r3, [sp, #32]
 8004e10:	3301      	adds	r3, #1
 8004e12:	9308      	str	r3, [sp, #32]
 8004e14:	2330      	movs	r3, #48	; 0x30
 8004e16:	f88b 3000 	strb.w	r3, [fp]
 8004e1a:	465b      	mov	r3, fp
 8004e1c:	781a      	ldrb	r2, [r3, #0]
 8004e1e:	3201      	adds	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	e78c      	b.n	8004d3e <_dtoa_r+0x5de>
 8004e24:	461d      	mov	r5, r3
 8004e26:	e7ea      	b.n	8004dfe <_dtoa_r+0x69e>
 8004e28:	2200      	movs	r2, #0
 8004e2a:	4b9b      	ldr	r3, [pc, #620]	; (8005098 <_dtoa_r+0x938>)
 8004e2c:	f7fb fbe4 	bl	80005f8 <__aeabi_dmul>
 8004e30:	2200      	movs	r2, #0
 8004e32:	2300      	movs	r3, #0
 8004e34:	4606      	mov	r6, r0
 8004e36:	460f      	mov	r7, r1
 8004e38:	f7fb fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d09a      	beq.n	8004d76 <_dtoa_r+0x616>
 8004e40:	e7cb      	b.n	8004dda <_dtoa_r+0x67a>
 8004e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e44:	2a00      	cmp	r2, #0
 8004e46:	f000 808b 	beq.w	8004f60 <_dtoa_r+0x800>
 8004e4a:	9a06      	ldr	r2, [sp, #24]
 8004e4c:	2a01      	cmp	r2, #1
 8004e4e:	dc6e      	bgt.n	8004f2e <_dtoa_r+0x7ce>
 8004e50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e52:	2a00      	cmp	r2, #0
 8004e54:	d067      	beq.n	8004f26 <_dtoa_r+0x7c6>
 8004e56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e5a:	9f07      	ldr	r7, [sp, #28]
 8004e5c:	9d05      	ldr	r5, [sp, #20]
 8004e5e:	9a05      	ldr	r2, [sp, #20]
 8004e60:	2101      	movs	r1, #1
 8004e62:	441a      	add	r2, r3
 8004e64:	4620      	mov	r0, r4
 8004e66:	9205      	str	r2, [sp, #20]
 8004e68:	4498      	add	r8, r3
 8004e6a:	f000 fb26 	bl	80054ba <__i2b>
 8004e6e:	4606      	mov	r6, r0
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	dd0c      	ble.n	8004e8e <_dtoa_r+0x72e>
 8004e74:	f1b8 0f00 	cmp.w	r8, #0
 8004e78:	dd09      	ble.n	8004e8e <_dtoa_r+0x72e>
 8004e7a:	4545      	cmp	r5, r8
 8004e7c:	9a05      	ldr	r2, [sp, #20]
 8004e7e:	462b      	mov	r3, r5
 8004e80:	bfa8      	it	ge
 8004e82:	4643      	movge	r3, r8
 8004e84:	1ad2      	subs	r2, r2, r3
 8004e86:	9205      	str	r2, [sp, #20]
 8004e88:	1aed      	subs	r5, r5, r3
 8004e8a:	eba8 0803 	sub.w	r8, r8, r3
 8004e8e:	9b07      	ldr	r3, [sp, #28]
 8004e90:	b1eb      	cbz	r3, 8004ece <_dtoa_r+0x76e>
 8004e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d067      	beq.n	8004f68 <_dtoa_r+0x808>
 8004e98:	b18f      	cbz	r7, 8004ebe <_dtoa_r+0x75e>
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	463a      	mov	r2, r7
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f000 fbaa 	bl	80055f8 <__pow5mult>
 8004ea4:	9a04      	ldr	r2, [sp, #16]
 8004ea6:	4601      	mov	r1, r0
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f000 fb0e 	bl	80054cc <__multiply>
 8004eb0:	9904      	ldr	r1, [sp, #16]
 8004eb2:	9008      	str	r0, [sp, #32]
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f000 fa60 	bl	800537a <_Bfree>
 8004eba:	9b08      	ldr	r3, [sp, #32]
 8004ebc:	9304      	str	r3, [sp, #16]
 8004ebe:	9b07      	ldr	r3, [sp, #28]
 8004ec0:	1bda      	subs	r2, r3, r7
 8004ec2:	d004      	beq.n	8004ece <_dtoa_r+0x76e>
 8004ec4:	9904      	ldr	r1, [sp, #16]
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	f000 fb96 	bl	80055f8 <__pow5mult>
 8004ecc:	9004      	str	r0, [sp, #16]
 8004ece:	2101      	movs	r1, #1
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 faf2 	bl	80054ba <__i2b>
 8004ed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ed8:	4607      	mov	r7, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 81d0 	beq.w	8005280 <_dtoa_r+0xb20>
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4601      	mov	r1, r0
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f000 fb87 	bl	80055f8 <__pow5mult>
 8004eea:	9b06      	ldr	r3, [sp, #24]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	4607      	mov	r7, r0
 8004ef0:	dc40      	bgt.n	8004f74 <_dtoa_r+0x814>
 8004ef2:	9b00      	ldr	r3, [sp, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d139      	bne.n	8004f6c <_dtoa_r+0x80c>
 8004ef8:	9b01      	ldr	r3, [sp, #4]
 8004efa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d136      	bne.n	8004f70 <_dtoa_r+0x810>
 8004f02:	9b01      	ldr	r3, [sp, #4]
 8004f04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f08:	0d1b      	lsrs	r3, r3, #20
 8004f0a:	051b      	lsls	r3, r3, #20
 8004f0c:	b12b      	cbz	r3, 8004f1a <_dtoa_r+0x7ba>
 8004f0e:	9b05      	ldr	r3, [sp, #20]
 8004f10:	3301      	adds	r3, #1
 8004f12:	9305      	str	r3, [sp, #20]
 8004f14:	f108 0801 	add.w	r8, r8, #1
 8004f18:	2301      	movs	r3, #1
 8004f1a:	9307      	str	r3, [sp, #28]
 8004f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d12a      	bne.n	8004f78 <_dtoa_r+0x818>
 8004f22:	2001      	movs	r0, #1
 8004f24:	e030      	b.n	8004f88 <_dtoa_r+0x828>
 8004f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f2c:	e795      	b.n	8004e5a <_dtoa_r+0x6fa>
 8004f2e:	9b07      	ldr	r3, [sp, #28]
 8004f30:	f109 37ff 	add.w	r7, r9, #4294967295
 8004f34:	42bb      	cmp	r3, r7
 8004f36:	bfbf      	itttt	lt
 8004f38:	9b07      	ldrlt	r3, [sp, #28]
 8004f3a:	9707      	strlt	r7, [sp, #28]
 8004f3c:	1afa      	sublt	r2, r7, r3
 8004f3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004f40:	bfbb      	ittet	lt
 8004f42:	189b      	addlt	r3, r3, r2
 8004f44:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004f46:	1bdf      	subge	r7, r3, r7
 8004f48:	2700      	movlt	r7, #0
 8004f4a:	f1b9 0f00 	cmp.w	r9, #0
 8004f4e:	bfb5      	itete	lt
 8004f50:	9b05      	ldrlt	r3, [sp, #20]
 8004f52:	9d05      	ldrge	r5, [sp, #20]
 8004f54:	eba3 0509 	sublt.w	r5, r3, r9
 8004f58:	464b      	movge	r3, r9
 8004f5a:	bfb8      	it	lt
 8004f5c:	2300      	movlt	r3, #0
 8004f5e:	e77e      	b.n	8004e5e <_dtoa_r+0x6fe>
 8004f60:	9f07      	ldr	r7, [sp, #28]
 8004f62:	9d05      	ldr	r5, [sp, #20]
 8004f64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004f66:	e783      	b.n	8004e70 <_dtoa_r+0x710>
 8004f68:	9a07      	ldr	r2, [sp, #28]
 8004f6a:	e7ab      	b.n	8004ec4 <_dtoa_r+0x764>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	e7d4      	b.n	8004f1a <_dtoa_r+0x7ba>
 8004f70:	9b00      	ldr	r3, [sp, #0]
 8004f72:	e7d2      	b.n	8004f1a <_dtoa_r+0x7ba>
 8004f74:	2300      	movs	r3, #0
 8004f76:	9307      	str	r3, [sp, #28]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004f7e:	6918      	ldr	r0, [r3, #16]
 8004f80:	f000 fa4d 	bl	800541e <__hi0bits>
 8004f84:	f1c0 0020 	rsb	r0, r0, #32
 8004f88:	4440      	add	r0, r8
 8004f8a:	f010 001f 	ands.w	r0, r0, #31
 8004f8e:	d047      	beq.n	8005020 <_dtoa_r+0x8c0>
 8004f90:	f1c0 0320 	rsb	r3, r0, #32
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	dd3b      	ble.n	8005010 <_dtoa_r+0x8b0>
 8004f98:	9b05      	ldr	r3, [sp, #20]
 8004f9a:	f1c0 001c 	rsb	r0, r0, #28
 8004f9e:	4403      	add	r3, r0
 8004fa0:	9305      	str	r3, [sp, #20]
 8004fa2:	4405      	add	r5, r0
 8004fa4:	4480      	add	r8, r0
 8004fa6:	9b05      	ldr	r3, [sp, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	dd05      	ble.n	8004fb8 <_dtoa_r+0x858>
 8004fac:	461a      	mov	r2, r3
 8004fae:	9904      	ldr	r1, [sp, #16]
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f000 fb6f 	bl	8005694 <__lshift>
 8004fb6:	9004      	str	r0, [sp, #16]
 8004fb8:	f1b8 0f00 	cmp.w	r8, #0
 8004fbc:	dd05      	ble.n	8004fca <_dtoa_r+0x86a>
 8004fbe:	4639      	mov	r1, r7
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 fb66 	bl	8005694 <__lshift>
 8004fc8:	4607      	mov	r7, r0
 8004fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fcc:	b353      	cbz	r3, 8005024 <_dtoa_r+0x8c4>
 8004fce:	4639      	mov	r1, r7
 8004fd0:	9804      	ldr	r0, [sp, #16]
 8004fd2:	f000 fbb3 	bl	800573c <__mcmp>
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	da24      	bge.n	8005024 <_dtoa_r+0x8c4>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	220a      	movs	r2, #10
 8004fde:	9904      	ldr	r1, [sp, #16]
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f000 f9e1 	bl	80053a8 <__multadd>
 8004fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe8:	9004      	str	r0, [sp, #16]
 8004fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 814d 	beq.w	800528e <_dtoa_r+0xb2e>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	220a      	movs	r2, #10
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f000 f9d4 	bl	80053a8 <__multadd>
 8005000:	9b02      	ldr	r3, [sp, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	4606      	mov	r6, r0
 8005006:	dc4f      	bgt.n	80050a8 <_dtoa_r+0x948>
 8005008:	9b06      	ldr	r3, [sp, #24]
 800500a:	2b02      	cmp	r3, #2
 800500c:	dd4c      	ble.n	80050a8 <_dtoa_r+0x948>
 800500e:	e011      	b.n	8005034 <_dtoa_r+0x8d4>
 8005010:	d0c9      	beq.n	8004fa6 <_dtoa_r+0x846>
 8005012:	9a05      	ldr	r2, [sp, #20]
 8005014:	331c      	adds	r3, #28
 8005016:	441a      	add	r2, r3
 8005018:	9205      	str	r2, [sp, #20]
 800501a:	441d      	add	r5, r3
 800501c:	4498      	add	r8, r3
 800501e:	e7c2      	b.n	8004fa6 <_dtoa_r+0x846>
 8005020:	4603      	mov	r3, r0
 8005022:	e7f6      	b.n	8005012 <_dtoa_r+0x8b2>
 8005024:	f1b9 0f00 	cmp.w	r9, #0
 8005028:	dc38      	bgt.n	800509c <_dtoa_r+0x93c>
 800502a:	9b06      	ldr	r3, [sp, #24]
 800502c:	2b02      	cmp	r3, #2
 800502e:	dd35      	ble.n	800509c <_dtoa_r+0x93c>
 8005030:	f8cd 9008 	str.w	r9, [sp, #8]
 8005034:	9b02      	ldr	r3, [sp, #8]
 8005036:	b963      	cbnz	r3, 8005052 <_dtoa_r+0x8f2>
 8005038:	4639      	mov	r1, r7
 800503a:	2205      	movs	r2, #5
 800503c:	4620      	mov	r0, r4
 800503e:	f000 f9b3 	bl	80053a8 <__multadd>
 8005042:	4601      	mov	r1, r0
 8005044:	4607      	mov	r7, r0
 8005046:	9804      	ldr	r0, [sp, #16]
 8005048:	f000 fb78 	bl	800573c <__mcmp>
 800504c:	2800      	cmp	r0, #0
 800504e:	f73f adcc 	bgt.w	8004bea <_dtoa_r+0x48a>
 8005052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005054:	465d      	mov	r5, fp
 8005056:	ea6f 0a03 	mvn.w	sl, r3
 800505a:	f04f 0900 	mov.w	r9, #0
 800505e:	4639      	mov	r1, r7
 8005060:	4620      	mov	r0, r4
 8005062:	f000 f98a 	bl	800537a <_Bfree>
 8005066:	2e00      	cmp	r6, #0
 8005068:	f43f aeb7 	beq.w	8004dda <_dtoa_r+0x67a>
 800506c:	f1b9 0f00 	cmp.w	r9, #0
 8005070:	d005      	beq.n	800507e <_dtoa_r+0x91e>
 8005072:	45b1      	cmp	r9, r6
 8005074:	d003      	beq.n	800507e <_dtoa_r+0x91e>
 8005076:	4649      	mov	r1, r9
 8005078:	4620      	mov	r0, r4
 800507a:	f000 f97e 	bl	800537a <_Bfree>
 800507e:	4631      	mov	r1, r6
 8005080:	4620      	mov	r0, r4
 8005082:	f000 f97a 	bl	800537a <_Bfree>
 8005086:	e6a8      	b.n	8004dda <_dtoa_r+0x67a>
 8005088:	2700      	movs	r7, #0
 800508a:	463e      	mov	r6, r7
 800508c:	e7e1      	b.n	8005052 <_dtoa_r+0x8f2>
 800508e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005092:	463e      	mov	r6, r7
 8005094:	e5a9      	b.n	8004bea <_dtoa_r+0x48a>
 8005096:	bf00      	nop
 8005098:	40240000 	.word	0x40240000
 800509c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800509e:	f8cd 9008 	str.w	r9, [sp, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 80fa 	beq.w	800529c <_dtoa_r+0xb3c>
 80050a8:	2d00      	cmp	r5, #0
 80050aa:	dd05      	ble.n	80050b8 <_dtoa_r+0x958>
 80050ac:	4631      	mov	r1, r6
 80050ae:	462a      	mov	r2, r5
 80050b0:	4620      	mov	r0, r4
 80050b2:	f000 faef 	bl	8005694 <__lshift>
 80050b6:	4606      	mov	r6, r0
 80050b8:	9b07      	ldr	r3, [sp, #28]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d04c      	beq.n	8005158 <_dtoa_r+0x9f8>
 80050be:	6871      	ldr	r1, [r6, #4]
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 f926 	bl	8005312 <_Balloc>
 80050c6:	6932      	ldr	r2, [r6, #16]
 80050c8:	3202      	adds	r2, #2
 80050ca:	4605      	mov	r5, r0
 80050cc:	0092      	lsls	r2, r2, #2
 80050ce:	f106 010c 	add.w	r1, r6, #12
 80050d2:	300c      	adds	r0, #12
 80050d4:	f000 f912 	bl	80052fc <memcpy>
 80050d8:	2201      	movs	r2, #1
 80050da:	4629      	mov	r1, r5
 80050dc:	4620      	mov	r0, r4
 80050de:	f000 fad9 	bl	8005694 <__lshift>
 80050e2:	9b00      	ldr	r3, [sp, #0]
 80050e4:	f8cd b014 	str.w	fp, [sp, #20]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	46b1      	mov	r9, r6
 80050ee:	9307      	str	r3, [sp, #28]
 80050f0:	4606      	mov	r6, r0
 80050f2:	4639      	mov	r1, r7
 80050f4:	9804      	ldr	r0, [sp, #16]
 80050f6:	f7ff faa7 	bl	8004648 <quorem>
 80050fa:	4649      	mov	r1, r9
 80050fc:	4605      	mov	r5, r0
 80050fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005102:	9804      	ldr	r0, [sp, #16]
 8005104:	f000 fb1a 	bl	800573c <__mcmp>
 8005108:	4632      	mov	r2, r6
 800510a:	9000      	str	r0, [sp, #0]
 800510c:	4639      	mov	r1, r7
 800510e:	4620      	mov	r0, r4
 8005110:	f000 fb2e 	bl	8005770 <__mdiff>
 8005114:	68c3      	ldr	r3, [r0, #12]
 8005116:	4602      	mov	r2, r0
 8005118:	bb03      	cbnz	r3, 800515c <_dtoa_r+0x9fc>
 800511a:	4601      	mov	r1, r0
 800511c:	9008      	str	r0, [sp, #32]
 800511e:	9804      	ldr	r0, [sp, #16]
 8005120:	f000 fb0c 	bl	800573c <__mcmp>
 8005124:	9a08      	ldr	r2, [sp, #32]
 8005126:	4603      	mov	r3, r0
 8005128:	4611      	mov	r1, r2
 800512a:	4620      	mov	r0, r4
 800512c:	9308      	str	r3, [sp, #32]
 800512e:	f000 f924 	bl	800537a <_Bfree>
 8005132:	9b08      	ldr	r3, [sp, #32]
 8005134:	b9a3      	cbnz	r3, 8005160 <_dtoa_r+0xa00>
 8005136:	9a06      	ldr	r2, [sp, #24]
 8005138:	b992      	cbnz	r2, 8005160 <_dtoa_r+0xa00>
 800513a:	9a07      	ldr	r2, [sp, #28]
 800513c:	b982      	cbnz	r2, 8005160 <_dtoa_r+0xa00>
 800513e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005142:	d029      	beq.n	8005198 <_dtoa_r+0xa38>
 8005144:	9b00      	ldr	r3, [sp, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	dd01      	ble.n	800514e <_dtoa_r+0x9ee>
 800514a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800514e:	9b05      	ldr	r3, [sp, #20]
 8005150:	1c5d      	adds	r5, r3, #1
 8005152:	f883 8000 	strb.w	r8, [r3]
 8005156:	e782      	b.n	800505e <_dtoa_r+0x8fe>
 8005158:	4630      	mov	r0, r6
 800515a:	e7c2      	b.n	80050e2 <_dtoa_r+0x982>
 800515c:	2301      	movs	r3, #1
 800515e:	e7e3      	b.n	8005128 <_dtoa_r+0x9c8>
 8005160:	9a00      	ldr	r2, [sp, #0]
 8005162:	2a00      	cmp	r2, #0
 8005164:	db04      	blt.n	8005170 <_dtoa_r+0xa10>
 8005166:	d125      	bne.n	80051b4 <_dtoa_r+0xa54>
 8005168:	9a06      	ldr	r2, [sp, #24]
 800516a:	bb1a      	cbnz	r2, 80051b4 <_dtoa_r+0xa54>
 800516c:	9a07      	ldr	r2, [sp, #28]
 800516e:	bb0a      	cbnz	r2, 80051b4 <_dtoa_r+0xa54>
 8005170:	2b00      	cmp	r3, #0
 8005172:	ddec      	ble.n	800514e <_dtoa_r+0x9ee>
 8005174:	2201      	movs	r2, #1
 8005176:	9904      	ldr	r1, [sp, #16]
 8005178:	4620      	mov	r0, r4
 800517a:	f000 fa8b 	bl	8005694 <__lshift>
 800517e:	4639      	mov	r1, r7
 8005180:	9004      	str	r0, [sp, #16]
 8005182:	f000 fadb 	bl	800573c <__mcmp>
 8005186:	2800      	cmp	r0, #0
 8005188:	dc03      	bgt.n	8005192 <_dtoa_r+0xa32>
 800518a:	d1e0      	bne.n	800514e <_dtoa_r+0x9ee>
 800518c:	f018 0f01 	tst.w	r8, #1
 8005190:	d0dd      	beq.n	800514e <_dtoa_r+0x9ee>
 8005192:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005196:	d1d8      	bne.n	800514a <_dtoa_r+0x9ea>
 8005198:	9b05      	ldr	r3, [sp, #20]
 800519a:	9a05      	ldr	r2, [sp, #20]
 800519c:	1c5d      	adds	r5, r3, #1
 800519e:	2339      	movs	r3, #57	; 0x39
 80051a0:	7013      	strb	r3, [r2, #0]
 80051a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051a6:	2b39      	cmp	r3, #57	; 0x39
 80051a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80051ac:	d04f      	beq.n	800524e <_dtoa_r+0xaee>
 80051ae:	3301      	adds	r3, #1
 80051b0:	7013      	strb	r3, [r2, #0]
 80051b2:	e754      	b.n	800505e <_dtoa_r+0x8fe>
 80051b4:	9a05      	ldr	r2, [sp, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f102 0501 	add.w	r5, r2, #1
 80051bc:	dd06      	ble.n	80051cc <_dtoa_r+0xa6c>
 80051be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80051c2:	d0e9      	beq.n	8005198 <_dtoa_r+0xa38>
 80051c4:	f108 0801 	add.w	r8, r8, #1
 80051c8:	9b05      	ldr	r3, [sp, #20]
 80051ca:	e7c2      	b.n	8005152 <_dtoa_r+0x9f2>
 80051cc:	9a02      	ldr	r2, [sp, #8]
 80051ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80051d2:	eba5 030b 	sub.w	r3, r5, fp
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d021      	beq.n	800521e <_dtoa_r+0xabe>
 80051da:	2300      	movs	r3, #0
 80051dc:	220a      	movs	r2, #10
 80051de:	9904      	ldr	r1, [sp, #16]
 80051e0:	4620      	mov	r0, r4
 80051e2:	f000 f8e1 	bl	80053a8 <__multadd>
 80051e6:	45b1      	cmp	r9, r6
 80051e8:	9004      	str	r0, [sp, #16]
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	f04f 020a 	mov.w	r2, #10
 80051f2:	4649      	mov	r1, r9
 80051f4:	4620      	mov	r0, r4
 80051f6:	d105      	bne.n	8005204 <_dtoa_r+0xaa4>
 80051f8:	f000 f8d6 	bl	80053a8 <__multadd>
 80051fc:	4681      	mov	r9, r0
 80051fe:	4606      	mov	r6, r0
 8005200:	9505      	str	r5, [sp, #20]
 8005202:	e776      	b.n	80050f2 <_dtoa_r+0x992>
 8005204:	f000 f8d0 	bl	80053a8 <__multadd>
 8005208:	4631      	mov	r1, r6
 800520a:	4681      	mov	r9, r0
 800520c:	2300      	movs	r3, #0
 800520e:	220a      	movs	r2, #10
 8005210:	4620      	mov	r0, r4
 8005212:	f000 f8c9 	bl	80053a8 <__multadd>
 8005216:	4606      	mov	r6, r0
 8005218:	e7f2      	b.n	8005200 <_dtoa_r+0xaa0>
 800521a:	f04f 0900 	mov.w	r9, #0
 800521e:	2201      	movs	r2, #1
 8005220:	9904      	ldr	r1, [sp, #16]
 8005222:	4620      	mov	r0, r4
 8005224:	f000 fa36 	bl	8005694 <__lshift>
 8005228:	4639      	mov	r1, r7
 800522a:	9004      	str	r0, [sp, #16]
 800522c:	f000 fa86 	bl	800573c <__mcmp>
 8005230:	2800      	cmp	r0, #0
 8005232:	dcb6      	bgt.n	80051a2 <_dtoa_r+0xa42>
 8005234:	d102      	bne.n	800523c <_dtoa_r+0xadc>
 8005236:	f018 0f01 	tst.w	r8, #1
 800523a:	d1b2      	bne.n	80051a2 <_dtoa_r+0xa42>
 800523c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005240:	2b30      	cmp	r3, #48	; 0x30
 8005242:	f105 32ff 	add.w	r2, r5, #4294967295
 8005246:	f47f af0a 	bne.w	800505e <_dtoa_r+0x8fe>
 800524a:	4615      	mov	r5, r2
 800524c:	e7f6      	b.n	800523c <_dtoa_r+0xadc>
 800524e:	4593      	cmp	fp, r2
 8005250:	d105      	bne.n	800525e <_dtoa_r+0xafe>
 8005252:	2331      	movs	r3, #49	; 0x31
 8005254:	f10a 0a01 	add.w	sl, sl, #1
 8005258:	f88b 3000 	strb.w	r3, [fp]
 800525c:	e6ff      	b.n	800505e <_dtoa_r+0x8fe>
 800525e:	4615      	mov	r5, r2
 8005260:	e79f      	b.n	80051a2 <_dtoa_r+0xa42>
 8005262:	f8df b064 	ldr.w	fp, [pc, #100]	; 80052c8 <_dtoa_r+0xb68>
 8005266:	e007      	b.n	8005278 <_dtoa_r+0xb18>
 8005268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800526a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80052cc <_dtoa_r+0xb6c>
 800526e:	b11b      	cbz	r3, 8005278 <_dtoa_r+0xb18>
 8005270:	f10b 0308 	add.w	r3, fp, #8
 8005274:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	4658      	mov	r0, fp
 800527a:	b017      	add	sp, #92	; 0x5c
 800527c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005280:	9b06      	ldr	r3, [sp, #24]
 8005282:	2b01      	cmp	r3, #1
 8005284:	f77f ae35 	ble.w	8004ef2 <_dtoa_r+0x792>
 8005288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800528a:	9307      	str	r3, [sp, #28]
 800528c:	e649      	b.n	8004f22 <_dtoa_r+0x7c2>
 800528e:	9b02      	ldr	r3, [sp, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	dc03      	bgt.n	800529c <_dtoa_r+0xb3c>
 8005294:	9b06      	ldr	r3, [sp, #24]
 8005296:	2b02      	cmp	r3, #2
 8005298:	f73f aecc 	bgt.w	8005034 <_dtoa_r+0x8d4>
 800529c:	465d      	mov	r5, fp
 800529e:	4639      	mov	r1, r7
 80052a0:	9804      	ldr	r0, [sp, #16]
 80052a2:	f7ff f9d1 	bl	8004648 <quorem>
 80052a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80052aa:	f805 8b01 	strb.w	r8, [r5], #1
 80052ae:	9a02      	ldr	r2, [sp, #8]
 80052b0:	eba5 030b 	sub.w	r3, r5, fp
 80052b4:	429a      	cmp	r2, r3
 80052b6:	ddb0      	ble.n	800521a <_dtoa_r+0xaba>
 80052b8:	2300      	movs	r3, #0
 80052ba:	220a      	movs	r2, #10
 80052bc:	9904      	ldr	r1, [sp, #16]
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 f872 	bl	80053a8 <__multadd>
 80052c4:	9004      	str	r0, [sp, #16]
 80052c6:	e7ea      	b.n	800529e <_dtoa_r+0xb3e>
 80052c8:	08005e4c 	.word	0x08005e4c
 80052cc:	08005e70 	.word	0x08005e70

080052d0 <_localeconv_r>:
 80052d0:	4b04      	ldr	r3, [pc, #16]	; (80052e4 <_localeconv_r+0x14>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6a18      	ldr	r0, [r3, #32]
 80052d6:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <_localeconv_r+0x18>)
 80052d8:	2800      	cmp	r0, #0
 80052da:	bf08      	it	eq
 80052dc:	4618      	moveq	r0, r3
 80052de:	30f0      	adds	r0, #240	; 0xf0
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	2000000c 	.word	0x2000000c
 80052e8:	20000070 	.word	0x20000070

080052ec <malloc>:
 80052ec:	4b02      	ldr	r3, [pc, #8]	; (80052f8 <malloc+0xc>)
 80052ee:	4601      	mov	r1, r0
 80052f0:	6818      	ldr	r0, [r3, #0]
 80052f2:	f000 bb45 	b.w	8005980 <_malloc_r>
 80052f6:	bf00      	nop
 80052f8:	2000000c 	.word	0x2000000c

080052fc <memcpy>:
 80052fc:	b510      	push	{r4, lr}
 80052fe:	1e43      	subs	r3, r0, #1
 8005300:	440a      	add	r2, r1
 8005302:	4291      	cmp	r1, r2
 8005304:	d100      	bne.n	8005308 <memcpy+0xc>
 8005306:	bd10      	pop	{r4, pc}
 8005308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800530c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005310:	e7f7      	b.n	8005302 <memcpy+0x6>

08005312 <_Balloc>:
 8005312:	b570      	push	{r4, r5, r6, lr}
 8005314:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005316:	4604      	mov	r4, r0
 8005318:	460e      	mov	r6, r1
 800531a:	b93d      	cbnz	r5, 800532c <_Balloc+0x1a>
 800531c:	2010      	movs	r0, #16
 800531e:	f7ff ffe5 	bl	80052ec <malloc>
 8005322:	6260      	str	r0, [r4, #36]	; 0x24
 8005324:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005328:	6005      	str	r5, [r0, #0]
 800532a:	60c5      	str	r5, [r0, #12]
 800532c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800532e:	68eb      	ldr	r3, [r5, #12]
 8005330:	b183      	cbz	r3, 8005354 <_Balloc+0x42>
 8005332:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800533a:	b9b8      	cbnz	r0, 800536c <_Balloc+0x5a>
 800533c:	2101      	movs	r1, #1
 800533e:	fa01 f506 	lsl.w	r5, r1, r6
 8005342:	1d6a      	adds	r2, r5, #5
 8005344:	0092      	lsls	r2, r2, #2
 8005346:	4620      	mov	r0, r4
 8005348:	f000 fabe 	bl	80058c8 <_calloc_r>
 800534c:	b160      	cbz	r0, 8005368 <_Balloc+0x56>
 800534e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005352:	e00e      	b.n	8005372 <_Balloc+0x60>
 8005354:	2221      	movs	r2, #33	; 0x21
 8005356:	2104      	movs	r1, #4
 8005358:	4620      	mov	r0, r4
 800535a:	f000 fab5 	bl	80058c8 <_calloc_r>
 800535e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005360:	60e8      	str	r0, [r5, #12]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e4      	bne.n	8005332 <_Balloc+0x20>
 8005368:	2000      	movs	r0, #0
 800536a:	bd70      	pop	{r4, r5, r6, pc}
 800536c:	6802      	ldr	r2, [r0, #0]
 800536e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005372:	2300      	movs	r3, #0
 8005374:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005378:	e7f7      	b.n	800536a <_Balloc+0x58>

0800537a <_Bfree>:
 800537a:	b570      	push	{r4, r5, r6, lr}
 800537c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800537e:	4606      	mov	r6, r0
 8005380:	460d      	mov	r5, r1
 8005382:	b93c      	cbnz	r4, 8005394 <_Bfree+0x1a>
 8005384:	2010      	movs	r0, #16
 8005386:	f7ff ffb1 	bl	80052ec <malloc>
 800538a:	6270      	str	r0, [r6, #36]	; 0x24
 800538c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005390:	6004      	str	r4, [r0, #0]
 8005392:	60c4      	str	r4, [r0, #12]
 8005394:	b13d      	cbz	r5, 80053a6 <_Bfree+0x2c>
 8005396:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005398:	686a      	ldr	r2, [r5, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053a0:	6029      	str	r1, [r5, #0]
 80053a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80053a6:	bd70      	pop	{r4, r5, r6, pc}

080053a8 <__multadd>:
 80053a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ac:	690d      	ldr	r5, [r1, #16]
 80053ae:	461f      	mov	r7, r3
 80053b0:	4606      	mov	r6, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	f101 0c14 	add.w	ip, r1, #20
 80053b8:	2300      	movs	r3, #0
 80053ba:	f8dc 0000 	ldr.w	r0, [ip]
 80053be:	b281      	uxth	r1, r0
 80053c0:	fb02 7101 	mla	r1, r2, r1, r7
 80053c4:	0c0f      	lsrs	r7, r1, #16
 80053c6:	0c00      	lsrs	r0, r0, #16
 80053c8:	fb02 7000 	mla	r0, r2, r0, r7
 80053cc:	b289      	uxth	r1, r1
 80053ce:	3301      	adds	r3, #1
 80053d0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80053d4:	429d      	cmp	r5, r3
 80053d6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80053da:	f84c 1b04 	str.w	r1, [ip], #4
 80053de:	dcec      	bgt.n	80053ba <__multadd+0x12>
 80053e0:	b1d7      	cbz	r7, 8005418 <__multadd+0x70>
 80053e2:	68a3      	ldr	r3, [r4, #8]
 80053e4:	42ab      	cmp	r3, r5
 80053e6:	dc12      	bgt.n	800540e <__multadd+0x66>
 80053e8:	6861      	ldr	r1, [r4, #4]
 80053ea:	4630      	mov	r0, r6
 80053ec:	3101      	adds	r1, #1
 80053ee:	f7ff ff90 	bl	8005312 <_Balloc>
 80053f2:	6922      	ldr	r2, [r4, #16]
 80053f4:	3202      	adds	r2, #2
 80053f6:	f104 010c 	add.w	r1, r4, #12
 80053fa:	4680      	mov	r8, r0
 80053fc:	0092      	lsls	r2, r2, #2
 80053fe:	300c      	adds	r0, #12
 8005400:	f7ff ff7c 	bl	80052fc <memcpy>
 8005404:	4621      	mov	r1, r4
 8005406:	4630      	mov	r0, r6
 8005408:	f7ff ffb7 	bl	800537a <_Bfree>
 800540c:	4644      	mov	r4, r8
 800540e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005412:	3501      	adds	r5, #1
 8005414:	615f      	str	r7, [r3, #20]
 8005416:	6125      	str	r5, [r4, #16]
 8005418:	4620      	mov	r0, r4
 800541a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800541e <__hi0bits>:
 800541e:	0c02      	lsrs	r2, r0, #16
 8005420:	0412      	lsls	r2, r2, #16
 8005422:	4603      	mov	r3, r0
 8005424:	b9b2      	cbnz	r2, 8005454 <__hi0bits+0x36>
 8005426:	0403      	lsls	r3, r0, #16
 8005428:	2010      	movs	r0, #16
 800542a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800542e:	bf04      	itt	eq
 8005430:	021b      	lsleq	r3, r3, #8
 8005432:	3008      	addeq	r0, #8
 8005434:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005438:	bf04      	itt	eq
 800543a:	011b      	lsleq	r3, r3, #4
 800543c:	3004      	addeq	r0, #4
 800543e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005442:	bf04      	itt	eq
 8005444:	009b      	lsleq	r3, r3, #2
 8005446:	3002      	addeq	r0, #2
 8005448:	2b00      	cmp	r3, #0
 800544a:	db06      	blt.n	800545a <__hi0bits+0x3c>
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	d503      	bpl.n	8005458 <__hi0bits+0x3a>
 8005450:	3001      	adds	r0, #1
 8005452:	4770      	bx	lr
 8005454:	2000      	movs	r0, #0
 8005456:	e7e8      	b.n	800542a <__hi0bits+0xc>
 8005458:	2020      	movs	r0, #32
 800545a:	4770      	bx	lr

0800545c <__lo0bits>:
 800545c:	6803      	ldr	r3, [r0, #0]
 800545e:	f013 0207 	ands.w	r2, r3, #7
 8005462:	4601      	mov	r1, r0
 8005464:	d00b      	beq.n	800547e <__lo0bits+0x22>
 8005466:	07da      	lsls	r2, r3, #31
 8005468:	d423      	bmi.n	80054b2 <__lo0bits+0x56>
 800546a:	0798      	lsls	r0, r3, #30
 800546c:	bf49      	itett	mi
 800546e:	085b      	lsrmi	r3, r3, #1
 8005470:	089b      	lsrpl	r3, r3, #2
 8005472:	2001      	movmi	r0, #1
 8005474:	600b      	strmi	r3, [r1, #0]
 8005476:	bf5c      	itt	pl
 8005478:	600b      	strpl	r3, [r1, #0]
 800547a:	2002      	movpl	r0, #2
 800547c:	4770      	bx	lr
 800547e:	b298      	uxth	r0, r3
 8005480:	b9a8      	cbnz	r0, 80054ae <__lo0bits+0x52>
 8005482:	0c1b      	lsrs	r3, r3, #16
 8005484:	2010      	movs	r0, #16
 8005486:	f013 0fff 	tst.w	r3, #255	; 0xff
 800548a:	bf04      	itt	eq
 800548c:	0a1b      	lsreq	r3, r3, #8
 800548e:	3008      	addeq	r0, #8
 8005490:	071a      	lsls	r2, r3, #28
 8005492:	bf04      	itt	eq
 8005494:	091b      	lsreq	r3, r3, #4
 8005496:	3004      	addeq	r0, #4
 8005498:	079a      	lsls	r2, r3, #30
 800549a:	bf04      	itt	eq
 800549c:	089b      	lsreq	r3, r3, #2
 800549e:	3002      	addeq	r0, #2
 80054a0:	07da      	lsls	r2, r3, #31
 80054a2:	d402      	bmi.n	80054aa <__lo0bits+0x4e>
 80054a4:	085b      	lsrs	r3, r3, #1
 80054a6:	d006      	beq.n	80054b6 <__lo0bits+0x5a>
 80054a8:	3001      	adds	r0, #1
 80054aa:	600b      	str	r3, [r1, #0]
 80054ac:	4770      	bx	lr
 80054ae:	4610      	mov	r0, r2
 80054b0:	e7e9      	b.n	8005486 <__lo0bits+0x2a>
 80054b2:	2000      	movs	r0, #0
 80054b4:	4770      	bx	lr
 80054b6:	2020      	movs	r0, #32
 80054b8:	4770      	bx	lr

080054ba <__i2b>:
 80054ba:	b510      	push	{r4, lr}
 80054bc:	460c      	mov	r4, r1
 80054be:	2101      	movs	r1, #1
 80054c0:	f7ff ff27 	bl	8005312 <_Balloc>
 80054c4:	2201      	movs	r2, #1
 80054c6:	6144      	str	r4, [r0, #20]
 80054c8:	6102      	str	r2, [r0, #16]
 80054ca:	bd10      	pop	{r4, pc}

080054cc <__multiply>:
 80054cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054d0:	4614      	mov	r4, r2
 80054d2:	690a      	ldr	r2, [r1, #16]
 80054d4:	6923      	ldr	r3, [r4, #16]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	bfb8      	it	lt
 80054da:	460b      	movlt	r3, r1
 80054dc:	4688      	mov	r8, r1
 80054de:	bfbc      	itt	lt
 80054e0:	46a0      	movlt	r8, r4
 80054e2:	461c      	movlt	r4, r3
 80054e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80054e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80054ec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80054f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80054f4:	eb07 0609 	add.w	r6, r7, r9
 80054f8:	42b3      	cmp	r3, r6
 80054fa:	bfb8      	it	lt
 80054fc:	3101      	addlt	r1, #1
 80054fe:	f7ff ff08 	bl	8005312 <_Balloc>
 8005502:	f100 0514 	add.w	r5, r0, #20
 8005506:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800550a:	462b      	mov	r3, r5
 800550c:	2200      	movs	r2, #0
 800550e:	4573      	cmp	r3, lr
 8005510:	d316      	bcc.n	8005540 <__multiply+0x74>
 8005512:	f104 0214 	add.w	r2, r4, #20
 8005516:	f108 0114 	add.w	r1, r8, #20
 800551a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800551e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	9b00      	ldr	r3, [sp, #0]
 8005526:	9201      	str	r2, [sp, #4]
 8005528:	4293      	cmp	r3, r2
 800552a:	d80c      	bhi.n	8005546 <__multiply+0x7a>
 800552c:	2e00      	cmp	r6, #0
 800552e:	dd03      	ble.n	8005538 <__multiply+0x6c>
 8005530:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005534:	2b00      	cmp	r3, #0
 8005536:	d05d      	beq.n	80055f4 <__multiply+0x128>
 8005538:	6106      	str	r6, [r0, #16]
 800553a:	b003      	add	sp, #12
 800553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005540:	f843 2b04 	str.w	r2, [r3], #4
 8005544:	e7e3      	b.n	800550e <__multiply+0x42>
 8005546:	f8b2 b000 	ldrh.w	fp, [r2]
 800554a:	f1bb 0f00 	cmp.w	fp, #0
 800554e:	d023      	beq.n	8005598 <__multiply+0xcc>
 8005550:	4689      	mov	r9, r1
 8005552:	46ac      	mov	ip, r5
 8005554:	f04f 0800 	mov.w	r8, #0
 8005558:	f859 4b04 	ldr.w	r4, [r9], #4
 800555c:	f8dc a000 	ldr.w	sl, [ip]
 8005560:	b2a3      	uxth	r3, r4
 8005562:	fa1f fa8a 	uxth.w	sl, sl
 8005566:	fb0b a303 	mla	r3, fp, r3, sl
 800556a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800556e:	f8dc 4000 	ldr.w	r4, [ip]
 8005572:	4443      	add	r3, r8
 8005574:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005578:	fb0b 840a 	mla	r4, fp, sl, r8
 800557c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005580:	46e2      	mov	sl, ip
 8005582:	b29b      	uxth	r3, r3
 8005584:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005588:	454f      	cmp	r7, r9
 800558a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800558e:	f84a 3b04 	str.w	r3, [sl], #4
 8005592:	d82b      	bhi.n	80055ec <__multiply+0x120>
 8005594:	f8cc 8004 	str.w	r8, [ip, #4]
 8005598:	9b01      	ldr	r3, [sp, #4]
 800559a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800559e:	3204      	adds	r2, #4
 80055a0:	f1ba 0f00 	cmp.w	sl, #0
 80055a4:	d020      	beq.n	80055e8 <__multiply+0x11c>
 80055a6:	682b      	ldr	r3, [r5, #0]
 80055a8:	4689      	mov	r9, r1
 80055aa:	46a8      	mov	r8, r5
 80055ac:	f04f 0b00 	mov.w	fp, #0
 80055b0:	f8b9 c000 	ldrh.w	ip, [r9]
 80055b4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80055b8:	fb0a 440c 	mla	r4, sl, ip, r4
 80055bc:	445c      	add	r4, fp
 80055be:	46c4      	mov	ip, r8
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80055c6:	f84c 3b04 	str.w	r3, [ip], #4
 80055ca:	f859 3b04 	ldr.w	r3, [r9], #4
 80055ce:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80055d2:	0c1b      	lsrs	r3, r3, #16
 80055d4:	fb0a b303 	mla	r3, sl, r3, fp
 80055d8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80055dc:	454f      	cmp	r7, r9
 80055de:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80055e2:	d805      	bhi.n	80055f0 <__multiply+0x124>
 80055e4:	f8c8 3004 	str.w	r3, [r8, #4]
 80055e8:	3504      	adds	r5, #4
 80055ea:	e79b      	b.n	8005524 <__multiply+0x58>
 80055ec:	46d4      	mov	ip, sl
 80055ee:	e7b3      	b.n	8005558 <__multiply+0x8c>
 80055f0:	46e0      	mov	r8, ip
 80055f2:	e7dd      	b.n	80055b0 <__multiply+0xe4>
 80055f4:	3e01      	subs	r6, #1
 80055f6:	e799      	b.n	800552c <__multiply+0x60>

080055f8 <__pow5mult>:
 80055f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055fc:	4615      	mov	r5, r2
 80055fe:	f012 0203 	ands.w	r2, r2, #3
 8005602:	4606      	mov	r6, r0
 8005604:	460f      	mov	r7, r1
 8005606:	d007      	beq.n	8005618 <__pow5mult+0x20>
 8005608:	3a01      	subs	r2, #1
 800560a:	4c21      	ldr	r4, [pc, #132]	; (8005690 <__pow5mult+0x98>)
 800560c:	2300      	movs	r3, #0
 800560e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005612:	f7ff fec9 	bl	80053a8 <__multadd>
 8005616:	4607      	mov	r7, r0
 8005618:	10ad      	asrs	r5, r5, #2
 800561a:	d035      	beq.n	8005688 <__pow5mult+0x90>
 800561c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800561e:	b93c      	cbnz	r4, 8005630 <__pow5mult+0x38>
 8005620:	2010      	movs	r0, #16
 8005622:	f7ff fe63 	bl	80052ec <malloc>
 8005626:	6270      	str	r0, [r6, #36]	; 0x24
 8005628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800562c:	6004      	str	r4, [r0, #0]
 800562e:	60c4      	str	r4, [r0, #12]
 8005630:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005638:	b94c      	cbnz	r4, 800564e <__pow5mult+0x56>
 800563a:	f240 2171 	movw	r1, #625	; 0x271
 800563e:	4630      	mov	r0, r6
 8005640:	f7ff ff3b 	bl	80054ba <__i2b>
 8005644:	2300      	movs	r3, #0
 8005646:	f8c8 0008 	str.w	r0, [r8, #8]
 800564a:	4604      	mov	r4, r0
 800564c:	6003      	str	r3, [r0, #0]
 800564e:	f04f 0800 	mov.w	r8, #0
 8005652:	07eb      	lsls	r3, r5, #31
 8005654:	d50a      	bpl.n	800566c <__pow5mult+0x74>
 8005656:	4639      	mov	r1, r7
 8005658:	4622      	mov	r2, r4
 800565a:	4630      	mov	r0, r6
 800565c:	f7ff ff36 	bl	80054cc <__multiply>
 8005660:	4639      	mov	r1, r7
 8005662:	4681      	mov	r9, r0
 8005664:	4630      	mov	r0, r6
 8005666:	f7ff fe88 	bl	800537a <_Bfree>
 800566a:	464f      	mov	r7, r9
 800566c:	106d      	asrs	r5, r5, #1
 800566e:	d00b      	beq.n	8005688 <__pow5mult+0x90>
 8005670:	6820      	ldr	r0, [r4, #0]
 8005672:	b938      	cbnz	r0, 8005684 <__pow5mult+0x8c>
 8005674:	4622      	mov	r2, r4
 8005676:	4621      	mov	r1, r4
 8005678:	4630      	mov	r0, r6
 800567a:	f7ff ff27 	bl	80054cc <__multiply>
 800567e:	6020      	str	r0, [r4, #0]
 8005680:	f8c0 8000 	str.w	r8, [r0]
 8005684:	4604      	mov	r4, r0
 8005686:	e7e4      	b.n	8005652 <__pow5mult+0x5a>
 8005688:	4638      	mov	r0, r7
 800568a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800568e:	bf00      	nop
 8005690:	08005f70 	.word	0x08005f70

08005694 <__lshift>:
 8005694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005698:	460c      	mov	r4, r1
 800569a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	6849      	ldr	r1, [r1, #4]
 80056a2:	eb0a 0903 	add.w	r9, sl, r3
 80056a6:	68a3      	ldr	r3, [r4, #8]
 80056a8:	4607      	mov	r7, r0
 80056aa:	4616      	mov	r6, r2
 80056ac:	f109 0501 	add.w	r5, r9, #1
 80056b0:	42ab      	cmp	r3, r5
 80056b2:	db32      	blt.n	800571a <__lshift+0x86>
 80056b4:	4638      	mov	r0, r7
 80056b6:	f7ff fe2c 	bl	8005312 <_Balloc>
 80056ba:	2300      	movs	r3, #0
 80056bc:	4680      	mov	r8, r0
 80056be:	f100 0114 	add.w	r1, r0, #20
 80056c2:	461a      	mov	r2, r3
 80056c4:	4553      	cmp	r3, sl
 80056c6:	db2b      	blt.n	8005720 <__lshift+0x8c>
 80056c8:	6920      	ldr	r0, [r4, #16]
 80056ca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056ce:	f104 0314 	add.w	r3, r4, #20
 80056d2:	f016 021f 	ands.w	r2, r6, #31
 80056d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056da:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80056de:	d025      	beq.n	800572c <__lshift+0x98>
 80056e0:	f1c2 0e20 	rsb	lr, r2, #32
 80056e4:	2000      	movs	r0, #0
 80056e6:	681e      	ldr	r6, [r3, #0]
 80056e8:	468a      	mov	sl, r1
 80056ea:	4096      	lsls	r6, r2
 80056ec:	4330      	orrs	r0, r6
 80056ee:	f84a 0b04 	str.w	r0, [sl], #4
 80056f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80056f6:	459c      	cmp	ip, r3
 80056f8:	fa20 f00e 	lsr.w	r0, r0, lr
 80056fc:	d814      	bhi.n	8005728 <__lshift+0x94>
 80056fe:	6048      	str	r0, [r1, #4]
 8005700:	b108      	cbz	r0, 8005706 <__lshift+0x72>
 8005702:	f109 0502 	add.w	r5, r9, #2
 8005706:	3d01      	subs	r5, #1
 8005708:	4638      	mov	r0, r7
 800570a:	f8c8 5010 	str.w	r5, [r8, #16]
 800570e:	4621      	mov	r1, r4
 8005710:	f7ff fe33 	bl	800537a <_Bfree>
 8005714:	4640      	mov	r0, r8
 8005716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800571a:	3101      	adds	r1, #1
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	e7c7      	b.n	80056b0 <__lshift+0x1c>
 8005720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005724:	3301      	adds	r3, #1
 8005726:	e7cd      	b.n	80056c4 <__lshift+0x30>
 8005728:	4651      	mov	r1, sl
 800572a:	e7dc      	b.n	80056e6 <__lshift+0x52>
 800572c:	3904      	subs	r1, #4
 800572e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005732:	f841 2f04 	str.w	r2, [r1, #4]!
 8005736:	459c      	cmp	ip, r3
 8005738:	d8f9      	bhi.n	800572e <__lshift+0x9a>
 800573a:	e7e4      	b.n	8005706 <__lshift+0x72>

0800573c <__mcmp>:
 800573c:	6903      	ldr	r3, [r0, #16]
 800573e:	690a      	ldr	r2, [r1, #16]
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	b530      	push	{r4, r5, lr}
 8005744:	d10c      	bne.n	8005760 <__mcmp+0x24>
 8005746:	0092      	lsls	r2, r2, #2
 8005748:	3014      	adds	r0, #20
 800574a:	3114      	adds	r1, #20
 800574c:	1884      	adds	r4, r0, r2
 800574e:	4411      	add	r1, r2
 8005750:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005754:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005758:	4295      	cmp	r5, r2
 800575a:	d003      	beq.n	8005764 <__mcmp+0x28>
 800575c:	d305      	bcc.n	800576a <__mcmp+0x2e>
 800575e:	2301      	movs	r3, #1
 8005760:	4618      	mov	r0, r3
 8005762:	bd30      	pop	{r4, r5, pc}
 8005764:	42a0      	cmp	r0, r4
 8005766:	d3f3      	bcc.n	8005750 <__mcmp+0x14>
 8005768:	e7fa      	b.n	8005760 <__mcmp+0x24>
 800576a:	f04f 33ff 	mov.w	r3, #4294967295
 800576e:	e7f7      	b.n	8005760 <__mcmp+0x24>

08005770 <__mdiff>:
 8005770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005774:	460d      	mov	r5, r1
 8005776:	4607      	mov	r7, r0
 8005778:	4611      	mov	r1, r2
 800577a:	4628      	mov	r0, r5
 800577c:	4614      	mov	r4, r2
 800577e:	f7ff ffdd 	bl	800573c <__mcmp>
 8005782:	1e06      	subs	r6, r0, #0
 8005784:	d108      	bne.n	8005798 <__mdiff+0x28>
 8005786:	4631      	mov	r1, r6
 8005788:	4638      	mov	r0, r7
 800578a:	f7ff fdc2 	bl	8005312 <_Balloc>
 800578e:	2301      	movs	r3, #1
 8005790:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005798:	bfa4      	itt	ge
 800579a:	4623      	movge	r3, r4
 800579c:	462c      	movge	r4, r5
 800579e:	4638      	mov	r0, r7
 80057a0:	6861      	ldr	r1, [r4, #4]
 80057a2:	bfa6      	itte	ge
 80057a4:	461d      	movge	r5, r3
 80057a6:	2600      	movge	r6, #0
 80057a8:	2601      	movlt	r6, #1
 80057aa:	f7ff fdb2 	bl	8005312 <_Balloc>
 80057ae:	692b      	ldr	r3, [r5, #16]
 80057b0:	60c6      	str	r6, [r0, #12]
 80057b2:	6926      	ldr	r6, [r4, #16]
 80057b4:	f105 0914 	add.w	r9, r5, #20
 80057b8:	f104 0214 	add.w	r2, r4, #20
 80057bc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80057c0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80057c4:	f100 0514 	add.w	r5, r0, #20
 80057c8:	f04f 0e00 	mov.w	lr, #0
 80057cc:	f852 ab04 	ldr.w	sl, [r2], #4
 80057d0:	f859 4b04 	ldr.w	r4, [r9], #4
 80057d4:	fa1e f18a 	uxtah	r1, lr, sl
 80057d8:	b2a3      	uxth	r3, r4
 80057da:	1ac9      	subs	r1, r1, r3
 80057dc:	0c23      	lsrs	r3, r4, #16
 80057de:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80057e2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80057e6:	b289      	uxth	r1, r1
 80057e8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80057ec:	45c8      	cmp	r8, r9
 80057ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80057f2:	4694      	mov	ip, r2
 80057f4:	f845 3b04 	str.w	r3, [r5], #4
 80057f8:	d8e8      	bhi.n	80057cc <__mdiff+0x5c>
 80057fa:	45bc      	cmp	ip, r7
 80057fc:	d304      	bcc.n	8005808 <__mdiff+0x98>
 80057fe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005802:	b183      	cbz	r3, 8005826 <__mdiff+0xb6>
 8005804:	6106      	str	r6, [r0, #16]
 8005806:	e7c5      	b.n	8005794 <__mdiff+0x24>
 8005808:	f85c 1b04 	ldr.w	r1, [ip], #4
 800580c:	fa1e f381 	uxtah	r3, lr, r1
 8005810:	141a      	asrs	r2, r3, #16
 8005812:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005816:	b29b      	uxth	r3, r3
 8005818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800581c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005820:	f845 3b04 	str.w	r3, [r5], #4
 8005824:	e7e9      	b.n	80057fa <__mdiff+0x8a>
 8005826:	3e01      	subs	r6, #1
 8005828:	e7e9      	b.n	80057fe <__mdiff+0x8e>

0800582a <__d2b>:
 800582a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800582e:	460e      	mov	r6, r1
 8005830:	2101      	movs	r1, #1
 8005832:	ec59 8b10 	vmov	r8, r9, d0
 8005836:	4615      	mov	r5, r2
 8005838:	f7ff fd6b 	bl	8005312 <_Balloc>
 800583c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005840:	4607      	mov	r7, r0
 8005842:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005846:	bb34      	cbnz	r4, 8005896 <__d2b+0x6c>
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	f1b8 0300 	subs.w	r3, r8, #0
 800584e:	d027      	beq.n	80058a0 <__d2b+0x76>
 8005850:	a802      	add	r0, sp, #8
 8005852:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005856:	f7ff fe01 	bl	800545c <__lo0bits>
 800585a:	9900      	ldr	r1, [sp, #0]
 800585c:	b1f0      	cbz	r0, 800589c <__d2b+0x72>
 800585e:	9a01      	ldr	r2, [sp, #4]
 8005860:	f1c0 0320 	rsb	r3, r0, #32
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	430b      	orrs	r3, r1
 800586a:	40c2      	lsrs	r2, r0
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	9201      	str	r2, [sp, #4]
 8005870:	9b01      	ldr	r3, [sp, #4]
 8005872:	61bb      	str	r3, [r7, #24]
 8005874:	2b00      	cmp	r3, #0
 8005876:	bf14      	ite	ne
 8005878:	2102      	movne	r1, #2
 800587a:	2101      	moveq	r1, #1
 800587c:	6139      	str	r1, [r7, #16]
 800587e:	b1c4      	cbz	r4, 80058b2 <__d2b+0x88>
 8005880:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005884:	4404      	add	r4, r0
 8005886:	6034      	str	r4, [r6, #0]
 8005888:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800588c:	6028      	str	r0, [r5, #0]
 800588e:	4638      	mov	r0, r7
 8005890:	b003      	add	sp, #12
 8005892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800589a:	e7d5      	b.n	8005848 <__d2b+0x1e>
 800589c:	6179      	str	r1, [r7, #20]
 800589e:	e7e7      	b.n	8005870 <__d2b+0x46>
 80058a0:	a801      	add	r0, sp, #4
 80058a2:	f7ff fddb 	bl	800545c <__lo0bits>
 80058a6:	9b01      	ldr	r3, [sp, #4]
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	2101      	movs	r1, #1
 80058ac:	6139      	str	r1, [r7, #16]
 80058ae:	3020      	adds	r0, #32
 80058b0:	e7e5      	b.n	800587e <__d2b+0x54>
 80058b2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80058b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80058ba:	6030      	str	r0, [r6, #0]
 80058bc:	6918      	ldr	r0, [r3, #16]
 80058be:	f7ff fdae 	bl	800541e <__hi0bits>
 80058c2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80058c6:	e7e1      	b.n	800588c <__d2b+0x62>

080058c8 <_calloc_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	fb02 f401 	mul.w	r4, r2, r1
 80058ce:	4621      	mov	r1, r4
 80058d0:	f000 f856 	bl	8005980 <_malloc_r>
 80058d4:	4605      	mov	r5, r0
 80058d6:	b118      	cbz	r0, 80058e0 <_calloc_r+0x18>
 80058d8:	4622      	mov	r2, r4
 80058da:	2100      	movs	r1, #0
 80058dc:	f7fe fa30 	bl	8003d40 <memset>
 80058e0:	4628      	mov	r0, r5
 80058e2:	bd38      	pop	{r3, r4, r5, pc}

080058e4 <_free_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4605      	mov	r5, r0
 80058e8:	2900      	cmp	r1, #0
 80058ea:	d045      	beq.n	8005978 <_free_r+0x94>
 80058ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058f0:	1f0c      	subs	r4, r1, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bfb8      	it	lt
 80058f6:	18e4      	addlt	r4, r4, r3
 80058f8:	f000 fa29 	bl	8005d4e <__malloc_lock>
 80058fc:	4a1f      	ldr	r2, [pc, #124]	; (800597c <_free_r+0x98>)
 80058fe:	6813      	ldr	r3, [r2, #0]
 8005900:	4610      	mov	r0, r2
 8005902:	b933      	cbnz	r3, 8005912 <_free_r+0x2e>
 8005904:	6063      	str	r3, [r4, #4]
 8005906:	6014      	str	r4, [r2, #0]
 8005908:	4628      	mov	r0, r5
 800590a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800590e:	f000 ba1f 	b.w	8005d50 <__malloc_unlock>
 8005912:	42a3      	cmp	r3, r4
 8005914:	d90c      	bls.n	8005930 <_free_r+0x4c>
 8005916:	6821      	ldr	r1, [r4, #0]
 8005918:	1862      	adds	r2, r4, r1
 800591a:	4293      	cmp	r3, r2
 800591c:	bf04      	itt	eq
 800591e:	681a      	ldreq	r2, [r3, #0]
 8005920:	685b      	ldreq	r3, [r3, #4]
 8005922:	6063      	str	r3, [r4, #4]
 8005924:	bf04      	itt	eq
 8005926:	1852      	addeq	r2, r2, r1
 8005928:	6022      	streq	r2, [r4, #0]
 800592a:	6004      	str	r4, [r0, #0]
 800592c:	e7ec      	b.n	8005908 <_free_r+0x24>
 800592e:	4613      	mov	r3, r2
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	b10a      	cbz	r2, 8005938 <_free_r+0x54>
 8005934:	42a2      	cmp	r2, r4
 8005936:	d9fa      	bls.n	800592e <_free_r+0x4a>
 8005938:	6819      	ldr	r1, [r3, #0]
 800593a:	1858      	adds	r0, r3, r1
 800593c:	42a0      	cmp	r0, r4
 800593e:	d10b      	bne.n	8005958 <_free_r+0x74>
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	4401      	add	r1, r0
 8005944:	1858      	adds	r0, r3, r1
 8005946:	4282      	cmp	r2, r0
 8005948:	6019      	str	r1, [r3, #0]
 800594a:	d1dd      	bne.n	8005908 <_free_r+0x24>
 800594c:	6810      	ldr	r0, [r2, #0]
 800594e:	6852      	ldr	r2, [r2, #4]
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	4401      	add	r1, r0
 8005954:	6019      	str	r1, [r3, #0]
 8005956:	e7d7      	b.n	8005908 <_free_r+0x24>
 8005958:	d902      	bls.n	8005960 <_free_r+0x7c>
 800595a:	230c      	movs	r3, #12
 800595c:	602b      	str	r3, [r5, #0]
 800595e:	e7d3      	b.n	8005908 <_free_r+0x24>
 8005960:	6820      	ldr	r0, [r4, #0]
 8005962:	1821      	adds	r1, r4, r0
 8005964:	428a      	cmp	r2, r1
 8005966:	bf04      	itt	eq
 8005968:	6811      	ldreq	r1, [r2, #0]
 800596a:	6852      	ldreq	r2, [r2, #4]
 800596c:	6062      	str	r2, [r4, #4]
 800596e:	bf04      	itt	eq
 8005970:	1809      	addeq	r1, r1, r0
 8005972:	6021      	streq	r1, [r4, #0]
 8005974:	605c      	str	r4, [r3, #4]
 8005976:	e7c7      	b.n	8005908 <_free_r+0x24>
 8005978:	bd38      	pop	{r3, r4, r5, pc}
 800597a:	bf00      	nop
 800597c:	20000200 	.word	0x20000200

08005980 <_malloc_r>:
 8005980:	b570      	push	{r4, r5, r6, lr}
 8005982:	1ccd      	adds	r5, r1, #3
 8005984:	f025 0503 	bic.w	r5, r5, #3
 8005988:	3508      	adds	r5, #8
 800598a:	2d0c      	cmp	r5, #12
 800598c:	bf38      	it	cc
 800598e:	250c      	movcc	r5, #12
 8005990:	2d00      	cmp	r5, #0
 8005992:	4606      	mov	r6, r0
 8005994:	db01      	blt.n	800599a <_malloc_r+0x1a>
 8005996:	42a9      	cmp	r1, r5
 8005998:	d903      	bls.n	80059a2 <_malloc_r+0x22>
 800599a:	230c      	movs	r3, #12
 800599c:	6033      	str	r3, [r6, #0]
 800599e:	2000      	movs	r0, #0
 80059a0:	bd70      	pop	{r4, r5, r6, pc}
 80059a2:	f000 f9d4 	bl	8005d4e <__malloc_lock>
 80059a6:	4a21      	ldr	r2, [pc, #132]	; (8005a2c <_malloc_r+0xac>)
 80059a8:	6814      	ldr	r4, [r2, #0]
 80059aa:	4621      	mov	r1, r4
 80059ac:	b991      	cbnz	r1, 80059d4 <_malloc_r+0x54>
 80059ae:	4c20      	ldr	r4, [pc, #128]	; (8005a30 <_malloc_r+0xb0>)
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	b91b      	cbnz	r3, 80059bc <_malloc_r+0x3c>
 80059b4:	4630      	mov	r0, r6
 80059b6:	f000 f98f 	bl	8005cd8 <_sbrk_r>
 80059ba:	6020      	str	r0, [r4, #0]
 80059bc:	4629      	mov	r1, r5
 80059be:	4630      	mov	r0, r6
 80059c0:	f000 f98a 	bl	8005cd8 <_sbrk_r>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d124      	bne.n	8005a12 <_malloc_r+0x92>
 80059c8:	230c      	movs	r3, #12
 80059ca:	6033      	str	r3, [r6, #0]
 80059cc:	4630      	mov	r0, r6
 80059ce:	f000 f9bf 	bl	8005d50 <__malloc_unlock>
 80059d2:	e7e4      	b.n	800599e <_malloc_r+0x1e>
 80059d4:	680b      	ldr	r3, [r1, #0]
 80059d6:	1b5b      	subs	r3, r3, r5
 80059d8:	d418      	bmi.n	8005a0c <_malloc_r+0x8c>
 80059da:	2b0b      	cmp	r3, #11
 80059dc:	d90f      	bls.n	80059fe <_malloc_r+0x7e>
 80059de:	600b      	str	r3, [r1, #0]
 80059e0:	50cd      	str	r5, [r1, r3]
 80059e2:	18cc      	adds	r4, r1, r3
 80059e4:	4630      	mov	r0, r6
 80059e6:	f000 f9b3 	bl	8005d50 <__malloc_unlock>
 80059ea:	f104 000b 	add.w	r0, r4, #11
 80059ee:	1d23      	adds	r3, r4, #4
 80059f0:	f020 0007 	bic.w	r0, r0, #7
 80059f4:	1ac3      	subs	r3, r0, r3
 80059f6:	d0d3      	beq.n	80059a0 <_malloc_r+0x20>
 80059f8:	425a      	negs	r2, r3
 80059fa:	50e2      	str	r2, [r4, r3]
 80059fc:	e7d0      	b.n	80059a0 <_malloc_r+0x20>
 80059fe:	428c      	cmp	r4, r1
 8005a00:	684b      	ldr	r3, [r1, #4]
 8005a02:	bf16      	itet	ne
 8005a04:	6063      	strne	r3, [r4, #4]
 8005a06:	6013      	streq	r3, [r2, #0]
 8005a08:	460c      	movne	r4, r1
 8005a0a:	e7eb      	b.n	80059e4 <_malloc_r+0x64>
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	6849      	ldr	r1, [r1, #4]
 8005a10:	e7cc      	b.n	80059ac <_malloc_r+0x2c>
 8005a12:	1cc4      	adds	r4, r0, #3
 8005a14:	f024 0403 	bic.w	r4, r4, #3
 8005a18:	42a0      	cmp	r0, r4
 8005a1a:	d005      	beq.n	8005a28 <_malloc_r+0xa8>
 8005a1c:	1a21      	subs	r1, r4, r0
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f000 f95a 	bl	8005cd8 <_sbrk_r>
 8005a24:	3001      	adds	r0, #1
 8005a26:	d0cf      	beq.n	80059c8 <_malloc_r+0x48>
 8005a28:	6025      	str	r5, [r4, #0]
 8005a2a:	e7db      	b.n	80059e4 <_malloc_r+0x64>
 8005a2c:	20000200 	.word	0x20000200
 8005a30:	20000204 	.word	0x20000204

08005a34 <__ssputs_r>:
 8005a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	688e      	ldr	r6, [r1, #8]
 8005a3a:	429e      	cmp	r6, r3
 8005a3c:	4682      	mov	sl, r0
 8005a3e:	460c      	mov	r4, r1
 8005a40:	4690      	mov	r8, r2
 8005a42:	4699      	mov	r9, r3
 8005a44:	d837      	bhi.n	8005ab6 <__ssputs_r+0x82>
 8005a46:	898a      	ldrh	r2, [r1, #12]
 8005a48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a4c:	d031      	beq.n	8005ab2 <__ssputs_r+0x7e>
 8005a4e:	6825      	ldr	r5, [r4, #0]
 8005a50:	6909      	ldr	r1, [r1, #16]
 8005a52:	1a6f      	subs	r7, r5, r1
 8005a54:	6965      	ldr	r5, [r4, #20]
 8005a56:	2302      	movs	r3, #2
 8005a58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a5c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005a60:	f109 0301 	add.w	r3, r9, #1
 8005a64:	443b      	add	r3, r7
 8005a66:	429d      	cmp	r5, r3
 8005a68:	bf38      	it	cc
 8005a6a:	461d      	movcc	r5, r3
 8005a6c:	0553      	lsls	r3, r2, #21
 8005a6e:	d530      	bpl.n	8005ad2 <__ssputs_r+0x9e>
 8005a70:	4629      	mov	r1, r5
 8005a72:	f7ff ff85 	bl	8005980 <_malloc_r>
 8005a76:	4606      	mov	r6, r0
 8005a78:	b950      	cbnz	r0, 8005a90 <__ssputs_r+0x5c>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	f8ca 3000 	str.w	r3, [sl]
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a86:	81a3      	strh	r3, [r4, #12]
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a90:	463a      	mov	r2, r7
 8005a92:	6921      	ldr	r1, [r4, #16]
 8005a94:	f7ff fc32 	bl	80052fc <memcpy>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	6126      	str	r6, [r4, #16]
 8005aa6:	6165      	str	r5, [r4, #20]
 8005aa8:	443e      	add	r6, r7
 8005aaa:	1bed      	subs	r5, r5, r7
 8005aac:	6026      	str	r6, [r4, #0]
 8005aae:	60a5      	str	r5, [r4, #8]
 8005ab0:	464e      	mov	r6, r9
 8005ab2:	454e      	cmp	r6, r9
 8005ab4:	d900      	bls.n	8005ab8 <__ssputs_r+0x84>
 8005ab6:	464e      	mov	r6, r9
 8005ab8:	4632      	mov	r2, r6
 8005aba:	4641      	mov	r1, r8
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	f000 f92d 	bl	8005d1c <memmove>
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	1b9b      	subs	r3, r3, r6
 8005ac6:	60a3      	str	r3, [r4, #8]
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	441e      	add	r6, r3
 8005acc:	6026      	str	r6, [r4, #0]
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e7dc      	b.n	8005a8c <__ssputs_r+0x58>
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	f000 f93d 	bl	8005d52 <_realloc_r>
 8005ad8:	4606      	mov	r6, r0
 8005ada:	2800      	cmp	r0, #0
 8005adc:	d1e2      	bne.n	8005aa4 <__ssputs_r+0x70>
 8005ade:	6921      	ldr	r1, [r4, #16]
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	f7ff feff 	bl	80058e4 <_free_r>
 8005ae6:	e7c8      	b.n	8005a7a <__ssputs_r+0x46>

08005ae8 <_svfiprintf_r>:
 8005ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aec:	461d      	mov	r5, r3
 8005aee:	898b      	ldrh	r3, [r1, #12]
 8005af0:	061f      	lsls	r7, r3, #24
 8005af2:	b09d      	sub	sp, #116	; 0x74
 8005af4:	4680      	mov	r8, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	4616      	mov	r6, r2
 8005afa:	d50f      	bpl.n	8005b1c <_svfiprintf_r+0x34>
 8005afc:	690b      	ldr	r3, [r1, #16]
 8005afe:	b96b      	cbnz	r3, 8005b1c <_svfiprintf_r+0x34>
 8005b00:	2140      	movs	r1, #64	; 0x40
 8005b02:	f7ff ff3d 	bl	8005980 <_malloc_r>
 8005b06:	6020      	str	r0, [r4, #0]
 8005b08:	6120      	str	r0, [r4, #16]
 8005b0a:	b928      	cbnz	r0, 8005b18 <_svfiprintf_r+0x30>
 8005b0c:	230c      	movs	r3, #12
 8005b0e:	f8c8 3000 	str.w	r3, [r8]
 8005b12:	f04f 30ff 	mov.w	r0, #4294967295
 8005b16:	e0c8      	b.n	8005caa <_svfiprintf_r+0x1c2>
 8005b18:	2340      	movs	r3, #64	; 0x40
 8005b1a:	6163      	str	r3, [r4, #20]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b20:	2320      	movs	r3, #32
 8005b22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b26:	2330      	movs	r3, #48	; 0x30
 8005b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b2c:	9503      	str	r5, [sp, #12]
 8005b2e:	f04f 0b01 	mov.w	fp, #1
 8005b32:	4637      	mov	r7, r6
 8005b34:	463d      	mov	r5, r7
 8005b36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b3a:	b10b      	cbz	r3, 8005b40 <_svfiprintf_r+0x58>
 8005b3c:	2b25      	cmp	r3, #37	; 0x25
 8005b3e:	d13e      	bne.n	8005bbe <_svfiprintf_r+0xd6>
 8005b40:	ebb7 0a06 	subs.w	sl, r7, r6
 8005b44:	d00b      	beq.n	8005b5e <_svfiprintf_r+0x76>
 8005b46:	4653      	mov	r3, sl
 8005b48:	4632      	mov	r2, r6
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	f7ff ff71 	bl	8005a34 <__ssputs_r>
 8005b52:	3001      	adds	r0, #1
 8005b54:	f000 80a4 	beq.w	8005ca0 <_svfiprintf_r+0x1b8>
 8005b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b5a:	4453      	add	r3, sl
 8005b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5e:	783b      	ldrb	r3, [r7, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 809d 	beq.w	8005ca0 <_svfiprintf_r+0x1b8>
 8005b66:	2300      	movs	r3, #0
 8005b68:	f04f 32ff 	mov.w	r2, #4294967295
 8005b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b70:	9304      	str	r3, [sp, #16]
 8005b72:	9307      	str	r3, [sp, #28]
 8005b74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b78:	931a      	str	r3, [sp, #104]	; 0x68
 8005b7a:	462f      	mov	r7, r5
 8005b7c:	2205      	movs	r2, #5
 8005b7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005b82:	4850      	ldr	r0, [pc, #320]	; (8005cc4 <_svfiprintf_r+0x1dc>)
 8005b84:	f7fa fb2c 	bl	80001e0 <memchr>
 8005b88:	9b04      	ldr	r3, [sp, #16]
 8005b8a:	b9d0      	cbnz	r0, 8005bc2 <_svfiprintf_r+0xda>
 8005b8c:	06d9      	lsls	r1, r3, #27
 8005b8e:	bf44      	itt	mi
 8005b90:	2220      	movmi	r2, #32
 8005b92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005b96:	071a      	lsls	r2, r3, #28
 8005b98:	bf44      	itt	mi
 8005b9a:	222b      	movmi	r2, #43	; 0x2b
 8005b9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ba0:	782a      	ldrb	r2, [r5, #0]
 8005ba2:	2a2a      	cmp	r2, #42	; 0x2a
 8005ba4:	d015      	beq.n	8005bd2 <_svfiprintf_r+0xea>
 8005ba6:	9a07      	ldr	r2, [sp, #28]
 8005ba8:	462f      	mov	r7, r5
 8005baa:	2000      	movs	r0, #0
 8005bac:	250a      	movs	r5, #10
 8005bae:	4639      	mov	r1, r7
 8005bb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bb4:	3b30      	subs	r3, #48	; 0x30
 8005bb6:	2b09      	cmp	r3, #9
 8005bb8:	d94d      	bls.n	8005c56 <_svfiprintf_r+0x16e>
 8005bba:	b1b8      	cbz	r0, 8005bec <_svfiprintf_r+0x104>
 8005bbc:	e00f      	b.n	8005bde <_svfiprintf_r+0xf6>
 8005bbe:	462f      	mov	r7, r5
 8005bc0:	e7b8      	b.n	8005b34 <_svfiprintf_r+0x4c>
 8005bc2:	4a40      	ldr	r2, [pc, #256]	; (8005cc4 <_svfiprintf_r+0x1dc>)
 8005bc4:	1a80      	subs	r0, r0, r2
 8005bc6:	fa0b f000 	lsl.w	r0, fp, r0
 8005bca:	4318      	orrs	r0, r3
 8005bcc:	9004      	str	r0, [sp, #16]
 8005bce:	463d      	mov	r5, r7
 8005bd0:	e7d3      	b.n	8005b7a <_svfiprintf_r+0x92>
 8005bd2:	9a03      	ldr	r2, [sp, #12]
 8005bd4:	1d11      	adds	r1, r2, #4
 8005bd6:	6812      	ldr	r2, [r2, #0]
 8005bd8:	9103      	str	r1, [sp, #12]
 8005bda:	2a00      	cmp	r2, #0
 8005bdc:	db01      	blt.n	8005be2 <_svfiprintf_r+0xfa>
 8005bde:	9207      	str	r2, [sp, #28]
 8005be0:	e004      	b.n	8005bec <_svfiprintf_r+0x104>
 8005be2:	4252      	negs	r2, r2
 8005be4:	f043 0302 	orr.w	r3, r3, #2
 8005be8:	9207      	str	r2, [sp, #28]
 8005bea:	9304      	str	r3, [sp, #16]
 8005bec:	783b      	ldrb	r3, [r7, #0]
 8005bee:	2b2e      	cmp	r3, #46	; 0x2e
 8005bf0:	d10c      	bne.n	8005c0c <_svfiprintf_r+0x124>
 8005bf2:	787b      	ldrb	r3, [r7, #1]
 8005bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf6:	d133      	bne.n	8005c60 <_svfiprintf_r+0x178>
 8005bf8:	9b03      	ldr	r3, [sp, #12]
 8005bfa:	1d1a      	adds	r2, r3, #4
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	9203      	str	r2, [sp, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bfb8      	it	lt
 8005c04:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c08:	3702      	adds	r7, #2
 8005c0a:	9305      	str	r3, [sp, #20]
 8005c0c:	4d2e      	ldr	r5, [pc, #184]	; (8005cc8 <_svfiprintf_r+0x1e0>)
 8005c0e:	7839      	ldrb	r1, [r7, #0]
 8005c10:	2203      	movs	r2, #3
 8005c12:	4628      	mov	r0, r5
 8005c14:	f7fa fae4 	bl	80001e0 <memchr>
 8005c18:	b138      	cbz	r0, 8005c2a <_svfiprintf_r+0x142>
 8005c1a:	2340      	movs	r3, #64	; 0x40
 8005c1c:	1b40      	subs	r0, r0, r5
 8005c1e:	fa03 f000 	lsl.w	r0, r3, r0
 8005c22:	9b04      	ldr	r3, [sp, #16]
 8005c24:	4303      	orrs	r3, r0
 8005c26:	3701      	adds	r7, #1
 8005c28:	9304      	str	r3, [sp, #16]
 8005c2a:	7839      	ldrb	r1, [r7, #0]
 8005c2c:	4827      	ldr	r0, [pc, #156]	; (8005ccc <_svfiprintf_r+0x1e4>)
 8005c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c32:	2206      	movs	r2, #6
 8005c34:	1c7e      	adds	r6, r7, #1
 8005c36:	f7fa fad3 	bl	80001e0 <memchr>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d038      	beq.n	8005cb0 <_svfiprintf_r+0x1c8>
 8005c3e:	4b24      	ldr	r3, [pc, #144]	; (8005cd0 <_svfiprintf_r+0x1e8>)
 8005c40:	bb13      	cbnz	r3, 8005c88 <_svfiprintf_r+0x1a0>
 8005c42:	9b03      	ldr	r3, [sp, #12]
 8005c44:	3307      	adds	r3, #7
 8005c46:	f023 0307 	bic.w	r3, r3, #7
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	9303      	str	r3, [sp, #12]
 8005c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c50:	444b      	add	r3, r9
 8005c52:	9309      	str	r3, [sp, #36]	; 0x24
 8005c54:	e76d      	b.n	8005b32 <_svfiprintf_r+0x4a>
 8005c56:	fb05 3202 	mla	r2, r5, r2, r3
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	460f      	mov	r7, r1
 8005c5e:	e7a6      	b.n	8005bae <_svfiprintf_r+0xc6>
 8005c60:	2300      	movs	r3, #0
 8005c62:	3701      	adds	r7, #1
 8005c64:	9305      	str	r3, [sp, #20]
 8005c66:	4619      	mov	r1, r3
 8005c68:	250a      	movs	r5, #10
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c70:	3a30      	subs	r2, #48	; 0x30
 8005c72:	2a09      	cmp	r2, #9
 8005c74:	d903      	bls.n	8005c7e <_svfiprintf_r+0x196>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0c8      	beq.n	8005c0c <_svfiprintf_r+0x124>
 8005c7a:	9105      	str	r1, [sp, #20]
 8005c7c:	e7c6      	b.n	8005c0c <_svfiprintf_r+0x124>
 8005c7e:	fb05 2101 	mla	r1, r5, r1, r2
 8005c82:	2301      	movs	r3, #1
 8005c84:	4607      	mov	r7, r0
 8005c86:	e7f0      	b.n	8005c6a <_svfiprintf_r+0x182>
 8005c88:	ab03      	add	r3, sp, #12
 8005c8a:	9300      	str	r3, [sp, #0]
 8005c8c:	4622      	mov	r2, r4
 8005c8e:	4b11      	ldr	r3, [pc, #68]	; (8005cd4 <_svfiprintf_r+0x1ec>)
 8005c90:	a904      	add	r1, sp, #16
 8005c92:	4640      	mov	r0, r8
 8005c94:	f7fe f8f0 	bl	8003e78 <_printf_float>
 8005c98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005c9c:	4681      	mov	r9, r0
 8005c9e:	d1d6      	bne.n	8005c4e <_svfiprintf_r+0x166>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	065b      	lsls	r3, r3, #25
 8005ca4:	f53f af35 	bmi.w	8005b12 <_svfiprintf_r+0x2a>
 8005ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005caa:	b01d      	add	sp, #116	; 0x74
 8005cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb0:	ab03      	add	r3, sp, #12
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	4622      	mov	r2, r4
 8005cb6:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <_svfiprintf_r+0x1ec>)
 8005cb8:	a904      	add	r1, sp, #16
 8005cba:	4640      	mov	r0, r8
 8005cbc:	f7fe fb92 	bl	80043e4 <_printf_i>
 8005cc0:	e7ea      	b.n	8005c98 <_svfiprintf_r+0x1b0>
 8005cc2:	bf00      	nop
 8005cc4:	08005f7c 	.word	0x08005f7c
 8005cc8:	08005f82 	.word	0x08005f82
 8005ccc:	08005f86 	.word	0x08005f86
 8005cd0:	08003e79 	.word	0x08003e79
 8005cd4:	08005a35 	.word	0x08005a35

08005cd8 <_sbrk_r>:
 8005cd8:	b538      	push	{r3, r4, r5, lr}
 8005cda:	4c06      	ldr	r4, [pc, #24]	; (8005cf4 <_sbrk_r+0x1c>)
 8005cdc:	2300      	movs	r3, #0
 8005cde:	4605      	mov	r5, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	6023      	str	r3, [r4, #0]
 8005ce4:	f7fd ff96 	bl	8003c14 <_sbrk>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d102      	bne.n	8005cf2 <_sbrk_r+0x1a>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	b103      	cbz	r3, 8005cf2 <_sbrk_r+0x1a>
 8005cf0:	602b      	str	r3, [r5, #0]
 8005cf2:	bd38      	pop	{r3, r4, r5, pc}
 8005cf4:	20000304 	.word	0x20000304

08005cf8 <__ascii_mbtowc>:
 8005cf8:	b082      	sub	sp, #8
 8005cfa:	b901      	cbnz	r1, 8005cfe <__ascii_mbtowc+0x6>
 8005cfc:	a901      	add	r1, sp, #4
 8005cfe:	b142      	cbz	r2, 8005d12 <__ascii_mbtowc+0x1a>
 8005d00:	b14b      	cbz	r3, 8005d16 <__ascii_mbtowc+0x1e>
 8005d02:	7813      	ldrb	r3, [r2, #0]
 8005d04:	600b      	str	r3, [r1, #0]
 8005d06:	7812      	ldrb	r2, [r2, #0]
 8005d08:	1c10      	adds	r0, r2, #0
 8005d0a:	bf18      	it	ne
 8005d0c:	2001      	movne	r0, #1
 8005d0e:	b002      	add	sp, #8
 8005d10:	4770      	bx	lr
 8005d12:	4610      	mov	r0, r2
 8005d14:	e7fb      	b.n	8005d0e <__ascii_mbtowc+0x16>
 8005d16:	f06f 0001 	mvn.w	r0, #1
 8005d1a:	e7f8      	b.n	8005d0e <__ascii_mbtowc+0x16>

08005d1c <memmove>:
 8005d1c:	4288      	cmp	r0, r1
 8005d1e:	b510      	push	{r4, lr}
 8005d20:	eb01 0302 	add.w	r3, r1, r2
 8005d24:	d807      	bhi.n	8005d36 <memmove+0x1a>
 8005d26:	1e42      	subs	r2, r0, #1
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	d00a      	beq.n	8005d42 <memmove+0x26>
 8005d2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d34:	e7f8      	b.n	8005d28 <memmove+0xc>
 8005d36:	4283      	cmp	r3, r0
 8005d38:	d9f5      	bls.n	8005d26 <memmove+0xa>
 8005d3a:	1881      	adds	r1, r0, r2
 8005d3c:	1ad2      	subs	r2, r2, r3
 8005d3e:	42d3      	cmn	r3, r2
 8005d40:	d100      	bne.n	8005d44 <memmove+0x28>
 8005d42:	bd10      	pop	{r4, pc}
 8005d44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d4c:	e7f7      	b.n	8005d3e <memmove+0x22>

08005d4e <__malloc_lock>:
 8005d4e:	4770      	bx	lr

08005d50 <__malloc_unlock>:
 8005d50:	4770      	bx	lr

08005d52 <_realloc_r>:
 8005d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d54:	4607      	mov	r7, r0
 8005d56:	4614      	mov	r4, r2
 8005d58:	460e      	mov	r6, r1
 8005d5a:	b921      	cbnz	r1, 8005d66 <_realloc_r+0x14>
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d62:	f7ff be0d 	b.w	8005980 <_malloc_r>
 8005d66:	b922      	cbnz	r2, 8005d72 <_realloc_r+0x20>
 8005d68:	f7ff fdbc 	bl	80058e4 <_free_r>
 8005d6c:	4625      	mov	r5, r4
 8005d6e:	4628      	mov	r0, r5
 8005d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d72:	f000 f821 	bl	8005db8 <_malloc_usable_size_r>
 8005d76:	42a0      	cmp	r0, r4
 8005d78:	d20f      	bcs.n	8005d9a <_realloc_r+0x48>
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	4638      	mov	r0, r7
 8005d7e:	f7ff fdff 	bl	8005980 <_malloc_r>
 8005d82:	4605      	mov	r5, r0
 8005d84:	2800      	cmp	r0, #0
 8005d86:	d0f2      	beq.n	8005d6e <_realloc_r+0x1c>
 8005d88:	4631      	mov	r1, r6
 8005d8a:	4622      	mov	r2, r4
 8005d8c:	f7ff fab6 	bl	80052fc <memcpy>
 8005d90:	4631      	mov	r1, r6
 8005d92:	4638      	mov	r0, r7
 8005d94:	f7ff fda6 	bl	80058e4 <_free_r>
 8005d98:	e7e9      	b.n	8005d6e <_realloc_r+0x1c>
 8005d9a:	4635      	mov	r5, r6
 8005d9c:	e7e7      	b.n	8005d6e <_realloc_r+0x1c>

08005d9e <__ascii_wctomb>:
 8005d9e:	b149      	cbz	r1, 8005db4 <__ascii_wctomb+0x16>
 8005da0:	2aff      	cmp	r2, #255	; 0xff
 8005da2:	bf85      	ittet	hi
 8005da4:	238a      	movhi	r3, #138	; 0x8a
 8005da6:	6003      	strhi	r3, [r0, #0]
 8005da8:	700a      	strbls	r2, [r1, #0]
 8005daa:	f04f 30ff 	movhi.w	r0, #4294967295
 8005dae:	bf98      	it	ls
 8005db0:	2001      	movls	r0, #1
 8005db2:	4770      	bx	lr
 8005db4:	4608      	mov	r0, r1
 8005db6:	4770      	bx	lr

08005db8 <_malloc_usable_size_r>:
 8005db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dbc:	1f18      	subs	r0, r3, #4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bfbc      	itt	lt
 8005dc2:	580b      	ldrlt	r3, [r1, r0]
 8005dc4:	18c0      	addlt	r0, r0, r3
 8005dc6:	4770      	bx	lr

08005dc8 <_init>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	bf00      	nop
 8005dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dce:	bc08      	pop	{r3}
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	4770      	bx	lr

08005dd4 <_fini>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	bf00      	nop
 8005dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dda:	bc08      	pop	{r3}
 8005ddc:	469e      	mov	lr, r3
 8005dde:	4770      	bx	lr
