
RASP_I2C_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08006d30  08006d30  00016d30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fd8  08006fd8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006fd8  08006fd8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fd8  08006fd8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fd8  08006fd8  00016fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fdc  08006fdc  00016fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  200001dc  080071bc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  080071bc  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c703  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d7e  00000000  00000000  0002c90f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a40  00000000  00000000  0002e690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000948  00000000  00000000  0002f0d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a143  00000000  00000000  0002fa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097d0  00000000  00000000  00049b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095377  00000000  00000000  0005332b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e86a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000335c  00000000  00000000  000e8720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d18 	.word	0x08006d18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006d18 	.word	0x08006d18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f94d 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f003 febe 	bl	8004944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f965 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f92d 	bl	8000e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000004 	.word	0x20000004
 8000c30:	20000000 	.word	0x20000000

08000c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000004 	.word	0x20000004
 8000c58:	20000204 	.word	0x20000204

08000c5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000204 	.word	0x20000204

08000c74 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <HAL_Delay+0x40>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffde 	bl	8000c5c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e24:	d301      	bcc.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00f      	b.n	8000e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <SysTick_Config+0x40>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f7ff ff8e 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x40>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x40>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff29 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff3e 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff8e 	bl	8000dac <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff31 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffa2 	bl	8000e14 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d005      	beq.n	8000efc <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	73fb      	strb	r3, [r7, #15]
 8000efa:	e027      	b.n	8000f4c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 020e 	bic.w	r2, r2, #14
 8000f0a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0201 	bic.w	r2, r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f24:	2101      	movs	r1, #1
 8000f26:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	4798      	blx	r3
    } 
  }
  return status;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e154      	b.n	8001212 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8146 	beq.w	800120c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x38>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b12      	cmp	r3, #18
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	6939      	ldr	r1, [r7, #16]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d00b      	beq.n	800102c <HAL_GPIO_Init+0xd4>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b02      	cmp	r3, #2
 800101a:	d007      	beq.n	800102c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001020:	2b11      	cmp	r3, #17
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b12      	cmp	r3, #18
 800102a:	d130      	bne.n	800108e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001062:	2201      	movs	r2, #1
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	091b      	lsrs	r3, r3, #4
 8001078:	f003 0201 	and.w	r2, r3, #1
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 80a0 	beq.w	800120c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010cc:	4b58      	ldr	r3, [pc, #352]	; (8001230 <HAL_GPIO_Init+0x2d8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a57      	ldr	r2, [pc, #348]	; (8001230 <HAL_GPIO_Init+0x2d8>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b55      	ldr	r3, [pc, #340]	; (8001230 <HAL_GPIO_Init+0x2d8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010e4:	4a53      	ldr	r2, [pc, #332]	; (8001234 <HAL_GPIO_Init+0x2dc>)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800110e:	d019      	beq.n	8001144 <HAL_GPIO_Init+0x1ec>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a49      	ldr	r2, [pc, #292]	; (8001238 <HAL_GPIO_Init+0x2e0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d013      	beq.n	8001140 <HAL_GPIO_Init+0x1e8>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a48      	ldr	r2, [pc, #288]	; (800123c <HAL_GPIO_Init+0x2e4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d00d      	beq.n	800113c <HAL_GPIO_Init+0x1e4>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a47      	ldr	r2, [pc, #284]	; (8001240 <HAL_GPIO_Init+0x2e8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d007      	beq.n	8001138 <HAL_GPIO_Init+0x1e0>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a46      	ldr	r2, [pc, #280]	; (8001244 <HAL_GPIO_Init+0x2ec>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d101      	bne.n	8001134 <HAL_GPIO_Init+0x1dc>
 8001130:	2304      	movs	r3, #4
 8001132:	e008      	b.n	8001146 <HAL_GPIO_Init+0x1ee>
 8001134:	2305      	movs	r3, #5
 8001136:	e006      	b.n	8001146 <HAL_GPIO_Init+0x1ee>
 8001138:	2303      	movs	r3, #3
 800113a:	e004      	b.n	8001146 <HAL_GPIO_Init+0x1ee>
 800113c:	2302      	movs	r3, #2
 800113e:	e002      	b.n	8001146 <HAL_GPIO_Init+0x1ee>
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <HAL_GPIO_Init+0x1ee>
 8001144:	2300      	movs	r3, #0
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	f002 0203 	and.w	r2, r2, #3
 800114c:	0092      	lsls	r2, r2, #2
 800114e:	4093      	lsls	r3, r2
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001156:	4937      	ldr	r1, [pc, #220]	; (8001234 <HAL_GPIO_Init+0x2dc>)
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	3302      	adds	r3, #2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001164:	4b38      	ldr	r3, [pc, #224]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001188:	4a2f      	ldr	r2, [pc, #188]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800118e:	4b2e      	ldr	r3, [pc, #184]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011b2:	4a25      	ldr	r2, [pc, #148]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011b8:	4b23      	ldr	r3, [pc, #140]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011dc:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001206:	4a10      	ldr	r2, [pc, #64]	; (8001248 <HAL_GPIO_Init+0x2f0>)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	3301      	adds	r3, #1
 8001210:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	f47f aea3 	bne.w	8000f68 <HAL_GPIO_Init+0x10>
  }
}
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	48000400 	.word	0x48000400
 800123c:	48000800 	.word	0x48000800
 8001240:	48000c00 	.word	0x48000c00
 8001244:	48001000 	.word	0x48001000
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
 8001258:	4613      	mov	r3, r2
 800125a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800125c:	787b      	ldrb	r3, [r7, #1]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001268:	e002      	b.n	8001270 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e081      	b.n	8001392 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d106      	bne.n	80012a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f003 fb72 	bl	800498c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2224      	movs	r2, #36	; 0x24
 80012ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	e006      	b.n	8001304 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001302:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d104      	bne.n	8001316 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001314:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001328:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001338:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691a      	ldr	r2, [r3, #16]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	ea42 0103 	orr.w	r1, r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	021a      	lsls	r2, r3, #8
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	430a      	orrs	r2, r1
 8001352:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69d9      	ldr	r1, [r3, #28]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1a      	ldr	r2, [r3, #32]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0201 	orr.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2220      	movs	r2, #32
 800137e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	4608      	mov	r0, r1
 80013a6:	4611      	mov	r1, r2
 80013a8:	461a      	mov	r2, r3
 80013aa:	4603      	mov	r3, r0
 80013ac:	817b      	strh	r3, [r7, #10]
 80013ae:	460b      	mov	r3, r1
 80013b0:	813b      	strh	r3, [r7, #8]
 80013b2:	4613      	mov	r3, r2
 80013b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b20      	cmp	r3, #32
 80013c0:	f040 80fd 	bne.w	80015be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d002      	beq.n	80013d0 <HAL_I2C_Mem_Read+0x34>
 80013ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d105      	bne.n	80013dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0f1      	b.n	80015c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_I2C_Mem_Read+0x4e>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e0ea      	b.n	80015c0 <HAL_I2C_Mem_Read+0x224>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013f2:	f7ff fc33 	bl	8000c5c <HAL_GetTick>
 80013f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2319      	movs	r3, #25
 80013fe:	2201      	movs	r2, #1
 8001400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	f000 fdd9 	bl	8001fbc <I2C_WaitOnFlagUntilTimeout>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e0d5      	b.n	80015c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2222      	movs	r2, #34	; 0x22
 8001418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2240      	movs	r2, #64	; 0x40
 8001420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6a3a      	ldr	r2, [r7, #32]
 800142e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001434:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2200      	movs	r2, #0
 800143a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800143c:	88f8      	ldrh	r0, [r7, #6]
 800143e:	893a      	ldrh	r2, [r7, #8]
 8001440:	8979      	ldrh	r1, [r7, #10]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	4603      	mov	r3, r0
 800144c:	68f8      	ldr	r0, [r7, #12]
 800144e:	f000 fa6f 	bl	8001930 <I2C_RequestMemoryRead>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d005      	beq.n	8001464 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0ad      	b.n	80015c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001468:	b29b      	uxth	r3, r3
 800146a:	2bff      	cmp	r3, #255	; 0xff
 800146c:	d90e      	bls.n	800148c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	22ff      	movs	r2, #255	; 0xff
 8001472:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001478:	b2da      	uxtb	r2, r3
 800147a:	8979      	ldrh	r1, [r7, #10]
 800147c:	4b52      	ldr	r3, [pc, #328]	; (80015c8 <HAL_I2C_Mem_Read+0x22c>)
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f000 febb 	bl	8002200 <I2C_TransferConfig>
 800148a:	e00f      	b.n	80014ac <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001490:	b29a      	uxth	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149a:	b2da      	uxtb	r2, r3
 800149c:	8979      	ldrh	r1, [r7, #10]
 800149e:	4b4a      	ldr	r3, [pc, #296]	; (80015c8 <HAL_I2C_Mem_Read+0x22c>)
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 feaa 	bl	8002200 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	2200      	movs	r2, #0
 80014b4:	2104      	movs	r1, #4
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 fd80 	bl	8001fbc <I2C_WaitOnFlagUntilTimeout>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e07c      	b.n	80015c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e2:	3b01      	subs	r3, #1
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d034      	beq.n	800156c <HAL_I2C_Mem_Read+0x1d0>
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001506:	2b00      	cmp	r3, #0
 8001508:	d130      	bne.n	800156c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001510:	2200      	movs	r2, #0
 8001512:	2180      	movs	r1, #128	; 0x80
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 fd51 	bl	8001fbc <I2C_WaitOnFlagUntilTimeout>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e04d      	b.n	80015c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	2bff      	cmp	r3, #255	; 0xff
 800152c:	d90e      	bls.n	800154c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	22ff      	movs	r2, #255	; 0xff
 8001532:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001538:	b2da      	uxtb	r2, r3
 800153a:	8979      	ldrh	r1, [r7, #10]
 800153c:	2300      	movs	r3, #0
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 fe5b 	bl	8002200 <I2C_TransferConfig>
 800154a:	e00f      	b.n	800156c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155a:	b2da      	uxtb	r2, r3
 800155c:	8979      	ldrh	r1, [r7, #10]
 800155e:	2300      	movs	r3, #0
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 fe4a 	bl	8002200 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001570:	b29b      	uxth	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d19a      	bne.n	80014ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 fd9e 	bl	80020bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e01a      	b.n	80015c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2220      	movs	r2, #32
 8001590:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_I2C_Mem_Read+0x230>)
 800159e:	400b      	ands	r3, r1
 80015a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2220      	movs	r2, #32
 80015a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80015be:	2302      	movs	r3, #2
  }
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	80002400 	.word	0x80002400
 80015cc:	fe00e800 	.word	0xfe00e800

080015d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	68f9      	ldr	r1, [r7, #12]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
  }
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	0a1b      	lsrs	r3, r3, #8
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d010      	beq.n	800164a <HAL_I2C_ER_IRQHandler+0x46>
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	09db      	lsrs	r3, r3, #7
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00a      	beq.n	800164a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	f043 0201 	orr.w	r2, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001648:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	0a9b      	lsrs	r3, r3, #10
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d010      	beq.n	8001678 <HAL_I2C_ER_IRQHandler+0x74>
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	09db      	lsrs	r3, r3, #7
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d00a      	beq.n	8001678 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001666:	f043 0208 	orr.w	r2, r3, #8
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001676:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	0a5b      	lsrs	r3, r3, #9
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b00      	cmp	r3, #0
 8001682:	d010      	beq.n	80016a6 <HAL_I2C_ER_IRQHandler+0xa2>
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	09db      	lsrs	r3, r3, #7
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00a      	beq.n	80016a6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	f043 0202 	orr.w	r2, r3, #2
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 030b 	and.w	r3, r3, #11
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80016b6:	68f9      	ldr	r1, [r7, #12]
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fb77 	bl	8001dac <I2C_ITError>
  }
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <I2C_Slave_ISR_IT+0x24>
 800174a:	2302      	movs	r3, #2
 800174c:	e0ec      	b.n	8001928 <I2C_Slave_ISR_IT+0x1fe>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	095b      	lsrs	r3, r3, #5
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d009      	beq.n	8001776 <I2C_Slave_ISR_IT+0x4c>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	095b      	lsrs	r3, r3, #5
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800176e:	6939      	ldr	r1, [r7, #16]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f9f1 	bl	8001b58 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d04d      	beq.n	800181e <I2C_Slave_ISR_IT+0xf4>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d047      	beq.n	800181e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001792:	b29b      	uxth	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d128      	bne.n	80017ea <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b28      	cmp	r3, #40	; 0x28
 80017a2:	d108      	bne.n	80017b6 <I2C_Slave_ISR_IT+0x8c>
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017aa:	d104      	bne.n	80017b6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80017ac:	6939      	ldr	r1, [r7, #16]
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f000 faa8 	bl	8001d04 <I2C_ITListenCplt>
 80017b4:	e032      	b.n	800181c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b29      	cmp	r3, #41	; 0x29
 80017c0:	d10e      	bne.n	80017e0 <I2C_Slave_ISR_IT+0xb6>
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80017c8:	d00a      	beq.n	80017e0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2210      	movs	r2, #16
 80017d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 fbaa 	bl	8001f2c <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 f97f 	bl	8001adc <I2C_ITSlaveSeqCplt>
 80017de:	e01d      	b.n	800181c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2210      	movs	r2, #16
 80017e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80017e8:	e096      	b.n	8001918 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2210      	movs	r2, #16
 80017f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f043 0204 	orr.w	r2, r3, #4
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <I2C_Slave_ISR_IT+0xe4>
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180a:	f040 8085 	bne.w	8001918 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4619      	mov	r1, r3
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 fac9 	bl	8001dac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800181a:	e07d      	b.n	8001918 <I2C_Slave_ISR_IT+0x1ee>
 800181c:	e07c      	b.n	8001918 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d030      	beq.n	800188c <I2C_Slave_ISR_IT+0x162>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d02a      	beq.n	800188c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183a:	b29b      	uxth	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d018      	beq.n	8001872 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	3b01      	subs	r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001868:	b29b      	uxth	r3, r3
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001876:	b29b      	uxth	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	d14f      	bne.n	800191c <I2C_Slave_ISR_IT+0x1f2>
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001882:	d04b      	beq.n	800191c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f929 	bl	8001adc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800188a:	e047      	b.n	800191c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00a      	beq.n	80018ae <I2C_Slave_ISR_IT+0x184>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	08db      	lsrs	r3, r3, #3
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d004      	beq.n	80018ae <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80018a4:	6939      	ldr	r1, [r7, #16]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f896 	bl	80019d8 <I2C_ITAddrCplt>
 80018ac:	e037      	b.n	800191e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d031      	beq.n	800191e <I2C_Slave_ISR_IT+0x1f4>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d02b      	beq.n	800191e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d018      	beq.n	8001902 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8001900:	e00d      	b.n	800191e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001908:	d002      	beq.n	8001910 <I2C_Slave_ISR_IT+0x1e6>
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d106      	bne.n	800191e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 f8e3 	bl	8001adc <I2C_ITSlaveSeqCplt>
 8001916:	e002      	b.n	800191e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001918:	bf00      	nop
 800191a:	e000      	b.n	800191e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800191c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af02      	add	r7, sp, #8
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	4608      	mov	r0, r1
 800193a:	4611      	mov	r1, r2
 800193c:	461a      	mov	r2, r3
 800193e:	4603      	mov	r3, r0
 8001940:	817b      	strh	r3, [r7, #10]
 8001942:	460b      	mov	r3, r1
 8001944:	813b      	strh	r3, [r7, #8]
 8001946:	4613      	mov	r3, r2
 8001948:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800194a:	88fb      	ldrh	r3, [r7, #6]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	8979      	ldrh	r1, [r7, #10]
 8001950:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <I2C_RequestMemoryRead+0xa4>)
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 fc52 	bl	8002200 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 fb6b 	bl	800203c <I2C_WaitOnTXISFlagUntilTimeout>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e02c      	b.n	80019ca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d105      	bne.n	8001982 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001976:	893b      	ldrh	r3, [r7, #8]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
 8001980:	e015      	b.n	80019ae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001982:	893b      	ldrh	r3, [r7, #8]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	b29b      	uxth	r3, r3
 8001988:	b2da      	uxtb	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	69b9      	ldr	r1, [r7, #24]
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f000 fb51 	bl	800203c <I2C_WaitOnTXISFlagUntilTimeout>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e012      	b.n	80019ca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019a4:	893b      	ldrh	r3, [r7, #8]
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2200      	movs	r2, #0
 80019b6:	2140      	movs	r1, #64	; 0x40
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 faff 	bl	8001fbc <I2C_WaitOnFlagUntilTimeout>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	80002000 	.word	0x80002000

080019d8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80019ee:	2b28      	cmp	r3, #40	; 0x28
 80019f0:	d168      	bne.n	8001ac4 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	0c1b      	lsrs	r3, r3, #16
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	0c1b      	lsrs	r3, r3, #16
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a10:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a2c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d137      	bne.n	8001aa6 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001a36:	897b      	ldrh	r3, [r7, #10]
 8001a38:	09db      	lsrs	r3, r3, #7
 8001a3a:	b29a      	uxth	r2, r3
 8001a3c:	89bb      	ldrh	r3, [r7, #12]
 8001a3e:	4053      	eors	r3, r2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	f003 0306 	and.w	r3, r3, #6
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d11c      	bne.n	8001a84 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001a4a:	897b      	ldrh	r3, [r7, #10]
 8001a4c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d139      	bne.n	8001ad4 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a76:	89ba      	ldrh	r2, [r7, #12]
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f002 fde9 	bl	8004654 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001a82:	e027      	b.n	8001ad4 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8001a84:	893b      	ldrh	r3, [r7, #8]
 8001a86:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a88:	2104      	movs	r1, #4
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fbe6 	bl	800225c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a98:	89ba      	ldrh	r2, [r7, #12]
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f002 fdd8 	bl	8004654 <HAL_I2C_AddrCallback>
}
 8001aa4:	e016      	b.n	8001ad4 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fbd7 	bl	800225c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001ab6:	89ba      	ldrh	r2, [r7, #12]
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	4619      	mov	r1, r3
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f002 fdc9 	bl	8004654 <HAL_I2C_AddrCallback>
}
 8001ac2:	e007      	b.n	8001ad4 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2208      	movs	r2, #8
 8001aca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b29      	cmp	r3, #41	; 0x29
 8001af6:	d112      	bne.n	8001b1e <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2228      	movs	r2, #40	; 0x28
 8001afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2221      	movs	r2, #33	; 0x21
 8001b04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b06:	2101      	movs	r1, #1
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fba7 	bl	800225c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff fdd5 	bl	80016c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001b1c:	e017      	b.n	8001b4e <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b2a      	cmp	r3, #42	; 0x2a
 8001b28:	d111      	bne.n	8001b4e <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2228      	movs	r2, #40	; 0x28
 8001b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2222      	movs	r2, #34	; 0x22
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b38:	2102      	movs	r1, #2
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fb8e 	bl	800225c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff fdc6 	bl	80016da <HAL_I2C_SlaveRxCpltCallback>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2220      	movs	r2, #32
 8001b74:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001b76:	2107      	movs	r1, #7
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 fb6f 	bl	800225c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b8c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b58      	ldr	r3, [pc, #352]	; (8001cfc <I2C_ITSlaveCplt+0x1a4>)
 8001b9a:	400b      	ands	r3, r1
 8001b9c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f9c4 	bl	8001f2c <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	0b9b      	lsrs	r3, r3, #14
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00b      	beq.n	8001bc8 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d018      	beq.n	8001bea <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bc6:	e010      	b.n	8001bea <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	0bdb      	lsrs	r3, r3, #15
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00a      	beq.n	8001bea <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d020      	beq.n	8001c38 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
 8001bfc:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00c      	beq.n	8001c38 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f043 0204 	orr.w	r2, r3, #4
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d010      	beq.n	8001c8c <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f89b 	bl	8001dac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b28      	cmp	r3, #40	; 0x28
 8001c80:	d138      	bne.n	8001cf4 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001c82:	68f9      	ldr	r1, [r7, #12]
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f83d 	bl	8001d04 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001c8a:	e033      	b.n	8001cf4 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c94:	d011      	beq.n	8001cba <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ff20 	bl	8001adc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a18      	ldr	r2, [pc, #96]	; (8001d00 <I2C_ITSlaveCplt+0x1a8>)
 8001ca0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fd1b 	bl	80016ee <HAL_I2C_ListenCpltCallback>
}
 8001cb8:	e01c      	b.n	8001cf4 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b22      	cmp	r3, #34	; 0x22
 8001cc4:	d10b      	bne.n	8001cde <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fcff 	bl	80016da <HAL_I2C_SlaveRxCpltCallback>
}
 8001cdc:	e00a      	b.n	8001cf4 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fce9 	bl	80016c6 <HAL_I2C_SlaveTxCpltCallback>
}
 8001cf4:	bf00      	nop
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	fe00e800 	.word	0xfe00e800
 8001d00:	ffff0000 	.word	0xffff0000

08001d04 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <I2C_ITListenCplt+0xa4>)
 8001d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d022      	beq.n	8001d82 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d012      	beq.n	8001d82 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	f043 0204 	orr.w	r2, r3, #4
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001d82:	2107      	movs	r1, #7
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fa69 	bl	800225c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2210      	movs	r2, #16
 8001d90:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff fca7 	bl	80016ee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	ffff0000 	.word	0xffff0000

08001dac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbc:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a55      	ldr	r2, [pc, #340]	; (8001f20 <I2C_ITError+0x174>)
 8001dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	2b28      	cmp	r3, #40	; 0x28
 8001de2:	d005      	beq.n	8001df0 <I2C_ITError+0x44>
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2b29      	cmp	r3, #41	; 0x29
 8001de8:	d002      	beq.n	8001df0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b2a      	cmp	r3, #42	; 0x2a
 8001dee:	d10e      	bne.n	8001e0e <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001df0:	2103      	movs	r1, #3
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fa32 	bl	800225c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2228      	movs	r2, #40	; 0x28
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a46      	ldr	r2, [pc, #280]	; (8001f24 <I2C_ITError+0x178>)
 8001e0a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e0c:	e013      	b.n	8001e36 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e0e:	2107      	movs	r1, #7
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 fa23 	bl	800225c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b60      	cmp	r3, #96	; 0x60
 8001e20:	d003      	beq.n	8001e2a <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e44:	d123      	bne.n	8001e8e <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e54:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d05c      	beq.n	8001f18 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e62:	4a31      	ldr	r2, [pc, #196]	; (8001f28 <I2C_ITError+0x17c>)
 8001e64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff f831 	bl	8000eda <HAL_DMA_Abort_IT>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d04c      	beq.n	8001f18 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e8c:	e044      	b.n	8001f18 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e9c:	d123      	bne.n	8001ee6 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eac:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d030      	beq.n	8001f18 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eba:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <I2C_ITError+0x17c>)
 8001ebc:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f805 	bl	8000eda <HAL_DMA_Abort_IT>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d020      	beq.n	8001f18 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4798      	blx	r3
}
 8001ee4:	e018      	b.n	8001f18 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b60      	cmp	r3, #96	; 0x60
 8001ef0:	d10b      	bne.n	8001f0a <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2220      	movs	r2, #32
 8001ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fc07 	bl	8001716 <HAL_I2C_AbortCpltCallback>
}
 8001f08:	e006      	b.n	8001f18 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff fbf5 	bl	8001702 <HAL_I2C_ErrorCallback>
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	ffff0000 	.word	0xffff0000
 8001f24:	0800172b 	.word	0x0800172b
 8001f28:	08001f75 	.word	0x08001f75

08001f2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d103      	bne.n	8001f4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2200      	movs	r2, #0
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d007      	beq.n	8001f68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699a      	ldr	r2, [r3, #24]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	619a      	str	r2, [r3, #24]
  }
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	2200      	movs	r2, #0
 8001f88:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8e:	2200      	movs	r2, #0
 8001f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b60      	cmp	r3, #96	; 0x60
 8001f9c:	d107      	bne.n	8001fae <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff fbb5 	bl	8001716 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001fac:	e002      	b.n	8001fb4 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f7ff fba7 	bl	8001702 <HAL_I2C_ErrorCallback>
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fcc:	e022      	b.n	8002014 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d01e      	beq.n	8002014 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fd6:	f7fe fe41 	bl	8000c5c <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d302      	bcc.n	8001fec <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d113      	bne.n	8002014 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e00f      	b.n	8002034 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	4013      	ands	r3, r2
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	429a      	cmp	r2, r3
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	461a      	mov	r2, r3
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	429a      	cmp	r2, r3
 8002030:	d0cd      	beq.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002048:	e02c      	b.n	80020a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f870 	bl	8002134 <I2C_IsAcknowledgeFailed>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e02a      	b.n	80020b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d01e      	beq.n	80020a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002066:	f7fe fdf9 	bl	8000c5c <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	68ba      	ldr	r2, [r7, #8]
 8002072:	429a      	cmp	r2, r3
 8002074:	d302      	bcc.n	800207c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d113      	bne.n	80020a4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002080:	f043 0220 	orr.w	r2, r3, #32
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2220      	movs	r2, #32
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e007      	b.n	80020b4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d1cb      	bne.n	800204a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020c8:	e028      	b.n	800211c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68b9      	ldr	r1, [r7, #8]
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f830 	bl	8002134 <I2C_IsAcknowledgeFailed>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e026      	b.n	800212c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020de:	f7fe fdbd 	bl	8000c5c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d302      	bcc.n	80020f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d113      	bne.n	800211c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e007      	b.n	800212c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b20      	cmp	r3, #32
 8002128:	d1cf      	bne.n	80020ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	2b10      	cmp	r3, #16
 800214c:	d151      	bne.n	80021f2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800214e:	e022      	b.n	8002196 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002156:	d01e      	beq.n	8002196 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002158:	f7fe fd80 	bl	8000c5c <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	429a      	cmp	r2, r3
 8002166:	d302      	bcc.n	800216e <I2C_IsAcknowledgeFailed+0x3a>
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d113      	bne.n	8002196 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f043 0220 	orr.w	r2, r3, #32
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e02e      	b.n	80021f4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d1d5      	bne.n	8002150 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2210      	movs	r2, #16
 80021aa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2220      	movs	r2, #32
 80021b2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff feb9 	bl	8001f2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <I2C_IsAcknowledgeFailed+0xc8>)
 80021c6:	400b      	ands	r3, r1
 80021c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f043 0204 	orr.w	r2, r3, #4
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	fe00e800 	.word	0xfe00e800

08002200 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	817b      	strh	r3, [r7, #10]
 800220e:	4613      	mov	r3, r2
 8002210:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	0d5b      	lsrs	r3, r3, #21
 800221c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <I2C_TransferConfig+0x58>)
 8002222:	430b      	orrs	r3, r1
 8002224:	43db      	mvns	r3, r3
 8002226:	ea02 0103 	and.w	r1, r2, r3
 800222a:	897b      	ldrh	r3, [r7, #10]
 800222c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002230:	7a7b      	ldrb	r3, [r7, #9]
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	431a      	orrs	r2, r3
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	431a      	orrs	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	03ff63ff 	.word	0x03ff63ff

0800225c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800226c:	887b      	ldrh	r3, [r7, #2]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00f      	beq.n	8002296 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800227c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800228a:	2b28      	cmp	r3, #40	; 0x28
 800228c:	d003      	beq.n	8002296 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002294:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002296:	887b      	ldrh	r3, [r7, #2]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00f      	beq.n	80022c0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80022a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022b4:	2b28      	cmp	r3, #40	; 0x28
 80022b6:	d003      	beq.n	80022c0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80022be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80022c0:	887b      	ldrh	r3, [r7, #2]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	f003 0311 	and.w	r3, r3, #17
 80022d8:	2b11      	cmp	r3, #17
 80022da:	d103      	bne.n	80022e4 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80022e2:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	f003 0312 	and.w	r3, r3, #18
 80022ea:	2b12      	cmp	r3, #18
 80022ec:	d103      	bne.n	80022f6 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f043 0320 	orr.w	r3, r3, #32
 80022f4:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80022f6:	887b      	ldrh	r3, [r7, #2]
 80022f8:	f003 0312 	and.w	r3, r3, #18
 80022fc:	2b12      	cmp	r3, #18
 80022fe:	d103      	bne.n	8002308 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002306:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6819      	ldr	r1, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	43da      	mvns	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	400a      	ands	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b20      	cmp	r3, #32
 800233a:	d138      	bne.n	80023ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002346:	2302      	movs	r3, #2
 8002348:	e032      	b.n	80023b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2224      	movs	r2, #36	; 0x24
 8002356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002378:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0201 	orr.w	r2, r2, #1
 8002398:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e000      	b.n	80023b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023ae:	2302      	movs	r3, #2
  }
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d139      	bne.n	8002446 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d101      	bne.n	80023e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023dc:	2302      	movs	r3, #2
 80023de:	e033      	b.n	8002448 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2224      	movs	r2, #36	; 0x24
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800240e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 0201 	orr.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e000      	b.n	8002448 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002446:	2302      	movs	r3, #2
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800245a:	af00      	add	r7, sp, #0
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	f000 bef4 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 816a 	beq.w	8002752 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800247e:	4bb3      	ldr	r3, [pc, #716]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b04      	cmp	r3, #4
 8002488:	d00c      	beq.n	80024a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800248a:	4bb0      	ldr	r3, [pc, #704]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b08      	cmp	r3, #8
 8002494:	d159      	bne.n	800254a <HAL_RCC_OscConfig+0xf6>
 8002496:	4bad      	ldr	r3, [pc, #692]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a2:	d152      	bne.n	800254a <HAL_RCC_OscConfig+0xf6>
 80024a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d102      	bne.n	80024d6 <HAL_RCC_OscConfig+0x82>
 80024d0:	4b9e      	ldr	r3, [pc, #632]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0xae>
 80024d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024da:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80024e2:	fa93 f3a3 	rbit	r3, r3
 80024e6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ee:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024f2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024f6:	fa93 f3a3 	rbit	r3, r3
 80024fa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024fe:	4b93      	ldr	r3, [pc, #588]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002506:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800250a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800250e:	fa92 f2a2 	rbit	r2, r2
 8002512:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002516:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800251a:	fab2 f282 	clz	r2, r2
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	f042 0220 	orr.w	r2, r2, #32
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	f002 021f 	and.w	r2, r2, #31
 800252a:	2101      	movs	r1, #1
 800252c:	fa01 f202 	lsl.w	r2, r1, r2
 8002530:	4013      	ands	r3, r2
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 810c 	beq.w	8002750 <HAL_RCC_OscConfig+0x2fc>
 8002538:	1d3b      	adds	r3, r7, #4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 8106 	bne.w	8002750 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	f000 be86 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002554:	d106      	bne.n	8002564 <HAL_RCC_OscConfig+0x110>
 8002556:	4b7d      	ldr	r3, [pc, #500]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a7c      	ldr	r2, [pc, #496]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e030      	b.n	80025c6 <HAL_RCC_OscConfig+0x172>
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x134>
 800256e:	4b77      	ldr	r3, [pc, #476]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a76      	ldr	r2, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	4b74      	ldr	r3, [pc, #464]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a73      	ldr	r2, [pc, #460]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e01e      	b.n	80025c6 <HAL_RCC_OscConfig+0x172>
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_OscConfig+0x15a>
 8002594:	4b6d      	ldr	r3, [pc, #436]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a6c      	ldr	r2, [pc, #432]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 800259a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259e:	6013      	str	r3, [r2, #0]
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a69      	ldr	r2, [pc, #420]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0x172>
 80025ae:	4b67      	ldr	r3, [pc, #412]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a66      	ldr	r2, [pc, #408]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b64      	ldr	r3, [pc, #400]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a63      	ldr	r2, [pc, #396]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025c6:	4b61      	ldr	r3, [pc, #388]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f023 020f 	bic.w	r2, r3, #15
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	495d      	ldr	r1, [pc, #372]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d059      	beq.n	8002698 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fb3a 	bl	8000c5c <HAL_GetTick>
 80025e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ec:	e00a      	b.n	8002604 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ee:	f7fe fb35 	bl	8000c5c <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d902      	bls.n	8002604 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	f000 be29 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 8002604:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002608:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002618:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261c:	fab3 f383 	clz	r3, r3
 8002620:	b2db      	uxtb	r3, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d102      	bne.n	8002636 <HAL_RCC_OscConfig+0x1e2>
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0x20e>
 8002636:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800263a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002642:	fa93 f3a3 	rbit	r3, r3
 8002646:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800264a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800264e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002652:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800265e:	4b3b      	ldr	r3, [pc, #236]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002666:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800266a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800266e:	fa92 f2a2 	rbit	r2, r2
 8002672:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002676:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f002 021f 	and.w	r2, r2, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ab      	beq.n	80025ee <HAL_RCC_OscConfig+0x19a>
 8002696:	e05c      	b.n	8002752 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fae0 	bl	8000c5c <HAL_GetTick>
 800269c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a2:	f7fe fadb 	bl	8000c5c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d902      	bls.n	80026b8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	f000 bdcf 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 80026b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80026cc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_OscConfig+0x296>
 80026e4:	4b19      	ldr	r3, [pc, #100]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x2c2>
 80026ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026f6:	fa93 f3a3 	rbit	r3, r3
 80026fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002702:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002706:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <HAL_RCC_OscConfig+0x2f8>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800271a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800271e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002722:	fa92 f2a2 	rbit	r2, r2
 8002726:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800272a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0220 	orr.w	r2, r2, #32
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1ab      	bne.n	80026a2 <HAL_RCC_OscConfig+0x24e>
 800274a:	e002      	b.n	8002752 <HAL_RCC_OscConfig+0x2fe>
 800274c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 816f 	beq.w	8002a40 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002762:	4bd0      	ldr	r3, [pc, #832]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 030c 	and.w	r3, r3, #12
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800276e:	4bcd      	ldr	r3, [pc, #820]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d16c      	bne.n	8002854 <HAL_RCC_OscConfig+0x400>
 800277a:	4bca      	ldr	r3, [pc, #808]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d166      	bne.n	8002854 <HAL_RCC_OscConfig+0x400>
 8002786:	2302      	movs	r3, #2
 8002788:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002798:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	f043 0301 	orr.w	r3, r3, #1
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d102      	bne.n	80027b6 <HAL_RCC_OscConfig+0x362>
 80027b0:	4bbc      	ldr	r3, [pc, #752]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	e013      	b.n	80027de <HAL_RCC_OscConfig+0x38a>
 80027b6:	2302      	movs	r3, #2
 80027b8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80027c0:	fa93 f3a3 	rbit	r3, r3
 80027c4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027c8:	2302      	movs	r3, #2
 80027ca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027d2:	fa93 f3a3 	rbit	r3, r3
 80027d6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027da:	4bb2      	ldr	r3, [pc, #712]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	2202      	movs	r2, #2
 80027e0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027e4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027e8:	fa92 f2a2 	rbit	r2, r2
 80027ec:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027f0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027f4:	fab2 f282 	clz	r2, r2
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	f042 0220 	orr.w	r2, r2, #32
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	f002 021f 	and.w	r2, r2, #31
 8002804:	2101      	movs	r1, #1
 8002806:	fa01 f202 	lsl.w	r2, r1, r2
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d007      	beq.n	8002820 <HAL_RCC_OscConfig+0x3cc>
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d002      	beq.n	8002820 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	f000 bd1b 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4ba0      	ldr	r3, [pc, #640]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	21f8      	movs	r1, #248	; 0xf8
 8002830:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002838:	fa91 f1a1 	rbit	r1, r1
 800283c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002840:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002844:	fab1 f181 	clz	r1, r1
 8002848:	b2c9      	uxtb	r1, r1
 800284a:	408b      	lsls	r3, r1
 800284c:	4995      	ldr	r1, [pc, #596]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	e0f5      	b.n	8002a40 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8085 	beq.w	800296a <HAL_RCC_OscConfig+0x516>
 8002860:	2301      	movs	r3, #1
 8002862:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002872:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002880:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe f9e6 	bl	8000c5c <HAL_GetTick>
 8002890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	e00a      	b.n	80028ac <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002896:	f7fe f9e1 	bl	8000c5c <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d902      	bls.n	80028ac <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	f000 bcd5 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 80028ac:	2302      	movs	r3, #2
 80028ae:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80028be:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d102      	bne.n	80028dc <HAL_RCC_OscConfig+0x488>
 80028d6:	4b73      	ldr	r3, [pc, #460]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	e013      	b.n	8002904 <HAL_RCC_OscConfig+0x4b0>
 80028dc:	2302      	movs	r3, #2
 80028de:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028ee:	2302      	movs	r3, #2
 80028f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028f4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028f8:	fa93 f3a3 	rbit	r3, r3
 80028fc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002900:	4b68      	ldr	r3, [pc, #416]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	2202      	movs	r2, #2
 8002906:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800290a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800290e:	fa92 f2a2 	rbit	r2, r2
 8002912:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002916:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800291a:	fab2 f282 	clz	r2, r2
 800291e:	b2d2      	uxtb	r2, r2
 8002920:	f042 0220 	orr.w	r2, r2, #32
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	f002 021f 	and.w	r2, r2, #31
 800292a:	2101      	movs	r1, #1
 800292c:	fa01 f202 	lsl.w	r2, r1, r2
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0af      	beq.n	8002896 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b5b      	ldr	r3, [pc, #364]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	1d3b      	adds	r3, r7, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	21f8      	movs	r1, #248	; 0xf8
 8002946:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800294e:	fa91 f1a1 	rbit	r1, r1
 8002952:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002956:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800295a:	fab1 f181 	clz	r1, r1
 800295e:	b2c9      	uxtb	r1, r1
 8002960:	408b      	lsls	r3, r1
 8002962:	4950      	ldr	r1, [pc, #320]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
 8002968:	e06a      	b.n	8002a40 <HAL_RCC_OscConfig+0x5ec>
 800296a:	2301      	movs	r3, #1
 800296c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800297c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002980:	fab3 f383 	clz	r3, r3
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800298a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	461a      	mov	r2, r3
 8002992:	2300      	movs	r3, #0
 8002994:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7fe f961 	bl	8000c5c <HAL_GetTick>
 800299a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a0:	f7fe f95c 	bl	8000c5c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d902      	bls.n	80029b6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	f000 bc50 	b.w	8003256 <HAL_RCC_OscConfig+0xe02>
 80029b6:	2302      	movs	r3, #2
 80029b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80029c0:	fa93 f3a3 	rbit	r3, r3
 80029c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80029c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029cc:	fab3 f383 	clz	r3, r3
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d102      	bne.n	80029e6 <HAL_RCC_OscConfig+0x592>
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	e013      	b.n	8002a0e <HAL_RCC_OscConfig+0x5ba>
 80029e6:	2302      	movs	r3, #2
 80029e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029f0:	fa93 f3a3 	rbit	r3, r3
 80029f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029f8:	2302      	movs	r3, #2
 80029fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_RCC_OscConfig+0x650>)
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002a14:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002a18:	fa92 f2a2 	rbit	r2, r2
 8002a1c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002a20:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a24:	fab2 f282 	clz	r2, r2
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	f042 0220 	orr.w	r2, r2, #32
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	f002 021f 	and.w	r2, r2, #31
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1af      	bne.n	80029a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80da 	beq.w	8002c04 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d069      	beq.n	8002b2e <HAL_RCC_OscConfig+0x6da>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x654>)
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2301      	movs	r3, #1
 8002a82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a84:	f7fe f8ea 	bl	8000c5c <HAL_GetTick>
 8002a88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8c:	e00e      	b.n	8002aac <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8e:	f7fe f8e5 	bl	8000c5c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d906      	bls.n	8002aac <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e3d9      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	10908120 	.word	0x10908120
 8002aac:	2302      	movs	r3, #2
 8002aae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002abe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	fa93 f2a3 	rbit	r2, r3
 8002ad0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ada:	2202      	movs	r2, #2
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fa93 f2a3 	rbit	r2, r3
 8002ae8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002aec:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aee:	4ba5      	ldr	r3, [pc, #660]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002af6:	2102      	movs	r1, #2
 8002af8:	6019      	str	r1, [r3, #0]
 8002afa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f1a3 	rbit	r1, r3
 8002b04:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b08:	6019      	str	r1, [r3, #0]
  return result;
 8002b0a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	2101      	movs	r1, #1
 8002b22:	fa01 f303 	lsl.w	r3, r1, r3
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d0b0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x63a>
 8002b2c:	e06a      	b.n	8002c04 <HAL_RCC_OscConfig+0x7b0>
 8002b2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b36:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	fa93 f2a3 	rbit	r2, r3
 8002b40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b44:	601a      	str	r2, [r3, #0]
  return result;
 8002b46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b4a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b8c      	ldr	r3, [pc, #560]	; (8002d88 <HAL_RCC_OscConfig+0x934>)
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b60:	f7fe f87c 	bl	8000c5c <HAL_GetTick>
 8002b64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b68:	e009      	b.n	8002b7e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6a:	f7fe f877 	bl	8000c5c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e36b      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002b7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b82:	2202      	movs	r2, #2
 8002b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	fa93 f2a3 	rbit	r2, r3
 8002b90:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	fa93 f2a3 	rbit	r2, r3
 8002ba8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	601a      	str	r2, [r3, #0]
 8002bb6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fa93 f2a3 	rbit	r2, r3
 8002bc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bc4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc6:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bce:	2102      	movs	r1, #2
 8002bd0:	6019      	str	r1, [r3, #0]
 8002bd2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f1a3 	rbit	r1, r3
 8002bdc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002be0:	6019      	str	r1, [r3, #0]
  return result;
 8002be2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 031f 	and.w	r3, r3, #31
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1b2      	bne.n	8002b6a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8158 	beq.w	8002ec4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d112      	bne.n	8002c4c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c26:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	4a56      	ldr	r2, [pc, #344]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c30:	61d3      	str	r3, [r2, #28]
 8002c32:	4b54      	ldr	r3, [pc, #336]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	f107 0308 	add.w	r3, r7, #8
 8002c44:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c46:	2301      	movs	r3, #1
 8002c48:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11a      	bne.n	8002c8e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c58:	4b4c      	ldr	r3, [pc, #304]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c64:	f7fd fffa 	bl	8000c5c <HAL_GetTick>
 8002c68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e009      	b.n	8002c82 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fd fff5 	bl	8000c5c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e2e9      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c82:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <HAL_RCC_OscConfig+0x938>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d0ef      	beq.n	8002c6e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d106      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x852>
 8002c98:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a39      	ldr	r2, [pc, #228]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e02f      	b.n	8002d06 <HAL_RCC_OscConfig+0x8b2>
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_OscConfig+0x876>
 8002cb0:	4b34      	ldr	r3, [pc, #208]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a33      	ldr	r2, [pc, #204]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cb6:	f023 0301 	bic.w	r3, r3, #1
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cc2:	f023 0304 	bic.w	r3, r3, #4
 8002cc6:	6213      	str	r3, [r2, #32]
 8002cc8:	e01d      	b.n	8002d06 <HAL_RCC_OscConfig+0x8b2>
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b05      	cmp	r3, #5
 8002cd2:	d10c      	bne.n	8002cee <HAL_RCC_OscConfig+0x89a>
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	4a2a      	ldr	r2, [pc, #168]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6213      	str	r3, [r2, #32]
 8002ce0:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6213      	str	r3, [r2, #32]
 8002cec:	e00b      	b.n	8002d06 <HAL_RCC_OscConfig+0x8b2>
 8002cee:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a24      	ldr	r2, [pc, #144]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d06b      	beq.n	8002de8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d10:	f7fd ffa4 	bl	8000c5c <HAL_GetTick>
 8002d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	e00b      	b.n	8002d32 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fd ff9f 	bl	8000c5c <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e291      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002d32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d36:	2202      	movs	r2, #2
 8002d38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	fa93 f2a3 	rbit	r2, r3
 8002d44:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d4e:	2202      	movs	r2, #2
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fa93 f2a3 	rbit	r2, r3
 8002d5c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d60:	601a      	str	r2, [r3, #0]
  return result;
 8002d62:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d66:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f043 0302 	orr.w	r3, r3, #2
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d109      	bne.n	8002d90 <HAL_RCC_OscConfig+0x93c>
 8002d7c:	4b01      	ldr	r3, [pc, #4]	; (8002d84 <HAL_RCC_OscConfig+0x930>)
 8002d7e:	6a1b      	ldr	r3, [r3, #32]
 8002d80:	e014      	b.n	8002dac <HAL_RCC_OscConfig+0x958>
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	10908120 	.word	0x10908120
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d94:	2202      	movs	r2, #2
 8002d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	fa93 f2a3 	rbit	r2, r3
 8002da2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	4bbb      	ldr	r3, [pc, #748]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002db0:	2102      	movs	r1, #2
 8002db2:	6011      	str	r1, [r2, #0]
 8002db4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	fa92 f1a2 	rbit	r1, r2
 8002dbe:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002dc2:	6011      	str	r1, [r2, #0]
  return result;
 8002dc4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	fab2 f282 	clz	r2, r2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	f002 021f 	and.w	r2, r2, #31
 8002dda:	2101      	movs	r1, #1
 8002ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d099      	beq.n	8002d1a <HAL_RCC_OscConfig+0x8c6>
 8002de6:	e063      	b.n	8002eb0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7fd ff38 	bl	8000c5c <HAL_GetTick>
 8002dec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df0:	e00b      	b.n	8002e0a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df2:	f7fd ff33 	bl	8000c5c <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e225      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002e0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e0e:	2202      	movs	r2, #2
 8002e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e26:	2202      	movs	r2, #2
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	fa93 f2a3 	rbit	r2, r3
 8002e34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e38:	601a      	str	r2, [r3, #0]
  return result;
 8002e3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d102      	bne.n	8002e5a <HAL_RCC_OscConfig+0xa06>
 8002e54:	4b90      	ldr	r3, [pc, #576]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	e00d      	b.n	8002e76 <HAL_RCC_OscConfig+0xa22>
 8002e5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e5e:	2202      	movs	r2, #2
 8002e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	fa93 f2a3 	rbit	r2, r3
 8002e6c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	4b89      	ldr	r3, [pc, #548]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e7a:	2102      	movs	r1, #2
 8002e7c:	6011      	str	r1, [r2, #0]
 8002e7e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	fa92 f1a2 	rbit	r1, r2
 8002e88:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e8c:	6011      	str	r1, [r2, #0]
  return result;
 8002e8e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f002 021f 	and.w	r2, r2, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1a0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eb0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b77      	ldr	r3, [pc, #476]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	4a76      	ldr	r2, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 81c2 	beq.w	8003254 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ed0:	4b71      	ldr	r3, [pc, #452]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	f000 819c 	beq.w	8003216 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	f040 8114 	bne.w	8003112 <HAL_RCC_OscConfig+0xcbe>
 8002eea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002eee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f02:	601a      	str	r2, [r3, #0]
  return result;
 8002f04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f14:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fd fe9c 	bl	8000c5c <HAL_GetTick>
 8002f24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f28:	e009      	b.n	8002f3e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2a:	f7fd fe97 	bl	8000c5c <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e18b      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8002f3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	fa93 f2a3 	rbit	r2, r3
 8002f52:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f56:	601a      	str	r2, [r3, #0]
  return result;
 8002f58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f5c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	095b      	lsrs	r3, r3, #5
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d102      	bne.n	8002f78 <HAL_RCC_OscConfig+0xb24>
 8002f72:	4b49      	ldr	r3, [pc, #292]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	e01b      	b.n	8002fb0 <HAL_RCC_OscConfig+0xb5c>
 8002f78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	fa93 f2a3 	rbit	r2, r3
 8002fa6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fb8:	6011      	str	r1, [r2, #0]
 8002fba:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002fbe:	6812      	ldr	r2, [r2, #0]
 8002fc0:	fa92 f1a2 	rbit	r1, r2
 8002fc4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002fc8:	6011      	str	r1, [r2, #0]
  return result;
 8002fca:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	fab2 f282 	clz	r2, r2
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	f042 0220 	orr.w	r2, r2, #32
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	f002 021f 	and.w	r2, r2, #31
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d19e      	bne.n	8002f2a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fec:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	430b      	orrs	r3, r1
 8003002:	4925      	ldr	r1, [pc, #148]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
 8003008:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800300c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	fa93 f2a3 	rbit	r2, r3
 800301c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003020:	601a      	str	r2, [r3, #0]
  return result;
 8003022:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003026:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003032:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	461a      	mov	r2, r3
 800303a:	2301      	movs	r3, #1
 800303c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7fd fe0d 	bl	8000c5c <HAL_GetTick>
 8003042:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003046:	e009      	b.n	800305c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7fd fe08 	bl	8000c5c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0fc      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 800305c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003060:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003064:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	fa93 f2a3 	rbit	r2, r3
 8003070:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003074:	601a      	str	r2, [r3, #0]
  return result;
 8003076:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800307a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d105      	bne.n	800309c <HAL_RCC_OscConfig+0xc48>
 8003090:	4b01      	ldr	r3, [pc, #4]	; (8003098 <HAL_RCC_OscConfig+0xc44>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	e01e      	b.n	80030d4 <HAL_RCC_OscConfig+0xc80>
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
 800309c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f2a3 	rbit	r2, r3
 80030b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	fa93 f2a3 	rbit	r2, r3
 80030ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	4b63      	ldr	r3, [pc, #396]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030d8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030dc:	6011      	str	r1, [r2, #0]
 80030de:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	fa92 f1a2 	rbit	r1, r2
 80030e8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030ec:	6011      	str	r1, [r2, #0]
  return result;
 80030ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030f2:	6812      	ldr	r2, [r2, #0]
 80030f4:	fab2 f282 	clz	r2, r2
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	b2d2      	uxtb	r2, r2
 8003100:	f002 021f 	and.w	r2, r2, #31
 8003104:	2101      	movs	r1, #1
 8003106:	fa01 f202 	lsl.w	r2, r1, r2
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d09b      	beq.n	8003048 <HAL_RCC_OscConfig+0xbf4>
 8003110:	e0a0      	b.n	8003254 <HAL_RCC_OscConfig+0xe00>
 8003112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003116:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800311a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	fa93 f2a3 	rbit	r2, r3
 8003126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800312a:	601a      	str	r2, [r3, #0]
  return result;
 800312c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003130:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800313c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	461a      	mov	r2, r3
 8003144:	2300      	movs	r3, #0
 8003146:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fd fd88 	bl	8000c5c <HAL_GetTick>
 800314c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003150:	e009      	b.n	8003166 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003152:	f7fd fd83 	bl	8000c5c <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e077      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
 8003166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800316a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800316e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	fa93 f2a3 	rbit	r2, r3
 800317a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800317e:	601a      	str	r2, [r3, #0]
  return result;
 8003180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003184:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d102      	bne.n	80031a0 <HAL_RCC_OscConfig+0xd4c>
 800319a:	4b31      	ldr	r3, [pc, #196]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	e01b      	b.n	80031d8 <HAL_RCC_OscConfig+0xd84>
 80031a0:	f107 0320 	add.w	r3, r7, #32
 80031a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f107 0320 	add.w	r3, r7, #32
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	fa93 f2a3 	rbit	r2, r3
 80031b4:	f107 031c 	add.w	r3, r7, #28
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f107 0318 	add.w	r3, r7, #24
 80031be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	f107 0318 	add.w	r3, r7, #24
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	fa93 f2a3 	rbit	r2, r3
 80031ce:	f107 0314 	add.w	r3, r7, #20
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	4b22      	ldr	r3, [pc, #136]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	f107 0210 	add.w	r2, r7, #16
 80031dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031e0:	6011      	str	r1, [r2, #0]
 80031e2:	f107 0210 	add.w	r2, r7, #16
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	fa92 f1a2 	rbit	r1, r2
 80031ec:	f107 020c 	add.w	r2, r7, #12
 80031f0:	6011      	str	r1, [r2, #0]
  return result;
 80031f2:	f107 020c 	add.w	r2, r7, #12
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	fab2 f282 	clz	r2, r2
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f042 0220 	orr.w	r2, r2, #32
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	f002 021f 	and.w	r2, r2, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d19e      	bne.n	8003152 <HAL_RCC_OscConfig+0xcfe>
 8003214:	e01e      	b.n	8003254 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e018      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003224:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <HAL_RCC_OscConfig+0xe0c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800322c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003230:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003234:	1d3b      	adds	r3, r7, #4
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	429a      	cmp	r2, r3
 800323c:	d108      	bne.n	8003250 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800323e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40021000 	.word	0x40021000

08003264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b09e      	sub	sp, #120	; 0x78
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e162      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800327c:	4b90      	ldr	r3, [pc, #576]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	429a      	cmp	r2, r3
 8003288:	d910      	bls.n	80032ac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328a:	4b8d      	ldr	r3, [pc, #564]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 0207 	bic.w	r2, r3, #7
 8003292:	498b      	ldr	r1, [pc, #556]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329a:	4b89      	ldr	r3, [pc, #548]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d001      	beq.n	80032ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e14a      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b8:	4b82      	ldr	r3, [pc, #520]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	497f      	ldr	r1, [pc, #508]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80dc 	beq.w	8003490 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d13c      	bne.n	800335a <HAL_RCC_ClockConfig+0xf6>
 80032e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032e4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d102      	bne.n	800330a <HAL_RCC_ClockConfig+0xa6>
 8003304:	4b6f      	ldr	r3, [pc, #444]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	e00f      	b.n	800332a <HAL_RCC_ClockConfig+0xc6>
 800330a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800330e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	667b      	str	r3, [r7, #100]	; 0x64
 8003318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800331c:	663b      	str	r3, [r7, #96]	; 0x60
 800331e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003320:	fa93 f3a3 	rbit	r3, r3
 8003324:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003326:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800332e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003330:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003332:	fa92 f2a2 	rbit	r2, r2
 8003336:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003338:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0220 	orr.w	r2, r2, #32
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d17b      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0f3      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d13c      	bne.n	80033dc <HAL_RCC_ClockConfig+0x178>
 8003362:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b01      	cmp	r3, #1
 8003384:	d102      	bne.n	800338c <HAL_RCC_ClockConfig+0x128>
 8003386:	4b4f      	ldr	r3, [pc, #316]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	e00f      	b.n	80033ac <HAL_RCC_ClockConfig+0x148>
 800338c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003390:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	647b      	str	r3, [r7, #68]	; 0x44
 800339a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800339e:	643b      	str	r3, [r7, #64]	; 0x40
 80033a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a2:	fa93 f3a3 	rbit	r3, r3
 80033a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033a8:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80033b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033b4:	fa92 f2a2 	rbit	r2, r2
 80033b8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80033ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033bc:	fab2 f282 	clz	r2, r2
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	f042 0220 	orr.w	r2, r2, #32
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	f002 021f 	and.w	r2, r2, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f202 	lsl.w	r2, r1, r2
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d13a      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0b2      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
 80033dc:	2302      	movs	r3, #2
 80033de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ea:	fab3 f383 	clz	r3, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	095b      	lsrs	r3, r3, #5
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d102      	bne.n	8003404 <HAL_RCC_ClockConfig+0x1a0>
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	e00d      	b.n	8003420 <HAL_RCC_ClockConfig+0x1bc>
 8003404:	2302      	movs	r3, #2
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340a:	fa93 f3a3 	rbit	r3, r3
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	2302      	movs	r3, #2
 8003412:	623b      	str	r3, [r7, #32]
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2202      	movs	r2, #2
 8003422:	61ba      	str	r2, [r7, #24]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	fa92 f2a2 	rbit	r2, r2
 800342a:	617a      	str	r2, [r7, #20]
  return result;
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	fab2 f282 	clz	r2, r2
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	f042 0220 	orr.w	r2, r2, #32
 8003438:	b2d2      	uxtb	r2, r2
 800343a:	f002 021f 	and.w	r2, r2, #31
 800343e:	2101      	movs	r1, #1
 8003440:	fa01 f202 	lsl.w	r2, r1, r2
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e079      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f023 0203 	bic.w	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	491a      	ldr	r1, [pc, #104]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 800345c:	4313      	orrs	r3, r2
 800345e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003460:	f7fd fbfc 	bl	8000c5c <HAL_GetTick>
 8003464:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003466:	e00a      	b.n	800347e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003468:	f7fd fbf8 	bl	8000c5c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e061      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347e:	4b11      	ldr	r3, [pc, #68]	; (80034c4 <HAL_RCC_ClockConfig+0x260>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 020c 	and.w	r2, r3, #12
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	429a      	cmp	r2, r3
 800348e:	d1eb      	bne.n	8003468 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003490:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d214      	bcs.n	80034c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 0207 	bic.w	r2, r3, #7
 80034a6:	4906      	ldr	r1, [pc, #24]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_RCC_ClockConfig+0x25c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0307 	and.w	r3, r3, #7
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e040      	b.n	8003542 <HAL_RCC_ClockConfig+0x2de>
 80034c0:	40022000 	.word	0x40022000
 80034c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	491a      	ldr	r1, [pc, #104]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f2:	4b16      	ldr	r3, [pc, #88]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4912      	ldr	r1, [pc, #72]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003506:	f000 f829 	bl	800355c <HAL_RCC_GetSysClockFreq>
 800350a:	4601      	mov	r1, r0
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <HAL_RCC_ClockConfig+0x2e8>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003514:	22f0      	movs	r2, #240	; 0xf0
 8003516:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	fa92 f2a2 	rbit	r2, r2
 800351e:	60fa      	str	r2, [r7, #12]
  return result;
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	fab2 f282 	clz	r2, r2
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	40d3      	lsrs	r3, r2
 800352a:	4a09      	ldr	r2, [pc, #36]	; (8003550 <HAL_RCC_ClockConfig+0x2ec>)
 800352c:	5cd3      	ldrb	r3, [r2, r3]
 800352e:	fa21 f303 	lsr.w	r3, r1, r3
 8003532:	4a08      	ldr	r2, [pc, #32]	; (8003554 <HAL_RCC_ClockConfig+0x2f0>)
 8003534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003536:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_RCC_ClockConfig+0x2f4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd fb4a 	bl	8000bd4 <HAL_InitTick>
  
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3778      	adds	r7, #120	; 0x78
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	08006d60 	.word	0x08006d60
 8003554:	20000008 	.word	0x20000008
 8003558:	20000000 	.word	0x20000000

0800355c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800355c:	b480      	push	{r7}
 800355e:	b08b      	sub	sp, #44	; 0x2c
 8003560:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	61fb      	str	r3, [r7, #28]
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003576:	4b29      	ldr	r3, [pc, #164]	; (800361c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b04      	cmp	r3, #4
 8003584:	d002      	beq.n	800358c <HAL_RCC_GetSysClockFreq+0x30>
 8003586:	2b08      	cmp	r3, #8
 8003588:	d003      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x36>
 800358a:	e03c      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800358c:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_RCC_GetSysClockFreq+0xc4>)
 800358e:	623b      	str	r3, [r7, #32]
      break;
 8003590:	e03c      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003598:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800359c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	fa92 f2a2 	rbit	r2, r2
 80035a4:	607a      	str	r2, [r7, #4]
  return result;
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	fab2 f282 	clz	r2, r2
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	40d3      	lsrs	r3, r2
 80035b0:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	220f      	movs	r2, #15
 80035c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	fa92 f2a2 	rbit	r2, r2
 80035c8:	60fa      	str	r2, [r7, #12]
  return result;
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	fab2 f282 	clz	r2, r2
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	40d3      	lsrs	r3, r2
 80035d4:	4a14      	ldr	r2, [pc, #80]	; (8003628 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035e4:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <HAL_RCC_GetSysClockFreq+0xc4>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fb02 f303 	mul.w	r3, r2, r3
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
 80035f4:	e004      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	4a0c      	ldr	r2, [pc, #48]	; (800362c <HAL_RCC_GetSysClockFreq+0xd0>)
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	623b      	str	r3, [r7, #32]
      break;
 8003604:	e002      	b.n	800360c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003608:	623b      	str	r3, [r7, #32]
      break;
 800360a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360c:	6a3b      	ldr	r3, [r7, #32]
}
 800360e:	4618      	mov	r0, r3
 8003610:	372c      	adds	r7, #44	; 0x2c
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
 8003620:	007a1200 	.word	0x007a1200
 8003624:	08006d40 	.word	0x08006d40
 8003628:	08006d50 	.word	0x08006d50
 800362c:	003d0900 	.word	0x003d0900

08003630 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003634:	4b03      	ldr	r3, [pc, #12]	; (8003644 <HAL_RCC_GetHCLKFreq+0x14>)
 8003636:	681b      	ldr	r3, [r3, #0]
}
 8003638:	4618      	mov	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000008 	.word	0x20000008

08003648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800364e:	f7ff ffef 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003652:	4601      	mov	r1, r0
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800365c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003660:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	fa92 f2a2 	rbit	r2, r2
 8003668:	603a      	str	r2, [r7, #0]
  return result;
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	fab2 f282 	clz	r2, r2
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	40d3      	lsrs	r3, r2
 8003674:	4a04      	ldr	r2, [pc, #16]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40021000 	.word	0x40021000
 8003688:	08006d70 	.word	0x08006d70

0800368c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003692:	f7ff ffcd 	bl	8003630 <HAL_RCC_GetHCLKFreq>
 8003696:	4601      	mov	r1, r0
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80036a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80036a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	fa92 f2a2 	rbit	r2, r2
 80036ac:	603a      	str	r2, [r7, #0]
  return result;
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	fab2 f282 	clz	r2, r2
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	40d3      	lsrs	r3, r2
 80036b8:	4a04      	ldr	r2, [pc, #16]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08006d70 	.word	0x08006d70

080036d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b092      	sub	sp, #72	; 0x48
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80d7 	beq.w	800389c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f4:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10e      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003700:	4b4b      	ldr	r3, [pc, #300]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003702:	69db      	ldr	r3, [r3, #28]
 8003704:	4a4a      	ldr	r2, [pc, #296]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370a:	61d3      	str	r3, [r2, #28]
 800370c:	4b48      	ldr	r3, [pc, #288]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800371e:	4b45      	ldr	r3, [pc, #276]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d118      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800372a:	4b42      	ldr	r3, [pc, #264]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a41      	ldr	r2, [pc, #260]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003734:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003736:	f7fd fa91 	bl	8000c5c <HAL_GetTick>
 800373a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373c:	e008      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373e:	f7fd fa8d 	bl	8000c5c <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b64      	cmp	r3, #100	; 0x64
 800374a:	d901      	bls.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e169      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003750:	4b38      	ldr	r3, [pc, #224]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800375c:	4b34      	ldr	r3, [pc, #208]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003764:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8084 	beq.w	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003778:	429a      	cmp	r2, r3
 800377a:	d07c      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800377c:	4b2c      	ldr	r3, [pc, #176]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003786:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800378a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	fa93 f3a3 	rbit	r3, r3
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	4b26      	ldr	r3, [pc, #152]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	461a      	mov	r2, r3
 80037a6:	2301      	movs	r3, #1
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b2:	fa93 f3a3 	rbit	r3, r3
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80037b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037ba:	fab3 f383 	clz	r3, r3
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	4b1d      	ldr	r3, [pc, #116]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	461a      	mov	r2, r3
 80037ca:	2300      	movs	r3, #0
 80037cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ce:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d04b      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fd fa3d 	bl	8000c5c <HAL_GetTick>
 80037e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fd fa39 	bl	8000c5c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e113      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80037fc:	2302      	movs	r3, #2
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
 8003808:	2302      	movs	r3, #2
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	fa93 f3a3 	rbit	r3, r3
 8003812:	61fb      	str	r3, [r7, #28]
  return result;
 8003814:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003816:	fab3 f383 	clz	r3, r3
 800381a:	b2db      	uxtb	r3, r3
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f043 0302 	orr.w	r3, r3, #2
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d108      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800382a:	4b01      	ldr	r3, [pc, #4]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	e00d      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003830:	40021000 	.word	0x40021000
 8003834:	40007000 	.word	0x40007000
 8003838:	10908100 	.word	0x10908100
 800383c:	2302      	movs	r3, #2
 800383e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	fa93 f3a3 	rbit	r3, r3
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	4b78      	ldr	r3, [pc, #480]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	2202      	movs	r2, #2
 800384e:	613a      	str	r2, [r7, #16]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	fa92 f2a2 	rbit	r2, r2
 8003856:	60fa      	str	r2, [r7, #12]
  return result;
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	fab2 f282 	clz	r2, r2
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	f002 021f 	and.w	r2, r2, #31
 800386a:	2101      	movs	r1, #1
 800386c:	fa01 f202 	lsl.w	r2, r1, r2
 8003870:	4013      	ands	r3, r2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0b7      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003876:	4b6d      	ldr	r3, [pc, #436]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	496a      	ldr	r1, [pc, #424]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003884:	4313      	orrs	r3, r2
 8003886:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003888:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003890:	4b66      	ldr	r3, [pc, #408]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4a65      	ldr	r2, [pc, #404]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038a8:	4b60      	ldr	r3, [pc, #384]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	f023 0203 	bic.w	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	495d      	ldr	r1, [pc, #372]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d008      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c6:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4956      	ldr	r1, [pc, #344]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038e4:	4b51      	ldr	r3, [pc, #324]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	494e      	ldr	r1, [pc, #312]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003902:	4b4a      	ldr	r3, [pc, #296]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f023 0210 	bic.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	4947      	ldr	r1, [pc, #284]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003910:	4313      	orrs	r3, r2
 8003912:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003920:	4b42      	ldr	r3, [pc, #264]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	493f      	ldr	r1, [pc, #252]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800392e:	4313      	orrs	r3, r2
 8003930:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d008      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800393e:	4b3b      	ldr	r3, [pc, #236]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003942:	f023 0220 	bic.w	r2, r3, #32
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4938      	ldr	r1, [pc, #224]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800394c:	4313      	orrs	r3, r2
 800394e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800395c:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	4930      	ldr	r1, [pc, #192]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0310 	and.w	r3, r3, #16
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800397a:	4b2c      	ldr	r3, [pc, #176]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	4929      	ldr	r1, [pc, #164]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003988:	4313      	orrs	r3, r2
 800398a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003998:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	4921      	ldr	r1, [pc, #132]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d008      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80039b6:	4b1d      	ldr	r3, [pc, #116]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	491a      	ldr	r1, [pc, #104]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80039d4:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	4912      	ldr	r1, [pc, #72]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d008      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80039f2:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	490b      	ldr	r1, [pc, #44]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	4903      	ldr	r1, [pc, #12]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3748      	adds	r7, #72	; 0x48
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	40021000 	.word	0x40021000

08003a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e040      	b.n	8003ac4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 ffee 	bl	8004a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2224      	movs	r2, #36	; 0x24
 8003a5c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa1a 	bl	8003ea8 <UART_SetConfig>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fc28 	bl	80042dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fcaf 	bl	8004420 <UART_CheckIdleState>
 8003ac2:	4603      	mov	r3, r0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08a      	sub	sp, #40	; 0x28
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	f040 8081 	bne.w	8003be8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d002      	beq.n	8003af2 <HAL_UART_Transmit+0x26>
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e079      	b.n	8003bea <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_UART_Transmit+0x38>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e072      	b.n	8003bea <HAL_UART_Transmit+0x11e>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2221      	movs	r2, #33	; 0x21
 8003b16:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003b18:	f7fd f8a0 	bl	8000c5c <HAL_GetTick>
 8003b1c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	88fa      	ldrh	r2, [r7, #6]
 8003b22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	88fa      	ldrh	r2, [r7, #6]
 8003b2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	d108      	bne.n	8003b4a <HAL_UART_Transmit+0x7e>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	61bb      	str	r3, [r7, #24]
 8003b48:	e003      	b.n	8003b52 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b52:	e02d      	b.n	8003bb0 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2180      	movs	r1, #128	; 0x80
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fca3 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e03d      	b.n	8003bea <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	881a      	ldrh	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b80:	b292      	uxth	r2, r2
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	3302      	adds	r3, #2
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	e008      	b.n	8003b9e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	781a      	ldrb	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	b292      	uxth	r2, r2
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1cb      	bne.n	8003b54 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2140      	movs	r1, #64	; 0x40
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fc6f 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e009      	b.n	8003bea <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d113      	bne.n	8003c4c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d009      	beq.n	8003c4c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8114 	beq.w	8003e6a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	4798      	blx	r3
      }
      return;
 8003c4a:	e10e      	b.n	8003e6a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 80d6 	beq.w	8003e00 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d105      	bne.n	8003c6a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	f000 80cb 	beq.w	8003e00 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00e      	beq.n	8003c92 <HAL_UART_IRQHandler+0x9e>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2201      	movs	r2, #1
 8003c84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c8a:	f043 0201 	orr.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <HAL_UART_IRQHandler+0xc6>
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2202      	movs	r2, #2
 8003cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb2:	f043 0204 	orr.w	r2, r3, #4
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00e      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xee>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d009      	beq.n	8003ce2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cda:	f043 0202 	orr.w	r2, r3, #2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d013      	beq.n	8003d14 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d104      	bne.n	8003d00 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2208      	movs	r2, #8
 8003d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d0c:	f043 0208 	orr.w	r2, r3, #8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00f      	beq.n	8003d3e <HAL_UART_IRQHandler+0x14a>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8093 	beq.w	8003e6e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00c      	beq.n	8003d6c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f003 0320 	and.w	r3, r3, #32
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d007      	beq.n	8003d6c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d70:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d004      	beq.n	8003d8a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d031      	beq.n	8003dee <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fc08 	bl	80045a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d123      	bne.n	8003de6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d013      	beq.n	8003dde <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dba:	4a30      	ldr	r2, [pc, #192]	; (8003e7c <HAL_UART_IRQHandler+0x288>)
 8003dbc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd f889 	bl	8000eda <HAL_DMA_Abort_IT>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d016      	beq.n	8003dfc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ddc:	e00e      	b.n	8003dfc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f858 	bl	8003e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	e00a      	b.n	8003dfc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f854 	bl	8003e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dec:	e006      	b.n	8003dfc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f850 	bl	8003e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003dfa:	e038      	b.n	8003e6e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dfc:	bf00      	nop
    return;
 8003dfe:	e036      	b.n	8003e6e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00d      	beq.n	8003e26 <HAL_UART_IRQHandler+0x232>
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d008      	beq.n	8003e26 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 fc0d 	bl	800463e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e24:	e026      	b.n	8003e74 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d008      	beq.n	8003e4c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d017      	beq.n	8003e72 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	4798      	blx	r3
    }
    return;
 8003e4a:	e012      	b.n	8003e72 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00e      	beq.n	8003e74 <HAL_UART_IRQHandler+0x280>
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d009      	beq.n	8003e74 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 fbd3 	bl	800460c <UART_EndTransmit_IT>
    return;
 8003e66:	bf00      	nop
 8003e68:	e004      	b.n	8003e74 <HAL_UART_IRQHandler+0x280>
      return;
 8003e6a:	bf00      	nop
 8003e6c:	e002      	b.n	8003e74 <HAL_UART_IRQHandler+0x280>
    return;
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <HAL_UART_IRQHandler+0x280>
    return;
 8003e72:	bf00      	nop
  }

}
 8003e74:	3720      	adds	r7, #32
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	080045e1 	.word	0x080045e1

08003e80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003eda:	f023 030c 	bic.w	r3, r3, #12
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6812      	ldr	r2, [r2, #0]
 8003ee2:	6939      	ldr	r1, [r7, #16]
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4aa9      	ldr	r2, [pc, #676]	; (80041cc <UART_SetConfig+0x324>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d121      	bne.n	8003f70 <UART_SetConfig+0xc8>
 8003f2c:	4ba8      	ldr	r3, [pc, #672]	; (80041d0 <UART_SetConfig+0x328>)
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	2b03      	cmp	r3, #3
 8003f36:	d817      	bhi.n	8003f68 <UART_SetConfig+0xc0>
 8003f38:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <UART_SetConfig+0x98>)
 8003f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3e:	bf00      	nop
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f5d 	.word	0x08003f5d
 8003f48:	08003f63 	.word	0x08003f63
 8003f4c:	08003f57 	.word	0x08003f57
 8003f50:	2301      	movs	r3, #1
 8003f52:	77fb      	strb	r3, [r7, #31]
 8003f54:	e0b2      	b.n	80040bc <UART_SetConfig+0x214>
 8003f56:	2302      	movs	r3, #2
 8003f58:	77fb      	strb	r3, [r7, #31]
 8003f5a:	e0af      	b.n	80040bc <UART_SetConfig+0x214>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e0ac      	b.n	80040bc <UART_SetConfig+0x214>
 8003f62:	2308      	movs	r3, #8
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e0a9      	b.n	80040bc <UART_SetConfig+0x214>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	bf00      	nop
 8003f6e:	e0a5      	b.n	80040bc <UART_SetConfig+0x214>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a97      	ldr	r2, [pc, #604]	; (80041d4 <UART_SetConfig+0x32c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d123      	bne.n	8003fc2 <UART_SetConfig+0x11a>
 8003f7a:	4b95      	ldr	r3, [pc, #596]	; (80041d0 <UART_SetConfig+0x328>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f86:	d012      	beq.n	8003fae <UART_SetConfig+0x106>
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8c:	d802      	bhi.n	8003f94 <UART_SetConfig+0xec>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d007      	beq.n	8003fa2 <UART_SetConfig+0xfa>
 8003f92:	e012      	b.n	8003fba <UART_SetConfig+0x112>
 8003f94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f98:	d00c      	beq.n	8003fb4 <UART_SetConfig+0x10c>
 8003f9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f9e:	d003      	beq.n	8003fa8 <UART_SetConfig+0x100>
 8003fa0:	e00b      	b.n	8003fba <UART_SetConfig+0x112>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e089      	b.n	80040bc <UART_SetConfig+0x214>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e086      	b.n	80040bc <UART_SetConfig+0x214>
 8003fae:	2304      	movs	r3, #4
 8003fb0:	77fb      	strb	r3, [r7, #31]
 8003fb2:	e083      	b.n	80040bc <UART_SetConfig+0x214>
 8003fb4:	2308      	movs	r3, #8
 8003fb6:	77fb      	strb	r3, [r7, #31]
 8003fb8:	e080      	b.n	80040bc <UART_SetConfig+0x214>
 8003fba:	2310      	movs	r3, #16
 8003fbc:	77fb      	strb	r3, [r7, #31]
 8003fbe:	bf00      	nop
 8003fc0:	e07c      	b.n	80040bc <UART_SetConfig+0x214>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a84      	ldr	r2, [pc, #528]	; (80041d8 <UART_SetConfig+0x330>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d123      	bne.n	8004014 <UART_SetConfig+0x16c>
 8003fcc:	4b80      	ldr	r3, [pc, #512]	; (80041d0 <UART_SetConfig+0x328>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003fd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fd8:	d012      	beq.n	8004000 <UART_SetConfig+0x158>
 8003fda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fde:	d802      	bhi.n	8003fe6 <UART_SetConfig+0x13e>
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d007      	beq.n	8003ff4 <UART_SetConfig+0x14c>
 8003fe4:	e012      	b.n	800400c <UART_SetConfig+0x164>
 8003fe6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fea:	d00c      	beq.n	8004006 <UART_SetConfig+0x15e>
 8003fec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ff0:	d003      	beq.n	8003ffa <UART_SetConfig+0x152>
 8003ff2:	e00b      	b.n	800400c <UART_SetConfig+0x164>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	77fb      	strb	r3, [r7, #31]
 8003ff8:	e060      	b.n	80040bc <UART_SetConfig+0x214>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	77fb      	strb	r3, [r7, #31]
 8003ffe:	e05d      	b.n	80040bc <UART_SetConfig+0x214>
 8004000:	2304      	movs	r3, #4
 8004002:	77fb      	strb	r3, [r7, #31]
 8004004:	e05a      	b.n	80040bc <UART_SetConfig+0x214>
 8004006:	2308      	movs	r3, #8
 8004008:	77fb      	strb	r3, [r7, #31]
 800400a:	e057      	b.n	80040bc <UART_SetConfig+0x214>
 800400c:	2310      	movs	r3, #16
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	bf00      	nop
 8004012:	e053      	b.n	80040bc <UART_SetConfig+0x214>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a70      	ldr	r2, [pc, #448]	; (80041dc <UART_SetConfig+0x334>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d123      	bne.n	8004066 <UART_SetConfig+0x1be>
 800401e:	4b6c      	ldr	r3, [pc, #432]	; (80041d0 <UART_SetConfig+0x328>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800402a:	d012      	beq.n	8004052 <UART_SetConfig+0x1aa>
 800402c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004030:	d802      	bhi.n	8004038 <UART_SetConfig+0x190>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d007      	beq.n	8004046 <UART_SetConfig+0x19e>
 8004036:	e012      	b.n	800405e <UART_SetConfig+0x1b6>
 8004038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800403c:	d00c      	beq.n	8004058 <UART_SetConfig+0x1b0>
 800403e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004042:	d003      	beq.n	800404c <UART_SetConfig+0x1a4>
 8004044:	e00b      	b.n	800405e <UART_SetConfig+0x1b6>
 8004046:	2300      	movs	r3, #0
 8004048:	77fb      	strb	r3, [r7, #31]
 800404a:	e037      	b.n	80040bc <UART_SetConfig+0x214>
 800404c:	2302      	movs	r3, #2
 800404e:	77fb      	strb	r3, [r7, #31]
 8004050:	e034      	b.n	80040bc <UART_SetConfig+0x214>
 8004052:	2304      	movs	r3, #4
 8004054:	77fb      	strb	r3, [r7, #31]
 8004056:	e031      	b.n	80040bc <UART_SetConfig+0x214>
 8004058:	2308      	movs	r3, #8
 800405a:	77fb      	strb	r3, [r7, #31]
 800405c:	e02e      	b.n	80040bc <UART_SetConfig+0x214>
 800405e:	2310      	movs	r3, #16
 8004060:	77fb      	strb	r3, [r7, #31]
 8004062:	bf00      	nop
 8004064:	e02a      	b.n	80040bc <UART_SetConfig+0x214>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a5d      	ldr	r2, [pc, #372]	; (80041e0 <UART_SetConfig+0x338>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d123      	bne.n	80040b8 <UART_SetConfig+0x210>
 8004070:	4b57      	ldr	r3, [pc, #348]	; (80041d0 <UART_SetConfig+0x328>)
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800407c:	d012      	beq.n	80040a4 <UART_SetConfig+0x1fc>
 800407e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004082:	d802      	bhi.n	800408a <UART_SetConfig+0x1e2>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d007      	beq.n	8004098 <UART_SetConfig+0x1f0>
 8004088:	e012      	b.n	80040b0 <UART_SetConfig+0x208>
 800408a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800408e:	d00c      	beq.n	80040aa <UART_SetConfig+0x202>
 8004090:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004094:	d003      	beq.n	800409e <UART_SetConfig+0x1f6>
 8004096:	e00b      	b.n	80040b0 <UART_SetConfig+0x208>
 8004098:	2300      	movs	r3, #0
 800409a:	77fb      	strb	r3, [r7, #31]
 800409c:	e00e      	b.n	80040bc <UART_SetConfig+0x214>
 800409e:	2302      	movs	r3, #2
 80040a0:	77fb      	strb	r3, [r7, #31]
 80040a2:	e00b      	b.n	80040bc <UART_SetConfig+0x214>
 80040a4:	2304      	movs	r3, #4
 80040a6:	77fb      	strb	r3, [r7, #31]
 80040a8:	e008      	b.n	80040bc <UART_SetConfig+0x214>
 80040aa:	2308      	movs	r3, #8
 80040ac:	77fb      	strb	r3, [r7, #31]
 80040ae:	e005      	b.n	80040bc <UART_SetConfig+0x214>
 80040b0:	2310      	movs	r3, #16
 80040b2:	77fb      	strb	r3, [r7, #31]
 80040b4:	bf00      	nop
 80040b6:	e001      	b.n	80040bc <UART_SetConfig+0x214>
 80040b8:	2310      	movs	r3, #16
 80040ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040c4:	f040 808e 	bne.w	80041e4 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 80040c8:	7ffb      	ldrb	r3, [r7, #31]
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d85e      	bhi.n	800418c <UART_SetConfig+0x2e4>
 80040ce:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <UART_SetConfig+0x22c>)
 80040d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	08004119 	.word	0x08004119
 80040dc:	08004139 	.word	0x08004139
 80040e0:	0800418d 	.word	0x0800418d
 80040e4:	08004155 	.word	0x08004155
 80040e8:	0800418d 	.word	0x0800418d
 80040ec:	0800418d 	.word	0x0800418d
 80040f0:	0800418d 	.word	0x0800418d
 80040f4:	08004175 	.word	0x08004175
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7ff faa6 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 80040fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	005a      	lsls	r2, r3, #1
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	b29b      	uxth	r3, r3
 8004114:	61bb      	str	r3, [r7, #24]
        break;
 8004116:	e03c      	b.n	8004192 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7ff fab8 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 800411c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	005a      	lsls	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	085b      	lsrs	r3, r3, #1
 8004128:	441a      	add	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004132:	b29b      	uxth	r3, r3
 8004134:	61bb      	str	r3, [r7, #24]
        break;
 8004136:	e02c      	b.n	8004192 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004142:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6852      	ldr	r2, [r2, #4]
 800414a:	fbb3 f3f2 	udiv	r3, r3, r2
 800414e:	b29b      	uxth	r3, r3
 8004150:	61bb      	str	r3, [r7, #24]
        break;
 8004152:	e01e      	b.n	8004192 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004154:	f7ff fa02 	bl	800355c <HAL_RCC_GetSysClockFreq>
 8004158:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	005a      	lsls	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	085b      	lsrs	r3, r3, #1
 8004164:	441a      	add	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	b29b      	uxth	r3, r3
 8004170:	61bb      	str	r3, [r7, #24]
        break;
 8004172:	e00e      	b.n	8004192 <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	085b      	lsrs	r3, r3, #1
 800417a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	b29b      	uxth	r3, r3
 8004188:	61bb      	str	r3, [r7, #24]
        break;
 800418a:	e002      	b.n	8004192 <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	75fb      	strb	r3, [r7, #23]
        break;
 8004190:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b0f      	cmp	r3, #15
 8004196:	d916      	bls.n	80041c6 <UART_SetConfig+0x31e>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419e:	d212      	bcs.n	80041c6 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f023 030f 	bic.w	r3, r3, #15
 80041a8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	085b      	lsrs	r3, r3, #1
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f003 0307 	and.w	r3, r3, #7
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	897a      	ldrh	r2, [r7, #10]
 80041c2:	60da      	str	r2, [r3, #12]
 80041c4:	e07e      	b.n	80042c4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	75fb      	strb	r3, [r7, #23]
 80041ca:	e07b      	b.n	80042c4 <UART_SetConfig+0x41c>
 80041cc:	40013800 	.word	0x40013800
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40004400 	.word	0x40004400
 80041d8:	40004800 	.word	0x40004800
 80041dc:	40004c00 	.word	0x40004c00
 80041e0:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 80041e4:	7ffb      	ldrb	r3, [r7, #31]
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d85b      	bhi.n	80042a2 <UART_SetConfig+0x3fa>
 80041ea:	a201      	add	r2, pc, #4	; (adr r2, 80041f0 <UART_SetConfig+0x348>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	08004215 	.word	0x08004215
 80041f4:	08004233 	.word	0x08004233
 80041f8:	08004251 	.word	0x08004251
 80041fc:	080042a3 	.word	0x080042a3
 8004200:	0800426d 	.word	0x0800426d
 8004204:	080042a3 	.word	0x080042a3
 8004208:	080042a3 	.word	0x080042a3
 800420c:	080042a3 	.word	0x080042a3
 8004210:	0800428b 	.word	0x0800428b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004214:	f7ff fa18 	bl	8003648 <HAL_RCC_GetPCLK1Freq>
 8004218:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	085a      	lsrs	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	441a      	add	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	fbb2 f3f3 	udiv	r3, r2, r3
 800422c:	b29b      	uxth	r3, r3
 800422e:	61bb      	str	r3, [r7, #24]
        break;
 8004230:	e03a      	b.n	80042a8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004232:	f7ff fa2b 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8004236:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	085a      	lsrs	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	441a      	add	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	b29b      	uxth	r3, r3
 800424c:	61bb      	str	r3, [r7, #24]
        break;
 800424e:	e02b      	b.n	80042a8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	085b      	lsrs	r3, r3, #1
 8004256:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800425a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6852      	ldr	r2, [r2, #4]
 8004262:	fbb3 f3f2 	udiv	r3, r3, r2
 8004266:	b29b      	uxth	r3, r3
 8004268:	61bb      	str	r3, [r7, #24]
        break;
 800426a:	e01d      	b.n	80042a8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426c:	f7ff f976 	bl	800355c <HAL_RCC_GetSysClockFreq>
 8004270:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	085a      	lsrs	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	441a      	add	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	b29b      	uxth	r3, r3
 8004286:	61bb      	str	r3, [r7, #24]
        break;
 8004288:	e00e      	b.n	80042a8 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	085b      	lsrs	r3, r3, #1
 8004290:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	b29b      	uxth	r3, r3
 800429e:	61bb      	str	r3, [r7, #24]
        break;
 80042a0:	e002      	b.n	80042a8 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	75fb      	strb	r3, [r7, #23]
        break;
 80042a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	2b0f      	cmp	r3, #15
 80042ac:	d908      	bls.n	80042c0 <UART_SetConfig+0x418>
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b4:	d204      	bcs.n	80042c0 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	60da      	str	r2, [r3, #12]
 80042be:	e001      	b.n	80042c4 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3720      	adds	r7, #32
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop

080042dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01a      	beq.n	80043f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043da:	d10a      	bne.n	80043f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	605a      	str	r2, [r3, #4]
  }
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af02      	add	r7, sp, #8
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800442e:	f7fc fc15 	bl	8000c5c <HAL_GetTick>
 8004432:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b08      	cmp	r3, #8
 8004440:	d10e      	bne.n	8004460 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004442:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f82a 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e020      	b.n	80044a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b04      	cmp	r3, #4
 800446c:	d10e      	bne.n	800448c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800446e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f814 	bl	80044aa <UART_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e00a      	b.n	80044a2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2220      	movs	r2, #32
 8004490:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	603b      	str	r3, [r7, #0]
 80044b6:	4613      	mov	r3, r2
 80044b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ba:	e05d      	b.n	8004578 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d059      	beq.n	8004578 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c4:	f7fc fbca 	bl	8000c5c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d302      	bcc.n	80044da <UART_WaitOnFlagUntilTimeout+0x30>
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d11b      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0201 	bic.w	r2, r2, #1
 80044f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2220      	movs	r2, #32
 80044fe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e042      	b.n	8004598 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d02b      	beq.n	8004578 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800452a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800452e:	d123      	bne.n	8004578 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004538:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004548:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2220      	movs	r2, #32
 800455e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2220      	movs	r2, #32
 800456a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e00f      	b.n	8004598 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4013      	ands	r3, r2
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	429a      	cmp	r2, r3
 8004594:	d092      	beq.n	80044bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 0201 	bic.w	r2, r2, #1
 80045c6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2220      	movs	r2, #32
 80045cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff fc48 	bl	8003e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004622:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff fc25 	bl	8003e80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <HAL_I2C_AddrCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	70fb      	strb	r3, [r7, #3]
 8004660:	4613      	mov	r3, r2
 8004662:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  if(hi2c->Instance == I2C1) {
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a07      	ldr	r2, [pc, #28]	; (8004688 <HAL_I2C_AddrCallback+0x34>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d105      	bne.n	800467a <HAL_I2C_AddrCallback+0x26>
    transferRequested = 1;
 800466e:	4b07      	ldr	r3, [pc, #28]	; (800468c <HAL_I2C_AddrCallback+0x38>)
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
    transferDirection = TransferDirection;
 8004674:	4a06      	ldr	r2, [pc, #24]	; (8004690 <HAL_I2C_AddrCallback+0x3c>)
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	7013      	strb	r3, [r2, #0]
  }
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	40005400 	.word	0x40005400
 800468c:	200002d8 	.word	0x200002d8
 8004690:	20000254 	.word	0x20000254

08004694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b0cc      	sub	sp, #304	; 0x130
 8004698:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	  char uartBuf[20];
	  uint8_t i2cBuf[2];
	  int8_t ftemp =1;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80046a0:	f7fc fa82 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80046a4:	f000 f838 	bl	8004718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80046a8:	f000 f8f8 	bl	800489c <MX_GPIO_Init>
  MX_I2C1_Init();
 80046ac:	f000 f886 	bl	80047bc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80046b0:	f000 f8c4 	bl	800483c <MX_USART1_UART_Init>
//
//		sprintf(uartBuf, "Temperature: %d\r\n", ftemp);
//		HAL_UART_Transmit(&huart1, (uint8_t*) uartBuf, strlen(uartBuf), HAL_MAX_DELAY);
//
//		HAL_Delay(300);
	  uint8_t data = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
	  uint8_t res = HAL_I2C_Mem_Read(&hi2c1, 0x33, 0x1, 1, &data, 1, 100);
 80046ba:	2364      	movs	r3, #100	; 0x64
 80046bc:	9302      	str	r3, [sp, #8]
 80046be:	2301      	movs	r3, #1
 80046c0:	9301      	str	r3, [sp, #4]
 80046c2:	f207 1303 	addw	r3, r7, #259	; 0x103
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2301      	movs	r3, #1
 80046ca:	2201      	movs	r2, #1
 80046cc:	2133      	movs	r1, #51	; 0x33
 80046ce:	480f      	ldr	r0, [pc, #60]	; (800470c <main+0x78>)
 80046d0:	f7fc fe64 	bl	800139c <HAL_I2C_Mem_Read>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
	  char buf[0x100];
	  sprintf(buf, "i2c: %d %d\r\n", res, data);
 80046da:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 80046de:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80046e2:	4638      	mov	r0, r7
 80046e4:	490a      	ldr	r1, [pc, #40]	; (8004710 <main+0x7c>)
 80046e6:	f000 ff37 	bl	8005558 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), HAL_MAX_DELAY);
 80046ea:	463b      	mov	r3, r7
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fb fd6f 	bl	80001d0 <strlen>
 80046f2:	4603      	mov	r3, r0
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	4639      	mov	r1, r7
 80046f8:	f04f 33ff 	mov.w	r3, #4294967295
 80046fc:	4805      	ldr	r0, [pc, #20]	; (8004714 <main+0x80>)
 80046fe:	f7ff f9e5 	bl	8003acc <HAL_UART_Transmit>
//	  CDC_Transmit_FS(buf, strlen(buf));
	  HAL_Delay(1000);
 8004702:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004706:	f7fc fab5 	bl	8000c74 <HAL_Delay>
  {
 800470a:	e7d3      	b.n	80046b4 <main+0x20>
 800470c:	20000208 	.word	0x20000208
 8004710:	08006d30 	.word	0x08006d30
 8004714:	20000258 	.word	0x20000258

08004718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b09e      	sub	sp, #120	; 0x78
 800471c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800471e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004722:	2228      	movs	r2, #40	; 0x28
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fab2 	bl	8004c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800472c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	60da      	str	r2, [r3, #12]
 800473a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800473c:	463b      	mov	r3, r7
 800473e:	223c      	movs	r2, #60	; 0x3c
 8004740:	2100      	movs	r1, #0
 8004742:	4618      	mov	r0, r3
 8004744:	f000 faa4 	bl	8004c90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004748:	2302      	movs	r3, #2
 800474a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800474c:	2301      	movs	r3, #1
 800474e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004750:	2310      	movs	r3, #16
 8004752:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004754:	2300      	movs	r3, #0
 8004756:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004758:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800475c:	4618      	mov	r0, r3
 800475e:	f7fd fe79 	bl	8002454 <HAL_RCC_OscConfig>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8004768:	f000 f8e4 	bl	8004934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800476c:	230f      	movs	r3, #15
 800476e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004770:	2300      	movs	r3, #0
 8004772:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004774:	2300      	movs	r3, #0
 8004776:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004778:	2300      	movs	r3, #0
 800477a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800477c:	2300      	movs	r3, #0
 800477e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004780:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004784:	2100      	movs	r1, #0
 8004786:	4618      	mov	r0, r3
 8004788:	f7fe fd6c 	bl	8003264 <HAL_RCC_ClockConfig>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8004792:	f000 f8cf 	bl	8004934 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8004796:	2321      	movs	r3, #33	; 0x21
 8004798:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047a2:	463b      	mov	r3, r7
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7fe ff93 	bl	80036d0 <HAL_RCCEx_PeriphCLKConfig>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80047b0:	f000 f8c0 	bl	8004934 <Error_Handler>
  }
}
 80047b4:	bf00      	nop
 80047b6:	3778      	adds	r7, #120	; 0x78
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80047c0:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <MX_I2C1_Init+0x74>)
 80047c2:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <MX_I2C1_Init+0x78>)
 80047c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00103D84;
 80047c6:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <MX_I2C1_Init+0x74>)
 80047c8:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <MX_I2C1_Init+0x7c>)
 80047ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80047cc:	4b18      	ldr	r3, [pc, #96]	; (8004830 <MX_I2C1_Init+0x74>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047d2:	4b17      	ldr	r3, [pc, #92]	; (8004830 <MX_I2C1_Init+0x74>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <MX_I2C1_Init+0x74>)
 80047da:	2200      	movs	r2, #0
 80047dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80047de:	4b14      	ldr	r3, [pc, #80]	; (8004830 <MX_I2C1_Init+0x74>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80047e4:	4b12      	ldr	r3, [pc, #72]	; (8004830 <MX_I2C1_Init+0x74>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <MX_I2C1_Init+0x74>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <MX_I2C1_Init+0x74>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047f6:	480e      	ldr	r0, [pc, #56]	; (8004830 <MX_I2C1_Init+0x74>)
 80047f8:	f7fc fd40 	bl	800127c <HAL_I2C_Init>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004802:	f000 f897 	bl	8004934 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004806:	2100      	movs	r1, #0
 8004808:	4809      	ldr	r0, [pc, #36]	; (8004830 <MX_I2C1_Init+0x74>)
 800480a:	f7fd fd8c 	bl	8002326 <HAL_I2CEx_ConfigAnalogFilter>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004814:	f000 f88e 	bl	8004934 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004818:	2100      	movs	r1, #0
 800481a:	4805      	ldr	r0, [pc, #20]	; (8004830 <MX_I2C1_Init+0x74>)
 800481c:	f7fd fdce 	bl	80023bc <HAL_I2CEx_ConfigDigitalFilter>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004826:	f000 f885 	bl	8004934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800482a:	bf00      	nop
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000208 	.word	0x20000208
 8004834:	40005400 	.word	0x40005400
 8004838:	00103d84 	.word	0x00103d84

0800483c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004840:	4b14      	ldr	r3, [pc, #80]	; (8004894 <MX_USART1_UART_Init+0x58>)
 8004842:	4a15      	ldr	r2, [pc, #84]	; (8004898 <MX_USART1_UART_Init+0x5c>)
 8004844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004846:	4b13      	ldr	r3, [pc, #76]	; (8004894 <MX_USART1_UART_Init+0x58>)
 8004848:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800484c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800484e:	4b11      	ldr	r3, [pc, #68]	; (8004894 <MX_USART1_UART_Init+0x58>)
 8004850:	2200      	movs	r2, #0
 8004852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <MX_USART1_UART_Init+0x58>)
 8004856:	2200      	movs	r2, #0
 8004858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800485a:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <MX_USART1_UART_Init+0x58>)
 800485c:	2200      	movs	r2, #0
 800485e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <MX_USART1_UART_Init+0x58>)
 8004862:	220c      	movs	r2, #12
 8004864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <MX_USART1_UART_Init+0x58>)
 8004868:	2200      	movs	r2, #0
 800486a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800486c:	4b09      	ldr	r3, [pc, #36]	; (8004894 <MX_USART1_UART_Init+0x58>)
 800486e:	2200      	movs	r2, #0
 8004870:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <MX_USART1_UART_Init+0x58>)
 8004874:	2200      	movs	r2, #0
 8004876:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004878:	4b06      	ldr	r3, [pc, #24]	; (8004894 <MX_USART1_UART_Init+0x58>)
 800487a:	2200      	movs	r2, #0
 800487c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800487e:	4805      	ldr	r0, [pc, #20]	; (8004894 <MX_USART1_UART_Init+0x58>)
 8004880:	f7ff f8d6 	bl	8003a30 <HAL_UART_Init>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800488a:	f000 f853 	bl	8004934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800488e:	bf00      	nop
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	20000258 	.word	0x20000258
 8004898:	40013800 	.word	0x40013800

0800489c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a2:	f107 030c 	add.w	r3, r7, #12
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	609a      	str	r2, [r3, #8]
 80048ae:	60da      	str	r2, [r3, #12]
 80048b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048b2:	4b1e      	ldr	r3, [pc, #120]	; (800492c <MX_GPIO_Init+0x90>)
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	4a1d      	ldr	r2, [pc, #116]	; (800492c <MX_GPIO_Init+0x90>)
 80048b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048bc:	6153      	str	r3, [r2, #20]
 80048be:	4b1b      	ldr	r3, [pc, #108]	; (800492c <MX_GPIO_Init+0x90>)
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80048ca:	4b18      	ldr	r3, [pc, #96]	; (800492c <MX_GPIO_Init+0x90>)
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	4a17      	ldr	r2, [pc, #92]	; (800492c <MX_GPIO_Init+0x90>)
 80048d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048d4:	6153      	str	r3, [r2, #20]
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <MX_GPIO_Init+0x90>)
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <MX_GPIO_Init+0x90>)
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	4a11      	ldr	r2, [pc, #68]	; (800492c <MX_GPIO_Init+0x90>)
 80048e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ec:	6153      	str	r3, [r2, #20]
 80048ee:	4b0f      	ldr	r3, [pc, #60]	; (800492c <MX_GPIO_Init+0x90>)
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80048fa:	2200      	movs	r2, #0
 80048fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004900:	480b      	ldr	r0, [pc, #44]	; (8004930 <MX_GPIO_Init+0x94>)
 8004902:	f7fc fca3 	bl	800124c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800490a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800490c:	2301      	movs	r3, #1
 800490e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004914:	2300      	movs	r3, #0
 8004916:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004918:	f107 030c 	add.w	r3, r7, #12
 800491c:	4619      	mov	r1, r3
 800491e:	4804      	ldr	r0, [pc, #16]	; (8004930 <MX_GPIO_Init+0x94>)
 8004920:	f7fc fb1a 	bl	8000f58 <HAL_GPIO_Init>

}
 8004924:	bf00      	nop
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40021000 	.word	0x40021000
 8004930:	48001000 	.word	0x48001000

08004934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <HAL_MspInit+0x44>)
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <HAL_MspInit+0x44>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6193      	str	r3, [r2, #24]
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <HAL_MspInit+0x44>)
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <HAL_MspInit+0x44>)
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	4a08      	ldr	r2, [pc, #32]	; (8004988 <HAL_MspInit+0x44>)
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496c:	61d3      	str	r3, [r2, #28]
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_MspInit+0x44>)
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000

0800498c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <HAL_I2C_MspInit+0xa0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d139      	bne.n	8004a22 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_I2C_MspInit+0xa4>)
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <HAL_I2C_MspInit+0xa4>)
 80049b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b8:	6153      	str	r3, [r2, #20]
 80049ba:	4b1d      	ldr	r3, [pc, #116]	; (8004a30 <HAL_I2C_MspInit+0xa4>)
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA14     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80049c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80049ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049cc:	2312      	movs	r3, #18
 80049ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049d0:	2301      	movs	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049d4:	2303      	movs	r3, #3
 80049d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049d8:	2304      	movs	r3, #4
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049dc:	f107 0314 	add.w	r3, r7, #20
 80049e0:	4619      	mov	r1, r3
 80049e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80049e6:	f7fc fab7 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049ea:	4b11      	ldr	r3, [pc, #68]	; (8004a30 <HAL_I2C_MspInit+0xa4>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	4a10      	ldr	r2, [pc, #64]	; (8004a30 <HAL_I2C_MspInit+0xa4>)
 80049f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049f4:	61d3      	str	r3, [r2, #28]
 80049f6:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <HAL_I2C_MspInit+0xa4>)
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004a02:	2200      	movs	r2, #0
 8004a04:	2100      	movs	r1, #0
 8004a06:	201f      	movs	r0, #31
 8004a08:	f7fc fa31 	bl	8000e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004a0c:	201f      	movs	r0, #31
 8004a0e:	f7fc fa4a 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004a12:	2200      	movs	r2, #0
 8004a14:	2100      	movs	r1, #0
 8004a16:	2020      	movs	r0, #32
 8004a18:	f7fc fa29 	bl	8000e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004a1c:	2020      	movs	r0, #32
 8004a1e:	f7fc fa42 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004a22:	bf00      	nop
 8004a24:	3728      	adds	r7, #40	; 0x28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40005400 	.word	0x40005400
 8004a30:	40021000 	.word	0x40021000

08004a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	; 0x28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a3c:	f107 0314 	add.w	r3, r7, #20
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	605a      	str	r2, [r3, #4]
 8004a46:	609a      	str	r2, [r3, #8]
 8004a48:	60da      	str	r2, [r3, #12]
 8004a4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a1b      	ldr	r2, [pc, #108]	; (8004ac0 <HAL_UART_MspInit+0x8c>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d12f      	bne.n	8004ab6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a56:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <HAL_UART_MspInit+0x90>)
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <HAL_UART_MspInit+0x90>)
 8004a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a60:	6193      	str	r3, [r2, #24]
 8004a62:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_UART_MspInit+0x90>)
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a6e:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <HAL_UART_MspInit+0x90>)
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <HAL_UART_MspInit+0x90>)
 8004a74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a78:	6153      	str	r3, [r2, #20]
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_UART_MspInit+0x90>)
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004a86:	2330      	movs	r3, #48	; 0x30
 8004a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a92:	2303      	movs	r3, #3
 8004a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004a96:	2307      	movs	r3, #7
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a9a:	f107 0314 	add.w	r3, r7, #20
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4809      	ldr	r0, [pc, #36]	; (8004ac8 <HAL_UART_MspInit+0x94>)
 8004aa2:	f7fc fa59 	bl	8000f58 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	2025      	movs	r0, #37	; 0x25
 8004aac:	f7fc f9df 	bl	8000e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ab0:	2025      	movs	r0, #37	; 0x25
 8004ab2:	f7fc f9f8 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004ab6:	bf00      	nop
 8004ab8:	3728      	adds	r7, #40	; 0x28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40013800 	.word	0x40013800
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	48000800 	.word	0x48000800

08004acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ad0:	bf00      	nop
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ada:	b480      	push	{r7}
 8004adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ade:	e7fe      	b.n	8004ade <HardFault_Handler+0x4>

08004ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ae4:	e7fe      	b.n	8004ae4 <MemManage_Handler+0x4>

08004ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004aea:	e7fe      	b.n	8004aea <BusFault_Handler+0x4>

08004aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004af0:	e7fe      	b.n	8004af0 <UsageFault_Handler+0x4>

08004af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004af2:	b480      	push	{r7}
 8004af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004af6:	bf00      	nop
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b12:	bf00      	nop
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b20:	f7fc f888 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b24:	bf00      	nop
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004b2c:	4802      	ldr	r0, [pc, #8]	; (8004b38 <I2C1_EV_IRQHandler+0x10>)
 8004b2e:	f7fc fd4f 	bl	80015d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000208 	.word	0x20000208

08004b3c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004b40:	4802      	ldr	r0, [pc, #8]	; (8004b4c <I2C1_ER_IRQHandler+0x10>)
 8004b42:	f7fc fd5f 	bl	8001604 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004b46:	bf00      	nop
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20000208 	.word	0x20000208

08004b50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b54:	4802      	ldr	r0, [pc, #8]	; (8004b60 <USART1_IRQHandler+0x10>)
 8004b56:	f7ff f84d 	bl	8003bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b5a:	bf00      	nop
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000258 	.word	0x20000258

08004b64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004b6c:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <_sbrk+0x50>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <_sbrk+0x16>
		heap_end = &end;
 8004b74:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <_sbrk+0x50>)
 8004b76:	4a10      	ldr	r2, [pc, #64]	; (8004bb8 <_sbrk+0x54>)
 8004b78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004b7a:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <_sbrk+0x50>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004b80:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <_sbrk+0x50>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4413      	add	r3, r2
 8004b88:	466a      	mov	r2, sp
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d907      	bls.n	8004b9e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004b8e:	f000 f855 	bl	8004c3c <__errno>
 8004b92:	4602      	mov	r2, r0
 8004b94:	230c      	movs	r3, #12
 8004b96:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004b98:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9c:	e006      	b.n	8004bac <_sbrk+0x48>
	}

	heap_end += incr;
 8004b9e:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <_sbrk+0x50>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	4a03      	ldr	r2, [pc, #12]	; (8004bb4 <_sbrk+0x50>)
 8004ba8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004baa:	68fb      	ldr	r3, [r7, #12]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	200001f8 	.word	0x200001f8
 8004bb8:	200002e0 	.word	0x200002e0

08004bbc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004bc0:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <SystemInit+0x28>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	4a07      	ldr	r2, [pc, #28]	; (8004be4 <SystemInit+0x28>)
 8004bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004bd0:	4b04      	ldr	r3, [pc, #16]	; (8004be4 <SystemInit+0x28>)
 8004bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bd6:	609a      	str	r2, [r3, #8]
#endif
}
 8004bd8:	bf00      	nop
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	e000ed00 	.word	0xe000ed00

08004be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004bec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004bee:	e003      	b.n	8004bf8 <LoopCopyDataInit>

08004bf0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004bf2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004bf4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004bf6:	3104      	adds	r1, #4

08004bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004bf8:	480b      	ldr	r0, [pc, #44]	; (8004c28 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8004bfc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004bfe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004c00:	d3f6      	bcc.n	8004bf0 <CopyDataInit>
	ldr	r2, =_sbss
 8004c02:	4a0b      	ldr	r2, [pc, #44]	; (8004c30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004c04:	e002      	b.n	8004c0c <LoopFillZerobss>

08004c06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004c06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004c08:	f842 3b04 	str.w	r3, [r2], #4

08004c0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <LoopForever+0x16>)
	cmp	r2, r3
 8004c0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004c10:	d3f9      	bcc.n	8004c06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004c12:	f7ff ffd3 	bl	8004bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c16:	f000 f817 	bl	8004c48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c1a:	f7ff fd3b 	bl	8004694 <main>

08004c1e <LoopForever>:

LoopForever:
    b LoopForever
 8004c1e:	e7fe      	b.n	8004c1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004c20:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8004c24:	08006fe0 	.word	0x08006fe0
	ldr	r0, =_sdata
 8004c28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004c2c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8004c30:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8004c34:	200002e0 	.word	0x200002e0

08004c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c38:	e7fe      	b.n	8004c38 <ADC1_2_IRQHandler>
	...

08004c3c <__errno>:
 8004c3c:	4b01      	ldr	r3, [pc, #4]	; (8004c44 <__errno+0x8>)
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	2000000c 	.word	0x2000000c

08004c48 <__libc_init_array>:
 8004c48:	b570      	push	{r4, r5, r6, lr}
 8004c4a:	4e0d      	ldr	r6, [pc, #52]	; (8004c80 <__libc_init_array+0x38>)
 8004c4c:	4c0d      	ldr	r4, [pc, #52]	; (8004c84 <__libc_init_array+0x3c>)
 8004c4e:	1ba4      	subs	r4, r4, r6
 8004c50:	10a4      	asrs	r4, r4, #2
 8004c52:	2500      	movs	r5, #0
 8004c54:	42a5      	cmp	r5, r4
 8004c56:	d109      	bne.n	8004c6c <__libc_init_array+0x24>
 8004c58:	4e0b      	ldr	r6, [pc, #44]	; (8004c88 <__libc_init_array+0x40>)
 8004c5a:	4c0c      	ldr	r4, [pc, #48]	; (8004c8c <__libc_init_array+0x44>)
 8004c5c:	f002 f85c 	bl	8006d18 <_init>
 8004c60:	1ba4      	subs	r4, r4, r6
 8004c62:	10a4      	asrs	r4, r4, #2
 8004c64:	2500      	movs	r5, #0
 8004c66:	42a5      	cmp	r5, r4
 8004c68:	d105      	bne.n	8004c76 <__libc_init_array+0x2e>
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}
 8004c6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c70:	4798      	blx	r3
 8004c72:	3501      	adds	r5, #1
 8004c74:	e7ee      	b.n	8004c54 <__libc_init_array+0xc>
 8004c76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c7a:	4798      	blx	r3
 8004c7c:	3501      	adds	r5, #1
 8004c7e:	e7f2      	b.n	8004c66 <__libc_init_array+0x1e>
 8004c80:	08006fd8 	.word	0x08006fd8
 8004c84:	08006fd8 	.word	0x08006fd8
 8004c88:	08006fd8 	.word	0x08006fd8
 8004c8c:	08006fdc 	.word	0x08006fdc

08004c90 <memset>:
 8004c90:	4402      	add	r2, r0
 8004c92:	4603      	mov	r3, r0
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d100      	bne.n	8004c9a <memset+0xa>
 8004c98:	4770      	bx	lr
 8004c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c9e:	e7f9      	b.n	8004c94 <memset+0x4>

08004ca0 <__cvt>:
 8004ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca4:	ec55 4b10 	vmov	r4, r5, d0
 8004ca8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004caa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004cae:	2d00      	cmp	r5, #0
 8004cb0:	460e      	mov	r6, r1
 8004cb2:	4691      	mov	r9, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	bfb8      	it	lt
 8004cb8:	4622      	movlt	r2, r4
 8004cba:	462b      	mov	r3, r5
 8004cbc:	f027 0720 	bic.w	r7, r7, #32
 8004cc0:	bfbb      	ittet	lt
 8004cc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004cc6:	461d      	movlt	r5, r3
 8004cc8:	2300      	movge	r3, #0
 8004cca:	232d      	movlt	r3, #45	; 0x2d
 8004ccc:	bfb8      	it	lt
 8004cce:	4614      	movlt	r4, r2
 8004cd0:	2f46      	cmp	r7, #70	; 0x46
 8004cd2:	700b      	strb	r3, [r1, #0]
 8004cd4:	d004      	beq.n	8004ce0 <__cvt+0x40>
 8004cd6:	2f45      	cmp	r7, #69	; 0x45
 8004cd8:	d100      	bne.n	8004cdc <__cvt+0x3c>
 8004cda:	3601      	adds	r6, #1
 8004cdc:	2102      	movs	r1, #2
 8004cde:	e000      	b.n	8004ce2 <__cvt+0x42>
 8004ce0:	2103      	movs	r1, #3
 8004ce2:	ab03      	add	r3, sp, #12
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	ab02      	add	r3, sp, #8
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	4632      	mov	r2, r6
 8004cec:	4653      	mov	r3, sl
 8004cee:	ec45 4b10 	vmov	d0, r4, r5
 8004cf2:	f000 fcdd 	bl	80056b0 <_dtoa_r>
 8004cf6:	2f47      	cmp	r7, #71	; 0x47
 8004cf8:	4680      	mov	r8, r0
 8004cfa:	d102      	bne.n	8004d02 <__cvt+0x62>
 8004cfc:	f019 0f01 	tst.w	r9, #1
 8004d00:	d026      	beq.n	8004d50 <__cvt+0xb0>
 8004d02:	2f46      	cmp	r7, #70	; 0x46
 8004d04:	eb08 0906 	add.w	r9, r8, r6
 8004d08:	d111      	bne.n	8004d2e <__cvt+0x8e>
 8004d0a:	f898 3000 	ldrb.w	r3, [r8]
 8004d0e:	2b30      	cmp	r3, #48	; 0x30
 8004d10:	d10a      	bne.n	8004d28 <__cvt+0x88>
 8004d12:	2200      	movs	r2, #0
 8004d14:	2300      	movs	r3, #0
 8004d16:	4620      	mov	r0, r4
 8004d18:	4629      	mov	r1, r5
 8004d1a:	f7fb fed5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d1e:	b918      	cbnz	r0, 8004d28 <__cvt+0x88>
 8004d20:	f1c6 0601 	rsb	r6, r6, #1
 8004d24:	f8ca 6000 	str.w	r6, [sl]
 8004d28:	f8da 3000 	ldr.w	r3, [sl]
 8004d2c:	4499      	add	r9, r3
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2300      	movs	r3, #0
 8004d32:	4620      	mov	r0, r4
 8004d34:	4629      	mov	r1, r5
 8004d36:	f7fb fec7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d3a:	b938      	cbnz	r0, 8004d4c <__cvt+0xac>
 8004d3c:	2230      	movs	r2, #48	; 0x30
 8004d3e:	9b03      	ldr	r3, [sp, #12]
 8004d40:	454b      	cmp	r3, r9
 8004d42:	d205      	bcs.n	8004d50 <__cvt+0xb0>
 8004d44:	1c59      	adds	r1, r3, #1
 8004d46:	9103      	str	r1, [sp, #12]
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	e7f8      	b.n	8004d3e <__cvt+0x9e>
 8004d4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d50:	9b03      	ldr	r3, [sp, #12]
 8004d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d54:	eba3 0308 	sub.w	r3, r3, r8
 8004d58:	4640      	mov	r0, r8
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	b004      	add	sp, #16
 8004d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004d62 <__exponent>:
 8004d62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d64:	2900      	cmp	r1, #0
 8004d66:	4604      	mov	r4, r0
 8004d68:	bfba      	itte	lt
 8004d6a:	4249      	neglt	r1, r1
 8004d6c:	232d      	movlt	r3, #45	; 0x2d
 8004d6e:	232b      	movge	r3, #43	; 0x2b
 8004d70:	2909      	cmp	r1, #9
 8004d72:	f804 2b02 	strb.w	r2, [r4], #2
 8004d76:	7043      	strb	r3, [r0, #1]
 8004d78:	dd20      	ble.n	8004dbc <__exponent+0x5a>
 8004d7a:	f10d 0307 	add.w	r3, sp, #7
 8004d7e:	461f      	mov	r7, r3
 8004d80:	260a      	movs	r6, #10
 8004d82:	fb91 f5f6 	sdiv	r5, r1, r6
 8004d86:	fb06 1115 	mls	r1, r6, r5, r1
 8004d8a:	3130      	adds	r1, #48	; 0x30
 8004d8c:	2d09      	cmp	r5, #9
 8004d8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d92:	f103 32ff 	add.w	r2, r3, #4294967295
 8004d96:	4629      	mov	r1, r5
 8004d98:	dc09      	bgt.n	8004dae <__exponent+0x4c>
 8004d9a:	3130      	adds	r1, #48	; 0x30
 8004d9c:	3b02      	subs	r3, #2
 8004d9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004da2:	42bb      	cmp	r3, r7
 8004da4:	4622      	mov	r2, r4
 8004da6:	d304      	bcc.n	8004db2 <__exponent+0x50>
 8004da8:	1a10      	subs	r0, r2, r0
 8004daa:	b003      	add	sp, #12
 8004dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dae:	4613      	mov	r3, r2
 8004db0:	e7e7      	b.n	8004d82 <__exponent+0x20>
 8004db2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004db6:	f804 2b01 	strb.w	r2, [r4], #1
 8004dba:	e7f2      	b.n	8004da2 <__exponent+0x40>
 8004dbc:	2330      	movs	r3, #48	; 0x30
 8004dbe:	4419      	add	r1, r3
 8004dc0:	7083      	strb	r3, [r0, #2]
 8004dc2:	1d02      	adds	r2, r0, #4
 8004dc4:	70c1      	strb	r1, [r0, #3]
 8004dc6:	e7ef      	b.n	8004da8 <__exponent+0x46>

08004dc8 <_printf_float>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	b08d      	sub	sp, #52	; 0x34
 8004dce:	460c      	mov	r4, r1
 8004dd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004dd4:	4616      	mov	r6, r2
 8004dd6:	461f      	mov	r7, r3
 8004dd8:	4605      	mov	r5, r0
 8004dda:	f001 fa21 	bl	8006220 <_localeconv_r>
 8004dde:	6803      	ldr	r3, [r0, #0]
 8004de0:	9304      	str	r3, [sp, #16]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fb f9f4 	bl	80001d0 <strlen>
 8004de8:	2300      	movs	r3, #0
 8004dea:	930a      	str	r3, [sp, #40]	; 0x28
 8004dec:	f8d8 3000 	ldr.w	r3, [r8]
 8004df0:	9005      	str	r0, [sp, #20]
 8004df2:	3307      	adds	r3, #7
 8004df4:	f023 0307 	bic.w	r3, r3, #7
 8004df8:	f103 0208 	add.w	r2, r3, #8
 8004dfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e00:	f8d4 b000 	ldr.w	fp, [r4]
 8004e04:	f8c8 2000 	str.w	r2, [r8]
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e10:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004e14:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e18:	9307      	str	r3, [sp, #28]
 8004e1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e22:	4ba7      	ldr	r3, [pc, #668]	; (80050c0 <_printf_float+0x2f8>)
 8004e24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e28:	f7fb fe80 	bl	8000b2c <__aeabi_dcmpun>
 8004e2c:	bb70      	cbnz	r0, 8004e8c <_printf_float+0xc4>
 8004e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e32:	4ba3      	ldr	r3, [pc, #652]	; (80050c0 <_printf_float+0x2f8>)
 8004e34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e38:	f7fb fe5a 	bl	8000af0 <__aeabi_dcmple>
 8004e3c:	bb30      	cbnz	r0, 8004e8c <_printf_float+0xc4>
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2300      	movs	r3, #0
 8004e42:	4640      	mov	r0, r8
 8004e44:	4649      	mov	r1, r9
 8004e46:	f7fb fe49 	bl	8000adc <__aeabi_dcmplt>
 8004e4a:	b110      	cbz	r0, 8004e52 <_printf_float+0x8a>
 8004e4c:	232d      	movs	r3, #45	; 0x2d
 8004e4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e52:	4a9c      	ldr	r2, [pc, #624]	; (80050c4 <_printf_float+0x2fc>)
 8004e54:	4b9c      	ldr	r3, [pc, #624]	; (80050c8 <_printf_float+0x300>)
 8004e56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004e5a:	bf8c      	ite	hi
 8004e5c:	4690      	movhi	r8, r2
 8004e5e:	4698      	movls	r8, r3
 8004e60:	2303      	movs	r3, #3
 8004e62:	f02b 0204 	bic.w	r2, fp, #4
 8004e66:	6123      	str	r3, [r4, #16]
 8004e68:	6022      	str	r2, [r4, #0]
 8004e6a:	f04f 0900 	mov.w	r9, #0
 8004e6e:	9700      	str	r7, [sp, #0]
 8004e70:	4633      	mov	r3, r6
 8004e72:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e74:	4621      	mov	r1, r4
 8004e76:	4628      	mov	r0, r5
 8004e78:	f000 f9e6 	bl	8005248 <_printf_common>
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f040 808d 	bne.w	8004f9c <_printf_float+0x1d4>
 8004e82:	f04f 30ff 	mov.w	r0, #4294967295
 8004e86:	b00d      	add	sp, #52	; 0x34
 8004e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	464b      	mov	r3, r9
 8004e90:	4640      	mov	r0, r8
 8004e92:	4649      	mov	r1, r9
 8004e94:	f7fb fe4a 	bl	8000b2c <__aeabi_dcmpun>
 8004e98:	b110      	cbz	r0, 8004ea0 <_printf_float+0xd8>
 8004e9a:	4a8c      	ldr	r2, [pc, #560]	; (80050cc <_printf_float+0x304>)
 8004e9c:	4b8c      	ldr	r3, [pc, #560]	; (80050d0 <_printf_float+0x308>)
 8004e9e:	e7da      	b.n	8004e56 <_printf_float+0x8e>
 8004ea0:	6861      	ldr	r1, [r4, #4]
 8004ea2:	1c4b      	adds	r3, r1, #1
 8004ea4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004ea8:	a80a      	add	r0, sp, #40	; 0x28
 8004eaa:	d13e      	bne.n	8004f2a <_printf_float+0x162>
 8004eac:	2306      	movs	r3, #6
 8004eae:	6063      	str	r3, [r4, #4]
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004eb6:	ab09      	add	r3, sp, #36	; 0x24
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	ec49 8b10 	vmov	d0, r8, r9
 8004ebe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ec2:	6022      	str	r2, [r4, #0]
 8004ec4:	f8cd a004 	str.w	sl, [sp, #4]
 8004ec8:	6861      	ldr	r1, [r4, #4]
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f7ff fee8 	bl	8004ca0 <__cvt>
 8004ed0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004ed4:	2b47      	cmp	r3, #71	; 0x47
 8004ed6:	4680      	mov	r8, r0
 8004ed8:	d109      	bne.n	8004eee <_printf_float+0x126>
 8004eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004edc:	1cd8      	adds	r0, r3, #3
 8004ede:	db02      	blt.n	8004ee6 <_printf_float+0x11e>
 8004ee0:	6862      	ldr	r2, [r4, #4]
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	dd47      	ble.n	8004f76 <_printf_float+0x1ae>
 8004ee6:	f1aa 0a02 	sub.w	sl, sl, #2
 8004eea:	fa5f fa8a 	uxtb.w	sl, sl
 8004eee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ef4:	d824      	bhi.n	8004f40 <_printf_float+0x178>
 8004ef6:	3901      	subs	r1, #1
 8004ef8:	4652      	mov	r2, sl
 8004efa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004efe:	9109      	str	r1, [sp, #36]	; 0x24
 8004f00:	f7ff ff2f 	bl	8004d62 <__exponent>
 8004f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f06:	1813      	adds	r3, r2, r0
 8004f08:	2a01      	cmp	r2, #1
 8004f0a:	4681      	mov	r9, r0
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	dc02      	bgt.n	8004f16 <_printf_float+0x14e>
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	07d1      	lsls	r1, r2, #31
 8004f14:	d501      	bpl.n	8004f1a <_printf_float+0x152>
 8004f16:	3301      	adds	r3, #1
 8004f18:	6123      	str	r3, [r4, #16]
 8004f1a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0a5      	beq.n	8004e6e <_printf_float+0xa6>
 8004f22:	232d      	movs	r3, #45	; 0x2d
 8004f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f28:	e7a1      	b.n	8004e6e <_printf_float+0xa6>
 8004f2a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004f2e:	f000 8177 	beq.w	8005220 <_printf_float+0x458>
 8004f32:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004f36:	d1bb      	bne.n	8004eb0 <_printf_float+0xe8>
 8004f38:	2900      	cmp	r1, #0
 8004f3a:	d1b9      	bne.n	8004eb0 <_printf_float+0xe8>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e7b6      	b.n	8004eae <_printf_float+0xe6>
 8004f40:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004f44:	d119      	bne.n	8004f7a <_printf_float+0x1b2>
 8004f46:	2900      	cmp	r1, #0
 8004f48:	6863      	ldr	r3, [r4, #4]
 8004f4a:	dd0c      	ble.n	8004f66 <_printf_float+0x19e>
 8004f4c:	6121      	str	r1, [r4, #16]
 8004f4e:	b913      	cbnz	r3, 8004f56 <_printf_float+0x18e>
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	07d2      	lsls	r2, r2, #31
 8004f54:	d502      	bpl.n	8004f5c <_printf_float+0x194>
 8004f56:	3301      	adds	r3, #1
 8004f58:	440b      	add	r3, r1
 8004f5a:	6123      	str	r3, [r4, #16]
 8004f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f5e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f60:	f04f 0900 	mov.w	r9, #0
 8004f64:	e7d9      	b.n	8004f1a <_printf_float+0x152>
 8004f66:	b913      	cbnz	r3, 8004f6e <_printf_float+0x1a6>
 8004f68:	6822      	ldr	r2, [r4, #0]
 8004f6a:	07d0      	lsls	r0, r2, #31
 8004f6c:	d501      	bpl.n	8004f72 <_printf_float+0x1aa>
 8004f6e:	3302      	adds	r3, #2
 8004f70:	e7f3      	b.n	8004f5a <_printf_float+0x192>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e7f1      	b.n	8004f5a <_printf_float+0x192>
 8004f76:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004f7a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	db05      	blt.n	8004f8e <_printf_float+0x1c6>
 8004f82:	6822      	ldr	r2, [r4, #0]
 8004f84:	6123      	str	r3, [r4, #16]
 8004f86:	07d1      	lsls	r1, r2, #31
 8004f88:	d5e8      	bpl.n	8004f5c <_printf_float+0x194>
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	e7e5      	b.n	8004f5a <_printf_float+0x192>
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bfd4      	ite	le
 8004f92:	f1c3 0302 	rsble	r3, r3, #2
 8004f96:	2301      	movgt	r3, #1
 8004f98:	4413      	add	r3, r2
 8004f9a:	e7de      	b.n	8004f5a <_printf_float+0x192>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	055a      	lsls	r2, r3, #21
 8004fa0:	d407      	bmi.n	8004fb2 <_printf_float+0x1ea>
 8004fa2:	6923      	ldr	r3, [r4, #16]
 8004fa4:	4642      	mov	r2, r8
 8004fa6:	4631      	mov	r1, r6
 8004fa8:	4628      	mov	r0, r5
 8004faa:	47b8      	blx	r7
 8004fac:	3001      	adds	r0, #1
 8004fae:	d12b      	bne.n	8005008 <_printf_float+0x240>
 8004fb0:	e767      	b.n	8004e82 <_printf_float+0xba>
 8004fb2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004fb6:	f240 80dc 	bls.w	8005172 <_printf_float+0x3aa>
 8004fba:	2200      	movs	r2, #0
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fc2:	f7fb fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d033      	beq.n	8005032 <_printf_float+0x26a>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	4a41      	ldr	r2, [pc, #260]	; (80050d4 <_printf_float+0x30c>)
 8004fce:	4631      	mov	r1, r6
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	47b8      	blx	r7
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	f43f af54 	beq.w	8004e82 <_printf_float+0xba>
 8004fda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	db02      	blt.n	8004fe8 <_printf_float+0x220>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	07d8      	lsls	r0, r3, #31
 8004fe6:	d50f      	bpl.n	8005008 <_printf_float+0x240>
 8004fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fec:	4631      	mov	r1, r6
 8004fee:	4628      	mov	r0, r5
 8004ff0:	47b8      	blx	r7
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	f43f af45 	beq.w	8004e82 <_printf_float+0xba>
 8004ff8:	f04f 0800 	mov.w	r8, #0
 8004ffc:	f104 091a 	add.w	r9, r4, #26
 8005000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005002:	3b01      	subs	r3, #1
 8005004:	4543      	cmp	r3, r8
 8005006:	dc09      	bgt.n	800501c <_printf_float+0x254>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	079b      	lsls	r3, r3, #30
 800500c:	f100 8103 	bmi.w	8005216 <_printf_float+0x44e>
 8005010:	68e0      	ldr	r0, [r4, #12]
 8005012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005014:	4298      	cmp	r0, r3
 8005016:	bfb8      	it	lt
 8005018:	4618      	movlt	r0, r3
 800501a:	e734      	b.n	8004e86 <_printf_float+0xbe>
 800501c:	2301      	movs	r3, #1
 800501e:	464a      	mov	r2, r9
 8005020:	4631      	mov	r1, r6
 8005022:	4628      	mov	r0, r5
 8005024:	47b8      	blx	r7
 8005026:	3001      	adds	r0, #1
 8005028:	f43f af2b 	beq.w	8004e82 <_printf_float+0xba>
 800502c:	f108 0801 	add.w	r8, r8, #1
 8005030:	e7e6      	b.n	8005000 <_printf_float+0x238>
 8005032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005034:	2b00      	cmp	r3, #0
 8005036:	dc2b      	bgt.n	8005090 <_printf_float+0x2c8>
 8005038:	2301      	movs	r3, #1
 800503a:	4a26      	ldr	r2, [pc, #152]	; (80050d4 <_printf_float+0x30c>)
 800503c:	4631      	mov	r1, r6
 800503e:	4628      	mov	r0, r5
 8005040:	47b8      	blx	r7
 8005042:	3001      	adds	r0, #1
 8005044:	f43f af1d 	beq.w	8004e82 <_printf_float+0xba>
 8005048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800504a:	b923      	cbnz	r3, 8005056 <_printf_float+0x28e>
 800504c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800504e:	b913      	cbnz	r3, 8005056 <_printf_float+0x28e>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	07d9      	lsls	r1, r3, #31
 8005054:	d5d8      	bpl.n	8005008 <_printf_float+0x240>
 8005056:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800505a:	4631      	mov	r1, r6
 800505c:	4628      	mov	r0, r5
 800505e:	47b8      	blx	r7
 8005060:	3001      	adds	r0, #1
 8005062:	f43f af0e 	beq.w	8004e82 <_printf_float+0xba>
 8005066:	f04f 0900 	mov.w	r9, #0
 800506a:	f104 0a1a 	add.w	sl, r4, #26
 800506e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005070:	425b      	negs	r3, r3
 8005072:	454b      	cmp	r3, r9
 8005074:	dc01      	bgt.n	800507a <_printf_float+0x2b2>
 8005076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005078:	e794      	b.n	8004fa4 <_printf_float+0x1dc>
 800507a:	2301      	movs	r3, #1
 800507c:	4652      	mov	r2, sl
 800507e:	4631      	mov	r1, r6
 8005080:	4628      	mov	r0, r5
 8005082:	47b8      	blx	r7
 8005084:	3001      	adds	r0, #1
 8005086:	f43f aefc 	beq.w	8004e82 <_printf_float+0xba>
 800508a:	f109 0901 	add.w	r9, r9, #1
 800508e:	e7ee      	b.n	800506e <_printf_float+0x2a6>
 8005090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005092:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005094:	429a      	cmp	r2, r3
 8005096:	bfa8      	it	ge
 8005098:	461a      	movge	r2, r3
 800509a:	2a00      	cmp	r2, #0
 800509c:	4691      	mov	r9, r2
 800509e:	dd07      	ble.n	80050b0 <_printf_float+0x2e8>
 80050a0:	4613      	mov	r3, r2
 80050a2:	4631      	mov	r1, r6
 80050a4:	4642      	mov	r2, r8
 80050a6:	4628      	mov	r0, r5
 80050a8:	47b8      	blx	r7
 80050aa:	3001      	adds	r0, #1
 80050ac:	f43f aee9 	beq.w	8004e82 <_printf_float+0xba>
 80050b0:	f104 031a 	add.w	r3, r4, #26
 80050b4:	f04f 0b00 	mov.w	fp, #0
 80050b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050bc:	9306      	str	r3, [sp, #24]
 80050be:	e015      	b.n	80050ec <_printf_float+0x324>
 80050c0:	7fefffff 	.word	0x7fefffff
 80050c4:	08006d7c 	.word	0x08006d7c
 80050c8:	08006d78 	.word	0x08006d78
 80050cc:	08006d84 	.word	0x08006d84
 80050d0:	08006d80 	.word	0x08006d80
 80050d4:	08006d88 	.word	0x08006d88
 80050d8:	2301      	movs	r3, #1
 80050da:	9a06      	ldr	r2, [sp, #24]
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	f43f aecd 	beq.w	8004e82 <_printf_float+0xba>
 80050e8:	f10b 0b01 	add.w	fp, fp, #1
 80050ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80050f0:	ebaa 0309 	sub.w	r3, sl, r9
 80050f4:	455b      	cmp	r3, fp
 80050f6:	dcef      	bgt.n	80050d8 <_printf_float+0x310>
 80050f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050fc:	429a      	cmp	r2, r3
 80050fe:	44d0      	add	r8, sl
 8005100:	db15      	blt.n	800512e <_printf_float+0x366>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	07da      	lsls	r2, r3, #31
 8005106:	d412      	bmi.n	800512e <_printf_float+0x366>
 8005108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800510a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800510c:	eba3 020a 	sub.w	r2, r3, sl
 8005110:	eba3 0a01 	sub.w	sl, r3, r1
 8005114:	4592      	cmp	sl, r2
 8005116:	bfa8      	it	ge
 8005118:	4692      	movge	sl, r2
 800511a:	f1ba 0f00 	cmp.w	sl, #0
 800511e:	dc0e      	bgt.n	800513e <_printf_float+0x376>
 8005120:	f04f 0800 	mov.w	r8, #0
 8005124:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005128:	f104 091a 	add.w	r9, r4, #26
 800512c:	e019      	b.n	8005162 <_printf_float+0x39a>
 800512e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005132:	4631      	mov	r1, r6
 8005134:	4628      	mov	r0, r5
 8005136:	47b8      	blx	r7
 8005138:	3001      	adds	r0, #1
 800513a:	d1e5      	bne.n	8005108 <_printf_float+0x340>
 800513c:	e6a1      	b.n	8004e82 <_printf_float+0xba>
 800513e:	4653      	mov	r3, sl
 8005140:	4642      	mov	r2, r8
 8005142:	4631      	mov	r1, r6
 8005144:	4628      	mov	r0, r5
 8005146:	47b8      	blx	r7
 8005148:	3001      	adds	r0, #1
 800514a:	d1e9      	bne.n	8005120 <_printf_float+0x358>
 800514c:	e699      	b.n	8004e82 <_printf_float+0xba>
 800514e:	2301      	movs	r3, #1
 8005150:	464a      	mov	r2, r9
 8005152:	4631      	mov	r1, r6
 8005154:	4628      	mov	r0, r5
 8005156:	47b8      	blx	r7
 8005158:	3001      	adds	r0, #1
 800515a:	f43f ae92 	beq.w	8004e82 <_printf_float+0xba>
 800515e:	f108 0801 	add.w	r8, r8, #1
 8005162:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	eba3 030a 	sub.w	r3, r3, sl
 800516c:	4543      	cmp	r3, r8
 800516e:	dcee      	bgt.n	800514e <_printf_float+0x386>
 8005170:	e74a      	b.n	8005008 <_printf_float+0x240>
 8005172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005174:	2a01      	cmp	r2, #1
 8005176:	dc01      	bgt.n	800517c <_printf_float+0x3b4>
 8005178:	07db      	lsls	r3, r3, #31
 800517a:	d53a      	bpl.n	80051f2 <_printf_float+0x42a>
 800517c:	2301      	movs	r3, #1
 800517e:	4642      	mov	r2, r8
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	47b8      	blx	r7
 8005186:	3001      	adds	r0, #1
 8005188:	f43f ae7b 	beq.w	8004e82 <_printf_float+0xba>
 800518c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005190:	4631      	mov	r1, r6
 8005192:	4628      	mov	r0, r5
 8005194:	47b8      	blx	r7
 8005196:	3001      	adds	r0, #1
 8005198:	f108 0801 	add.w	r8, r8, #1
 800519c:	f43f ae71 	beq.w	8004e82 <_printf_float+0xba>
 80051a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a2:	2200      	movs	r2, #0
 80051a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80051a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051ac:	2300      	movs	r3, #0
 80051ae:	f7fb fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80051b2:	b9c8      	cbnz	r0, 80051e8 <_printf_float+0x420>
 80051b4:	4653      	mov	r3, sl
 80051b6:	4642      	mov	r2, r8
 80051b8:	4631      	mov	r1, r6
 80051ba:	4628      	mov	r0, r5
 80051bc:	47b8      	blx	r7
 80051be:	3001      	adds	r0, #1
 80051c0:	d10e      	bne.n	80051e0 <_printf_float+0x418>
 80051c2:	e65e      	b.n	8004e82 <_printf_float+0xba>
 80051c4:	2301      	movs	r3, #1
 80051c6:	4652      	mov	r2, sl
 80051c8:	4631      	mov	r1, r6
 80051ca:	4628      	mov	r0, r5
 80051cc:	47b8      	blx	r7
 80051ce:	3001      	adds	r0, #1
 80051d0:	f43f ae57 	beq.w	8004e82 <_printf_float+0xba>
 80051d4:	f108 0801 	add.w	r8, r8, #1
 80051d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051da:	3b01      	subs	r3, #1
 80051dc:	4543      	cmp	r3, r8
 80051de:	dcf1      	bgt.n	80051c4 <_printf_float+0x3fc>
 80051e0:	464b      	mov	r3, r9
 80051e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051e6:	e6de      	b.n	8004fa6 <_printf_float+0x1de>
 80051e8:	f04f 0800 	mov.w	r8, #0
 80051ec:	f104 0a1a 	add.w	sl, r4, #26
 80051f0:	e7f2      	b.n	80051d8 <_printf_float+0x410>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e7df      	b.n	80051b6 <_printf_float+0x3ee>
 80051f6:	2301      	movs	r3, #1
 80051f8:	464a      	mov	r2, r9
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	f43f ae3e 	beq.w	8004e82 <_printf_float+0xba>
 8005206:	f108 0801 	add.w	r8, r8, #1
 800520a:	68e3      	ldr	r3, [r4, #12]
 800520c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	4543      	cmp	r3, r8
 8005212:	dcf0      	bgt.n	80051f6 <_printf_float+0x42e>
 8005214:	e6fc      	b.n	8005010 <_printf_float+0x248>
 8005216:	f04f 0800 	mov.w	r8, #0
 800521a:	f104 0919 	add.w	r9, r4, #25
 800521e:	e7f4      	b.n	800520a <_printf_float+0x442>
 8005220:	2900      	cmp	r1, #0
 8005222:	f43f ae8b 	beq.w	8004f3c <_printf_float+0x174>
 8005226:	2300      	movs	r3, #0
 8005228:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800522c:	ab09      	add	r3, sp, #36	; 0x24
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	ec49 8b10 	vmov	d0, r8, r9
 8005234:	6022      	str	r2, [r4, #0]
 8005236:	f8cd a004 	str.w	sl, [sp, #4]
 800523a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800523e:	4628      	mov	r0, r5
 8005240:	f7ff fd2e 	bl	8004ca0 <__cvt>
 8005244:	4680      	mov	r8, r0
 8005246:	e648      	b.n	8004eda <_printf_float+0x112>

08005248 <_printf_common>:
 8005248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800524c:	4691      	mov	r9, r2
 800524e:	461f      	mov	r7, r3
 8005250:	688a      	ldr	r2, [r1, #8]
 8005252:	690b      	ldr	r3, [r1, #16]
 8005254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005258:	4293      	cmp	r3, r2
 800525a:	bfb8      	it	lt
 800525c:	4613      	movlt	r3, r2
 800525e:	f8c9 3000 	str.w	r3, [r9]
 8005262:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005266:	4606      	mov	r6, r0
 8005268:	460c      	mov	r4, r1
 800526a:	b112      	cbz	r2, 8005272 <_printf_common+0x2a>
 800526c:	3301      	adds	r3, #1
 800526e:	f8c9 3000 	str.w	r3, [r9]
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	0699      	lsls	r1, r3, #26
 8005276:	bf42      	ittt	mi
 8005278:	f8d9 3000 	ldrmi.w	r3, [r9]
 800527c:	3302      	addmi	r3, #2
 800527e:	f8c9 3000 	strmi.w	r3, [r9]
 8005282:	6825      	ldr	r5, [r4, #0]
 8005284:	f015 0506 	ands.w	r5, r5, #6
 8005288:	d107      	bne.n	800529a <_printf_common+0x52>
 800528a:	f104 0a19 	add.w	sl, r4, #25
 800528e:	68e3      	ldr	r3, [r4, #12]
 8005290:	f8d9 2000 	ldr.w	r2, [r9]
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	42ab      	cmp	r3, r5
 8005298:	dc28      	bgt.n	80052ec <_printf_common+0xa4>
 800529a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800529e:	6822      	ldr	r2, [r4, #0]
 80052a0:	3300      	adds	r3, #0
 80052a2:	bf18      	it	ne
 80052a4:	2301      	movne	r3, #1
 80052a6:	0692      	lsls	r2, r2, #26
 80052a8:	d42d      	bmi.n	8005306 <_printf_common+0xbe>
 80052aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052ae:	4639      	mov	r1, r7
 80052b0:	4630      	mov	r0, r6
 80052b2:	47c0      	blx	r8
 80052b4:	3001      	adds	r0, #1
 80052b6:	d020      	beq.n	80052fa <_printf_common+0xb2>
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	68e5      	ldr	r5, [r4, #12]
 80052bc:	f8d9 2000 	ldr.w	r2, [r9]
 80052c0:	f003 0306 	and.w	r3, r3, #6
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	bf08      	it	eq
 80052c8:	1aad      	subeq	r5, r5, r2
 80052ca:	68a3      	ldr	r3, [r4, #8]
 80052cc:	6922      	ldr	r2, [r4, #16]
 80052ce:	bf0c      	ite	eq
 80052d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d4:	2500      	movne	r5, #0
 80052d6:	4293      	cmp	r3, r2
 80052d8:	bfc4      	itt	gt
 80052da:	1a9b      	subgt	r3, r3, r2
 80052dc:	18ed      	addgt	r5, r5, r3
 80052de:	f04f 0900 	mov.w	r9, #0
 80052e2:	341a      	adds	r4, #26
 80052e4:	454d      	cmp	r5, r9
 80052e6:	d11a      	bne.n	800531e <_printf_common+0xd6>
 80052e8:	2000      	movs	r0, #0
 80052ea:	e008      	b.n	80052fe <_printf_common+0xb6>
 80052ec:	2301      	movs	r3, #1
 80052ee:	4652      	mov	r2, sl
 80052f0:	4639      	mov	r1, r7
 80052f2:	4630      	mov	r0, r6
 80052f4:	47c0      	blx	r8
 80052f6:	3001      	adds	r0, #1
 80052f8:	d103      	bne.n	8005302 <_printf_common+0xba>
 80052fa:	f04f 30ff 	mov.w	r0, #4294967295
 80052fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005302:	3501      	adds	r5, #1
 8005304:	e7c3      	b.n	800528e <_printf_common+0x46>
 8005306:	18e1      	adds	r1, r4, r3
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	2030      	movs	r0, #48	; 0x30
 800530c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005310:	4422      	add	r2, r4
 8005312:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005316:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800531a:	3302      	adds	r3, #2
 800531c:	e7c5      	b.n	80052aa <_printf_common+0x62>
 800531e:	2301      	movs	r3, #1
 8005320:	4622      	mov	r2, r4
 8005322:	4639      	mov	r1, r7
 8005324:	4630      	mov	r0, r6
 8005326:	47c0      	blx	r8
 8005328:	3001      	adds	r0, #1
 800532a:	d0e6      	beq.n	80052fa <_printf_common+0xb2>
 800532c:	f109 0901 	add.w	r9, r9, #1
 8005330:	e7d8      	b.n	80052e4 <_printf_common+0x9c>
	...

08005334 <_printf_i>:
 8005334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005338:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800533c:	460c      	mov	r4, r1
 800533e:	7e09      	ldrb	r1, [r1, #24]
 8005340:	b085      	sub	sp, #20
 8005342:	296e      	cmp	r1, #110	; 0x6e
 8005344:	4617      	mov	r7, r2
 8005346:	4606      	mov	r6, r0
 8005348:	4698      	mov	r8, r3
 800534a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800534c:	f000 80b3 	beq.w	80054b6 <_printf_i+0x182>
 8005350:	d822      	bhi.n	8005398 <_printf_i+0x64>
 8005352:	2963      	cmp	r1, #99	; 0x63
 8005354:	d036      	beq.n	80053c4 <_printf_i+0x90>
 8005356:	d80a      	bhi.n	800536e <_printf_i+0x3a>
 8005358:	2900      	cmp	r1, #0
 800535a:	f000 80b9 	beq.w	80054d0 <_printf_i+0x19c>
 800535e:	2958      	cmp	r1, #88	; 0x58
 8005360:	f000 8083 	beq.w	800546a <_printf_i+0x136>
 8005364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005368:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800536c:	e032      	b.n	80053d4 <_printf_i+0xa0>
 800536e:	2964      	cmp	r1, #100	; 0x64
 8005370:	d001      	beq.n	8005376 <_printf_i+0x42>
 8005372:	2969      	cmp	r1, #105	; 0x69
 8005374:	d1f6      	bne.n	8005364 <_printf_i+0x30>
 8005376:	6820      	ldr	r0, [r4, #0]
 8005378:	6813      	ldr	r3, [r2, #0]
 800537a:	0605      	lsls	r5, r0, #24
 800537c:	f103 0104 	add.w	r1, r3, #4
 8005380:	d52a      	bpl.n	80053d8 <_printf_i+0xa4>
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6011      	str	r1, [r2, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	da03      	bge.n	8005392 <_printf_i+0x5e>
 800538a:	222d      	movs	r2, #45	; 0x2d
 800538c:	425b      	negs	r3, r3
 800538e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005392:	486f      	ldr	r0, [pc, #444]	; (8005550 <_printf_i+0x21c>)
 8005394:	220a      	movs	r2, #10
 8005396:	e039      	b.n	800540c <_printf_i+0xd8>
 8005398:	2973      	cmp	r1, #115	; 0x73
 800539a:	f000 809d 	beq.w	80054d8 <_printf_i+0x1a4>
 800539e:	d808      	bhi.n	80053b2 <_printf_i+0x7e>
 80053a0:	296f      	cmp	r1, #111	; 0x6f
 80053a2:	d020      	beq.n	80053e6 <_printf_i+0xb2>
 80053a4:	2970      	cmp	r1, #112	; 0x70
 80053a6:	d1dd      	bne.n	8005364 <_printf_i+0x30>
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	f043 0320 	orr.w	r3, r3, #32
 80053ae:	6023      	str	r3, [r4, #0]
 80053b0:	e003      	b.n	80053ba <_printf_i+0x86>
 80053b2:	2975      	cmp	r1, #117	; 0x75
 80053b4:	d017      	beq.n	80053e6 <_printf_i+0xb2>
 80053b6:	2978      	cmp	r1, #120	; 0x78
 80053b8:	d1d4      	bne.n	8005364 <_printf_i+0x30>
 80053ba:	2378      	movs	r3, #120	; 0x78
 80053bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053c0:	4864      	ldr	r0, [pc, #400]	; (8005554 <_printf_i+0x220>)
 80053c2:	e055      	b.n	8005470 <_printf_i+0x13c>
 80053c4:	6813      	ldr	r3, [r2, #0]
 80053c6:	1d19      	adds	r1, r3, #4
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6011      	str	r1, [r2, #0]
 80053cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d4:	2301      	movs	r3, #1
 80053d6:	e08c      	b.n	80054f2 <_printf_i+0x1be>
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6011      	str	r1, [r2, #0]
 80053dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053e0:	bf18      	it	ne
 80053e2:	b21b      	sxthne	r3, r3
 80053e4:	e7cf      	b.n	8005386 <_printf_i+0x52>
 80053e6:	6813      	ldr	r3, [r2, #0]
 80053e8:	6825      	ldr	r5, [r4, #0]
 80053ea:	1d18      	adds	r0, r3, #4
 80053ec:	6010      	str	r0, [r2, #0]
 80053ee:	0628      	lsls	r0, r5, #24
 80053f0:	d501      	bpl.n	80053f6 <_printf_i+0xc2>
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	e002      	b.n	80053fc <_printf_i+0xc8>
 80053f6:	0668      	lsls	r0, r5, #25
 80053f8:	d5fb      	bpl.n	80053f2 <_printf_i+0xbe>
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	4854      	ldr	r0, [pc, #336]	; (8005550 <_printf_i+0x21c>)
 80053fe:	296f      	cmp	r1, #111	; 0x6f
 8005400:	bf14      	ite	ne
 8005402:	220a      	movne	r2, #10
 8005404:	2208      	moveq	r2, #8
 8005406:	2100      	movs	r1, #0
 8005408:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800540c:	6865      	ldr	r5, [r4, #4]
 800540e:	60a5      	str	r5, [r4, #8]
 8005410:	2d00      	cmp	r5, #0
 8005412:	f2c0 8095 	blt.w	8005540 <_printf_i+0x20c>
 8005416:	6821      	ldr	r1, [r4, #0]
 8005418:	f021 0104 	bic.w	r1, r1, #4
 800541c:	6021      	str	r1, [r4, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d13d      	bne.n	800549e <_printf_i+0x16a>
 8005422:	2d00      	cmp	r5, #0
 8005424:	f040 808e 	bne.w	8005544 <_printf_i+0x210>
 8005428:	4665      	mov	r5, ip
 800542a:	2a08      	cmp	r2, #8
 800542c:	d10b      	bne.n	8005446 <_printf_i+0x112>
 800542e:	6823      	ldr	r3, [r4, #0]
 8005430:	07db      	lsls	r3, r3, #31
 8005432:	d508      	bpl.n	8005446 <_printf_i+0x112>
 8005434:	6923      	ldr	r3, [r4, #16]
 8005436:	6862      	ldr	r2, [r4, #4]
 8005438:	429a      	cmp	r2, r3
 800543a:	bfde      	ittt	le
 800543c:	2330      	movle	r3, #48	; 0x30
 800543e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005442:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005446:	ebac 0305 	sub.w	r3, ip, r5
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	f8cd 8000 	str.w	r8, [sp]
 8005450:	463b      	mov	r3, r7
 8005452:	aa03      	add	r2, sp, #12
 8005454:	4621      	mov	r1, r4
 8005456:	4630      	mov	r0, r6
 8005458:	f7ff fef6 	bl	8005248 <_printf_common>
 800545c:	3001      	adds	r0, #1
 800545e:	d14d      	bne.n	80054fc <_printf_i+0x1c8>
 8005460:	f04f 30ff 	mov.w	r0, #4294967295
 8005464:	b005      	add	sp, #20
 8005466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800546a:	4839      	ldr	r0, [pc, #228]	; (8005550 <_printf_i+0x21c>)
 800546c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005470:	6813      	ldr	r3, [r2, #0]
 8005472:	6821      	ldr	r1, [r4, #0]
 8005474:	1d1d      	adds	r5, r3, #4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6015      	str	r5, [r2, #0]
 800547a:	060a      	lsls	r2, r1, #24
 800547c:	d50b      	bpl.n	8005496 <_printf_i+0x162>
 800547e:	07ca      	lsls	r2, r1, #31
 8005480:	bf44      	itt	mi
 8005482:	f041 0120 	orrmi.w	r1, r1, #32
 8005486:	6021      	strmi	r1, [r4, #0]
 8005488:	b91b      	cbnz	r3, 8005492 <_printf_i+0x15e>
 800548a:	6822      	ldr	r2, [r4, #0]
 800548c:	f022 0220 	bic.w	r2, r2, #32
 8005490:	6022      	str	r2, [r4, #0]
 8005492:	2210      	movs	r2, #16
 8005494:	e7b7      	b.n	8005406 <_printf_i+0xd2>
 8005496:	064d      	lsls	r5, r1, #25
 8005498:	bf48      	it	mi
 800549a:	b29b      	uxthmi	r3, r3
 800549c:	e7ef      	b.n	800547e <_printf_i+0x14a>
 800549e:	4665      	mov	r5, ip
 80054a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80054a4:	fb02 3311 	mls	r3, r2, r1, r3
 80054a8:	5cc3      	ldrb	r3, [r0, r3]
 80054aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054ae:	460b      	mov	r3, r1
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d1f5      	bne.n	80054a0 <_printf_i+0x16c>
 80054b4:	e7b9      	b.n	800542a <_printf_i+0xf6>
 80054b6:	6813      	ldr	r3, [r2, #0]
 80054b8:	6825      	ldr	r5, [r4, #0]
 80054ba:	6961      	ldr	r1, [r4, #20]
 80054bc:	1d18      	adds	r0, r3, #4
 80054be:	6010      	str	r0, [r2, #0]
 80054c0:	0628      	lsls	r0, r5, #24
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	d501      	bpl.n	80054ca <_printf_i+0x196>
 80054c6:	6019      	str	r1, [r3, #0]
 80054c8:	e002      	b.n	80054d0 <_printf_i+0x19c>
 80054ca:	066a      	lsls	r2, r5, #25
 80054cc:	d5fb      	bpl.n	80054c6 <_printf_i+0x192>
 80054ce:	8019      	strh	r1, [r3, #0]
 80054d0:	2300      	movs	r3, #0
 80054d2:	6123      	str	r3, [r4, #16]
 80054d4:	4665      	mov	r5, ip
 80054d6:	e7b9      	b.n	800544c <_printf_i+0x118>
 80054d8:	6813      	ldr	r3, [r2, #0]
 80054da:	1d19      	adds	r1, r3, #4
 80054dc:	6011      	str	r1, [r2, #0]
 80054de:	681d      	ldr	r5, [r3, #0]
 80054e0:	6862      	ldr	r2, [r4, #4]
 80054e2:	2100      	movs	r1, #0
 80054e4:	4628      	mov	r0, r5
 80054e6:	f7fa fe7b 	bl	80001e0 <memchr>
 80054ea:	b108      	cbz	r0, 80054f0 <_printf_i+0x1bc>
 80054ec:	1b40      	subs	r0, r0, r5
 80054ee:	6060      	str	r0, [r4, #4]
 80054f0:	6863      	ldr	r3, [r4, #4]
 80054f2:	6123      	str	r3, [r4, #16]
 80054f4:	2300      	movs	r3, #0
 80054f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054fa:	e7a7      	b.n	800544c <_printf_i+0x118>
 80054fc:	6923      	ldr	r3, [r4, #16]
 80054fe:	462a      	mov	r2, r5
 8005500:	4639      	mov	r1, r7
 8005502:	4630      	mov	r0, r6
 8005504:	47c0      	blx	r8
 8005506:	3001      	adds	r0, #1
 8005508:	d0aa      	beq.n	8005460 <_printf_i+0x12c>
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	079b      	lsls	r3, r3, #30
 800550e:	d413      	bmi.n	8005538 <_printf_i+0x204>
 8005510:	68e0      	ldr	r0, [r4, #12]
 8005512:	9b03      	ldr	r3, [sp, #12]
 8005514:	4298      	cmp	r0, r3
 8005516:	bfb8      	it	lt
 8005518:	4618      	movlt	r0, r3
 800551a:	e7a3      	b.n	8005464 <_printf_i+0x130>
 800551c:	2301      	movs	r3, #1
 800551e:	464a      	mov	r2, r9
 8005520:	4639      	mov	r1, r7
 8005522:	4630      	mov	r0, r6
 8005524:	47c0      	blx	r8
 8005526:	3001      	adds	r0, #1
 8005528:	d09a      	beq.n	8005460 <_printf_i+0x12c>
 800552a:	3501      	adds	r5, #1
 800552c:	68e3      	ldr	r3, [r4, #12]
 800552e:	9a03      	ldr	r2, [sp, #12]
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	42ab      	cmp	r3, r5
 8005534:	dcf2      	bgt.n	800551c <_printf_i+0x1e8>
 8005536:	e7eb      	b.n	8005510 <_printf_i+0x1dc>
 8005538:	2500      	movs	r5, #0
 800553a:	f104 0919 	add.w	r9, r4, #25
 800553e:	e7f5      	b.n	800552c <_printf_i+0x1f8>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1ac      	bne.n	800549e <_printf_i+0x16a>
 8005544:	7803      	ldrb	r3, [r0, #0]
 8005546:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800554a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800554e:	e76c      	b.n	800542a <_printf_i+0xf6>
 8005550:	08006d8a 	.word	0x08006d8a
 8005554:	08006d9b 	.word	0x08006d9b

08005558 <siprintf>:
 8005558:	b40e      	push	{r1, r2, r3}
 800555a:	b500      	push	{lr}
 800555c:	b09c      	sub	sp, #112	; 0x70
 800555e:	ab1d      	add	r3, sp, #116	; 0x74
 8005560:	9002      	str	r0, [sp, #8]
 8005562:	9006      	str	r0, [sp, #24]
 8005564:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005568:	4809      	ldr	r0, [pc, #36]	; (8005590 <siprintf+0x38>)
 800556a:	9107      	str	r1, [sp, #28]
 800556c:	9104      	str	r1, [sp, #16]
 800556e:	4909      	ldr	r1, [pc, #36]	; (8005594 <siprintf+0x3c>)
 8005570:	f853 2b04 	ldr.w	r2, [r3], #4
 8005574:	9105      	str	r1, [sp, #20]
 8005576:	6800      	ldr	r0, [r0, #0]
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	a902      	add	r1, sp, #8
 800557c:	f001 fa5c 	bl	8006a38 <_svfiprintf_r>
 8005580:	9b02      	ldr	r3, [sp, #8]
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	b01c      	add	sp, #112	; 0x70
 8005588:	f85d eb04 	ldr.w	lr, [sp], #4
 800558c:	b003      	add	sp, #12
 800558e:	4770      	bx	lr
 8005590:	2000000c 	.word	0x2000000c
 8005594:	ffff0208 	.word	0xffff0208

08005598 <quorem>:
 8005598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	6903      	ldr	r3, [r0, #16]
 800559e:	690c      	ldr	r4, [r1, #16]
 80055a0:	42a3      	cmp	r3, r4
 80055a2:	4680      	mov	r8, r0
 80055a4:	f2c0 8082 	blt.w	80056ac <quorem+0x114>
 80055a8:	3c01      	subs	r4, #1
 80055aa:	f101 0714 	add.w	r7, r1, #20
 80055ae:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80055b2:	f100 0614 	add.w	r6, r0, #20
 80055b6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80055ba:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80055be:	eb06 030c 	add.w	r3, r6, ip
 80055c2:	3501      	adds	r5, #1
 80055c4:	eb07 090c 	add.w	r9, r7, ip
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	fbb0 f5f5 	udiv	r5, r0, r5
 80055ce:	b395      	cbz	r5, 8005636 <quorem+0x9e>
 80055d0:	f04f 0a00 	mov.w	sl, #0
 80055d4:	4638      	mov	r0, r7
 80055d6:	46b6      	mov	lr, r6
 80055d8:	46d3      	mov	fp, sl
 80055da:	f850 2b04 	ldr.w	r2, [r0], #4
 80055de:	b293      	uxth	r3, r2
 80055e0:	fb05 a303 	mla	r3, r5, r3, sl
 80055e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	ebab 0303 	sub.w	r3, fp, r3
 80055ee:	0c12      	lsrs	r2, r2, #16
 80055f0:	f8de b000 	ldr.w	fp, [lr]
 80055f4:	fb05 a202 	mla	r2, r5, r2, sl
 80055f8:	fa13 f38b 	uxtah	r3, r3, fp
 80055fc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005600:	fa1f fb82 	uxth.w	fp, r2
 8005604:	f8de 2000 	ldr.w	r2, [lr]
 8005608:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800560c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005610:	b29b      	uxth	r3, r3
 8005612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005616:	4581      	cmp	r9, r0
 8005618:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800561c:	f84e 3b04 	str.w	r3, [lr], #4
 8005620:	d2db      	bcs.n	80055da <quorem+0x42>
 8005622:	f856 300c 	ldr.w	r3, [r6, ip]
 8005626:	b933      	cbnz	r3, 8005636 <quorem+0x9e>
 8005628:	9b01      	ldr	r3, [sp, #4]
 800562a:	3b04      	subs	r3, #4
 800562c:	429e      	cmp	r6, r3
 800562e:	461a      	mov	r2, r3
 8005630:	d330      	bcc.n	8005694 <quorem+0xfc>
 8005632:	f8c8 4010 	str.w	r4, [r8, #16]
 8005636:	4640      	mov	r0, r8
 8005638:	f001 f828 	bl	800668c <__mcmp>
 800563c:	2800      	cmp	r0, #0
 800563e:	db25      	blt.n	800568c <quorem+0xf4>
 8005640:	3501      	adds	r5, #1
 8005642:	4630      	mov	r0, r6
 8005644:	f04f 0c00 	mov.w	ip, #0
 8005648:	f857 2b04 	ldr.w	r2, [r7], #4
 800564c:	f8d0 e000 	ldr.w	lr, [r0]
 8005650:	b293      	uxth	r3, r2
 8005652:	ebac 0303 	sub.w	r3, ip, r3
 8005656:	0c12      	lsrs	r2, r2, #16
 8005658:	fa13 f38e 	uxtah	r3, r3, lr
 800565c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005660:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005664:	b29b      	uxth	r3, r3
 8005666:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800566a:	45b9      	cmp	r9, r7
 800566c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005670:	f840 3b04 	str.w	r3, [r0], #4
 8005674:	d2e8      	bcs.n	8005648 <quorem+0xb0>
 8005676:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800567a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800567e:	b92a      	cbnz	r2, 800568c <quorem+0xf4>
 8005680:	3b04      	subs	r3, #4
 8005682:	429e      	cmp	r6, r3
 8005684:	461a      	mov	r2, r3
 8005686:	d30b      	bcc.n	80056a0 <quorem+0x108>
 8005688:	f8c8 4010 	str.w	r4, [r8, #16]
 800568c:	4628      	mov	r0, r5
 800568e:	b003      	add	sp, #12
 8005690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	3b04      	subs	r3, #4
 8005698:	2a00      	cmp	r2, #0
 800569a:	d1ca      	bne.n	8005632 <quorem+0x9a>
 800569c:	3c01      	subs	r4, #1
 800569e:	e7c5      	b.n	800562c <quorem+0x94>
 80056a0:	6812      	ldr	r2, [r2, #0]
 80056a2:	3b04      	subs	r3, #4
 80056a4:	2a00      	cmp	r2, #0
 80056a6:	d1ef      	bne.n	8005688 <quorem+0xf0>
 80056a8:	3c01      	subs	r4, #1
 80056aa:	e7ea      	b.n	8005682 <quorem+0xea>
 80056ac:	2000      	movs	r0, #0
 80056ae:	e7ee      	b.n	800568e <quorem+0xf6>

080056b0 <_dtoa_r>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	ec57 6b10 	vmov	r6, r7, d0
 80056b8:	b097      	sub	sp, #92	; 0x5c
 80056ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056bc:	9106      	str	r1, [sp, #24]
 80056be:	4604      	mov	r4, r0
 80056c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80056c2:	9312      	str	r3, [sp, #72]	; 0x48
 80056c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056c8:	e9cd 6700 	strd	r6, r7, [sp]
 80056cc:	b93d      	cbnz	r5, 80056de <_dtoa_r+0x2e>
 80056ce:	2010      	movs	r0, #16
 80056d0:	f000 fdb4 	bl	800623c <malloc>
 80056d4:	6260      	str	r0, [r4, #36]	; 0x24
 80056d6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056da:	6005      	str	r5, [r0, #0]
 80056dc:	60c5      	str	r5, [r0, #12]
 80056de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e0:	6819      	ldr	r1, [r3, #0]
 80056e2:	b151      	cbz	r1, 80056fa <_dtoa_r+0x4a>
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	604a      	str	r2, [r1, #4]
 80056e8:	2301      	movs	r3, #1
 80056ea:	4093      	lsls	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 fdeb 	bl	80062ca <_Bfree>
 80056f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	1e3b      	subs	r3, r7, #0
 80056fc:	bfbb      	ittet	lt
 80056fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005702:	9301      	strlt	r3, [sp, #4]
 8005704:	2300      	movge	r3, #0
 8005706:	2201      	movlt	r2, #1
 8005708:	bfac      	ite	ge
 800570a:	f8c8 3000 	strge.w	r3, [r8]
 800570e:	f8c8 2000 	strlt.w	r2, [r8]
 8005712:	4baf      	ldr	r3, [pc, #700]	; (80059d0 <_dtoa_r+0x320>)
 8005714:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005718:	ea33 0308 	bics.w	r3, r3, r8
 800571c:	d114      	bne.n	8005748 <_dtoa_r+0x98>
 800571e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005720:	f242 730f 	movw	r3, #9999	; 0x270f
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	9b00      	ldr	r3, [sp, #0]
 8005728:	b923      	cbnz	r3, 8005734 <_dtoa_r+0x84>
 800572a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800572e:	2800      	cmp	r0, #0
 8005730:	f000 8542 	beq.w	80061b8 <_dtoa_r+0xb08>
 8005734:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005736:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80059e4 <_dtoa_r+0x334>
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 8544 	beq.w	80061c8 <_dtoa_r+0xb18>
 8005740:	f10b 0303 	add.w	r3, fp, #3
 8005744:	f000 bd3e 	b.w	80061c4 <_dtoa_r+0xb14>
 8005748:	e9dd 6700 	ldrd	r6, r7, [sp]
 800574c:	2200      	movs	r2, #0
 800574e:	2300      	movs	r3, #0
 8005750:	4630      	mov	r0, r6
 8005752:	4639      	mov	r1, r7
 8005754:	f7fb f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005758:	4681      	mov	r9, r0
 800575a:	b168      	cbz	r0, 8005778 <_dtoa_r+0xc8>
 800575c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800575e:	2301      	movs	r3, #1
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8524 	beq.w	80061b2 <_dtoa_r+0xb02>
 800576a:	4b9a      	ldr	r3, [pc, #616]	; (80059d4 <_dtoa_r+0x324>)
 800576c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800576e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	f000 bd28 	b.w	80061c8 <_dtoa_r+0xb18>
 8005778:	aa14      	add	r2, sp, #80	; 0x50
 800577a:	a915      	add	r1, sp, #84	; 0x54
 800577c:	ec47 6b10 	vmov	d0, r6, r7
 8005780:	4620      	mov	r0, r4
 8005782:	f000 fffa 	bl	800677a <__d2b>
 8005786:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800578a:	9004      	str	r0, [sp, #16]
 800578c:	2d00      	cmp	r5, #0
 800578e:	d07c      	beq.n	800588a <_dtoa_r+0x1da>
 8005790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005794:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005798:	46b2      	mov	sl, r6
 800579a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800579e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80057a6:	2200      	movs	r2, #0
 80057a8:	4b8b      	ldr	r3, [pc, #556]	; (80059d8 <_dtoa_r+0x328>)
 80057aa:	4650      	mov	r0, sl
 80057ac:	4659      	mov	r1, fp
 80057ae:	f7fa fd6b 	bl	8000288 <__aeabi_dsub>
 80057b2:	a381      	add	r3, pc, #516	; (adr r3, 80059b8 <_dtoa_r+0x308>)
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa ff1e 	bl	80005f8 <__aeabi_dmul>
 80057bc:	a380      	add	r3, pc, #512	; (adr r3, 80059c0 <_dtoa_r+0x310>)
 80057be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c2:	f7fa fd63 	bl	800028c <__adddf3>
 80057c6:	4606      	mov	r6, r0
 80057c8:	4628      	mov	r0, r5
 80057ca:	460f      	mov	r7, r1
 80057cc:	f7fa feaa 	bl	8000524 <__aeabi_i2d>
 80057d0:	a37d      	add	r3, pc, #500	; (adr r3, 80059c8 <_dtoa_r+0x318>)
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	f7fa ff0f 	bl	80005f8 <__aeabi_dmul>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4630      	mov	r0, r6
 80057e0:	4639      	mov	r1, r7
 80057e2:	f7fa fd53 	bl	800028c <__adddf3>
 80057e6:	4606      	mov	r6, r0
 80057e8:	460f      	mov	r7, r1
 80057ea:	f7fb f9b5 	bl	8000b58 <__aeabi_d2iz>
 80057ee:	2200      	movs	r2, #0
 80057f0:	4682      	mov	sl, r0
 80057f2:	2300      	movs	r3, #0
 80057f4:	4630      	mov	r0, r6
 80057f6:	4639      	mov	r1, r7
 80057f8:	f7fb f970 	bl	8000adc <__aeabi_dcmplt>
 80057fc:	b148      	cbz	r0, 8005812 <_dtoa_r+0x162>
 80057fe:	4650      	mov	r0, sl
 8005800:	f7fa fe90 	bl	8000524 <__aeabi_i2d>
 8005804:	4632      	mov	r2, r6
 8005806:	463b      	mov	r3, r7
 8005808:	f7fb f95e 	bl	8000ac8 <__aeabi_dcmpeq>
 800580c:	b908      	cbnz	r0, 8005812 <_dtoa_r+0x162>
 800580e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005812:	f1ba 0f16 	cmp.w	sl, #22
 8005816:	d859      	bhi.n	80058cc <_dtoa_r+0x21c>
 8005818:	4970      	ldr	r1, [pc, #448]	; (80059dc <_dtoa_r+0x32c>)
 800581a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800581e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005826:	f7fb f977 	bl	8000b18 <__aeabi_dcmpgt>
 800582a:	2800      	cmp	r0, #0
 800582c:	d050      	beq.n	80058d0 <_dtoa_r+0x220>
 800582e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005832:	2300      	movs	r3, #0
 8005834:	930f      	str	r3, [sp, #60]	; 0x3c
 8005836:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005838:	1b5d      	subs	r5, r3, r5
 800583a:	f1b5 0801 	subs.w	r8, r5, #1
 800583e:	bf49      	itett	mi
 8005840:	f1c5 0301 	rsbmi	r3, r5, #1
 8005844:	2300      	movpl	r3, #0
 8005846:	9305      	strmi	r3, [sp, #20]
 8005848:	f04f 0800 	movmi.w	r8, #0
 800584c:	bf58      	it	pl
 800584e:	9305      	strpl	r3, [sp, #20]
 8005850:	f1ba 0f00 	cmp.w	sl, #0
 8005854:	db3e      	blt.n	80058d4 <_dtoa_r+0x224>
 8005856:	2300      	movs	r3, #0
 8005858:	44d0      	add	r8, sl
 800585a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800585e:	9307      	str	r3, [sp, #28]
 8005860:	9b06      	ldr	r3, [sp, #24]
 8005862:	2b09      	cmp	r3, #9
 8005864:	f200 8090 	bhi.w	8005988 <_dtoa_r+0x2d8>
 8005868:	2b05      	cmp	r3, #5
 800586a:	bfc4      	itt	gt
 800586c:	3b04      	subgt	r3, #4
 800586e:	9306      	strgt	r3, [sp, #24]
 8005870:	9b06      	ldr	r3, [sp, #24]
 8005872:	f1a3 0302 	sub.w	r3, r3, #2
 8005876:	bfcc      	ite	gt
 8005878:	2500      	movgt	r5, #0
 800587a:	2501      	movle	r5, #1
 800587c:	2b03      	cmp	r3, #3
 800587e:	f200 808f 	bhi.w	80059a0 <_dtoa_r+0x2f0>
 8005882:	e8df f003 	tbb	[pc, r3]
 8005886:	7f7d      	.short	0x7f7d
 8005888:	7131      	.short	0x7131
 800588a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800588e:	441d      	add	r5, r3
 8005890:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005894:	2820      	cmp	r0, #32
 8005896:	dd13      	ble.n	80058c0 <_dtoa_r+0x210>
 8005898:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800589c:	9b00      	ldr	r3, [sp, #0]
 800589e:	fa08 f800 	lsl.w	r8, r8, r0
 80058a2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80058a6:	fa23 f000 	lsr.w	r0, r3, r0
 80058aa:	ea48 0000 	orr.w	r0, r8, r0
 80058ae:	f7fa fe29 	bl	8000504 <__aeabi_ui2d>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4682      	mov	sl, r0
 80058b6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80058ba:	3d01      	subs	r5, #1
 80058bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80058be:	e772      	b.n	80057a6 <_dtoa_r+0xf6>
 80058c0:	9b00      	ldr	r3, [sp, #0]
 80058c2:	f1c0 0020 	rsb	r0, r0, #32
 80058c6:	fa03 f000 	lsl.w	r0, r3, r0
 80058ca:	e7f0      	b.n	80058ae <_dtoa_r+0x1fe>
 80058cc:	2301      	movs	r3, #1
 80058ce:	e7b1      	b.n	8005834 <_dtoa_r+0x184>
 80058d0:	900f      	str	r0, [sp, #60]	; 0x3c
 80058d2:	e7b0      	b.n	8005836 <_dtoa_r+0x186>
 80058d4:	9b05      	ldr	r3, [sp, #20]
 80058d6:	eba3 030a 	sub.w	r3, r3, sl
 80058da:	9305      	str	r3, [sp, #20]
 80058dc:	f1ca 0300 	rsb	r3, sl, #0
 80058e0:	9307      	str	r3, [sp, #28]
 80058e2:	2300      	movs	r3, #0
 80058e4:	930e      	str	r3, [sp, #56]	; 0x38
 80058e6:	e7bb      	b.n	8005860 <_dtoa_r+0x1b0>
 80058e8:	2301      	movs	r3, #1
 80058ea:	930a      	str	r3, [sp, #40]	; 0x28
 80058ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dd59      	ble.n	80059a6 <_dtoa_r+0x2f6>
 80058f2:	9302      	str	r3, [sp, #8]
 80058f4:	4699      	mov	r9, r3
 80058f6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058f8:	2200      	movs	r2, #0
 80058fa:	6072      	str	r2, [r6, #4]
 80058fc:	2204      	movs	r2, #4
 80058fe:	f102 0014 	add.w	r0, r2, #20
 8005902:	4298      	cmp	r0, r3
 8005904:	6871      	ldr	r1, [r6, #4]
 8005906:	d953      	bls.n	80059b0 <_dtoa_r+0x300>
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fcaa 	bl	8006262 <_Balloc>
 800590e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005910:	6030      	str	r0, [r6, #0]
 8005912:	f1b9 0f0e 	cmp.w	r9, #14
 8005916:	f8d3 b000 	ldr.w	fp, [r3]
 800591a:	f200 80e6 	bhi.w	8005aea <_dtoa_r+0x43a>
 800591e:	2d00      	cmp	r5, #0
 8005920:	f000 80e3 	beq.w	8005aea <_dtoa_r+0x43a>
 8005924:	ed9d 7b00 	vldr	d7, [sp]
 8005928:	f1ba 0f00 	cmp.w	sl, #0
 800592c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005930:	dd74      	ble.n	8005a1c <_dtoa_r+0x36c>
 8005932:	4a2a      	ldr	r2, [pc, #168]	; (80059dc <_dtoa_r+0x32c>)
 8005934:	f00a 030f 	and.w	r3, sl, #15
 8005938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800593c:	ed93 7b00 	vldr	d7, [r3]
 8005940:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005944:	06f0      	lsls	r0, r6, #27
 8005946:	ed8d 7b08 	vstr	d7, [sp, #32]
 800594a:	d565      	bpl.n	8005a18 <_dtoa_r+0x368>
 800594c:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <_dtoa_r+0x330>)
 800594e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005952:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005956:	f7fa ff79 	bl	800084c <__aeabi_ddiv>
 800595a:	e9cd 0100 	strd	r0, r1, [sp]
 800595e:	f006 060f 	and.w	r6, r6, #15
 8005962:	2503      	movs	r5, #3
 8005964:	4f1e      	ldr	r7, [pc, #120]	; (80059e0 <_dtoa_r+0x330>)
 8005966:	e04c      	b.n	8005a02 <_dtoa_r+0x352>
 8005968:	2301      	movs	r3, #1
 800596a:	930a      	str	r3, [sp, #40]	; 0x28
 800596c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800596e:	4453      	add	r3, sl
 8005970:	f103 0901 	add.w	r9, r3, #1
 8005974:	9302      	str	r3, [sp, #8]
 8005976:	464b      	mov	r3, r9
 8005978:	2b01      	cmp	r3, #1
 800597a:	bfb8      	it	lt
 800597c:	2301      	movlt	r3, #1
 800597e:	e7ba      	b.n	80058f6 <_dtoa_r+0x246>
 8005980:	2300      	movs	r3, #0
 8005982:	e7b2      	b.n	80058ea <_dtoa_r+0x23a>
 8005984:	2300      	movs	r3, #0
 8005986:	e7f0      	b.n	800596a <_dtoa_r+0x2ba>
 8005988:	2501      	movs	r5, #1
 800598a:	2300      	movs	r3, #0
 800598c:	9306      	str	r3, [sp, #24]
 800598e:	950a      	str	r5, [sp, #40]	; 0x28
 8005990:	f04f 33ff 	mov.w	r3, #4294967295
 8005994:	9302      	str	r3, [sp, #8]
 8005996:	4699      	mov	r9, r3
 8005998:	2200      	movs	r2, #0
 800599a:	2312      	movs	r3, #18
 800599c:	920b      	str	r2, [sp, #44]	; 0x2c
 800599e:	e7aa      	b.n	80058f6 <_dtoa_r+0x246>
 80059a0:	2301      	movs	r3, #1
 80059a2:	930a      	str	r3, [sp, #40]	; 0x28
 80059a4:	e7f4      	b.n	8005990 <_dtoa_r+0x2e0>
 80059a6:	2301      	movs	r3, #1
 80059a8:	9302      	str	r3, [sp, #8]
 80059aa:	4699      	mov	r9, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	e7f5      	b.n	800599c <_dtoa_r+0x2ec>
 80059b0:	3101      	adds	r1, #1
 80059b2:	6071      	str	r1, [r6, #4]
 80059b4:	0052      	lsls	r2, r2, #1
 80059b6:	e7a2      	b.n	80058fe <_dtoa_r+0x24e>
 80059b8:	636f4361 	.word	0x636f4361
 80059bc:	3fd287a7 	.word	0x3fd287a7
 80059c0:	8b60c8b3 	.word	0x8b60c8b3
 80059c4:	3fc68a28 	.word	0x3fc68a28
 80059c8:	509f79fb 	.word	0x509f79fb
 80059cc:	3fd34413 	.word	0x3fd34413
 80059d0:	7ff00000 	.word	0x7ff00000
 80059d4:	08006d89 	.word	0x08006d89
 80059d8:	3ff80000 	.word	0x3ff80000
 80059dc:	08006de8 	.word	0x08006de8
 80059e0:	08006dc0 	.word	0x08006dc0
 80059e4:	08006db5 	.word	0x08006db5
 80059e8:	07f1      	lsls	r1, r6, #31
 80059ea:	d508      	bpl.n	80059fe <_dtoa_r+0x34e>
 80059ec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80059f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059f4:	f7fa fe00 	bl	80005f8 <__aeabi_dmul>
 80059f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80059fc:	3501      	adds	r5, #1
 80059fe:	1076      	asrs	r6, r6, #1
 8005a00:	3708      	adds	r7, #8
 8005a02:	2e00      	cmp	r6, #0
 8005a04:	d1f0      	bne.n	80059e8 <_dtoa_r+0x338>
 8005a06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a0e:	f7fa ff1d 	bl	800084c <__aeabi_ddiv>
 8005a12:	e9cd 0100 	strd	r0, r1, [sp]
 8005a16:	e01a      	b.n	8005a4e <_dtoa_r+0x39e>
 8005a18:	2502      	movs	r5, #2
 8005a1a:	e7a3      	b.n	8005964 <_dtoa_r+0x2b4>
 8005a1c:	f000 80a0 	beq.w	8005b60 <_dtoa_r+0x4b0>
 8005a20:	f1ca 0600 	rsb	r6, sl, #0
 8005a24:	4b9f      	ldr	r3, [pc, #636]	; (8005ca4 <_dtoa_r+0x5f4>)
 8005a26:	4fa0      	ldr	r7, [pc, #640]	; (8005ca8 <_dtoa_r+0x5f8>)
 8005a28:	f006 020f 	and.w	r2, r6, #15
 8005a2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a38:	f7fa fdde 	bl	80005f8 <__aeabi_dmul>
 8005a3c:	e9cd 0100 	strd	r0, r1, [sp]
 8005a40:	1136      	asrs	r6, r6, #4
 8005a42:	2300      	movs	r3, #0
 8005a44:	2502      	movs	r5, #2
 8005a46:	2e00      	cmp	r6, #0
 8005a48:	d17f      	bne.n	8005b4a <_dtoa_r+0x49a>
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e1      	bne.n	8005a12 <_dtoa_r+0x362>
 8005a4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8087 	beq.w	8005b64 <_dtoa_r+0x4b4>
 8005a56:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4b93      	ldr	r3, [pc, #588]	; (8005cac <_dtoa_r+0x5fc>)
 8005a5e:	4630      	mov	r0, r6
 8005a60:	4639      	mov	r1, r7
 8005a62:	f7fb f83b 	bl	8000adc <__aeabi_dcmplt>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d07c      	beq.n	8005b64 <_dtoa_r+0x4b4>
 8005a6a:	f1b9 0f00 	cmp.w	r9, #0
 8005a6e:	d079      	beq.n	8005b64 <_dtoa_r+0x4b4>
 8005a70:	9b02      	ldr	r3, [sp, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	dd35      	ble.n	8005ae2 <_dtoa_r+0x432>
 8005a76:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005a7a:	9308      	str	r3, [sp, #32]
 8005a7c:	4639      	mov	r1, r7
 8005a7e:	2200      	movs	r2, #0
 8005a80:	4b8b      	ldr	r3, [pc, #556]	; (8005cb0 <_dtoa_r+0x600>)
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7fa fdb8 	bl	80005f8 <__aeabi_dmul>
 8005a88:	e9cd 0100 	strd	r0, r1, [sp]
 8005a8c:	9f02      	ldr	r7, [sp, #8]
 8005a8e:	3501      	adds	r5, #1
 8005a90:	4628      	mov	r0, r5
 8005a92:	f7fa fd47 	bl	8000524 <__aeabi_i2d>
 8005a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a9a:	f7fa fdad 	bl	80005f8 <__aeabi_dmul>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	4b84      	ldr	r3, [pc, #528]	; (8005cb4 <_dtoa_r+0x604>)
 8005aa2:	f7fa fbf3 	bl	800028c <__adddf3>
 8005aa6:	4605      	mov	r5, r0
 8005aa8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005aac:	2f00      	cmp	r7, #0
 8005aae:	d15d      	bne.n	8005b6c <_dtoa_r+0x4bc>
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	4b81      	ldr	r3, [pc, #516]	; (8005cb8 <_dtoa_r+0x608>)
 8005ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ab8:	f7fa fbe6 	bl	8000288 <__aeabi_dsub>
 8005abc:	462a      	mov	r2, r5
 8005abe:	4633      	mov	r3, r6
 8005ac0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ac4:	f7fb f828 	bl	8000b18 <__aeabi_dcmpgt>
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	f040 8288 	bne.w	8005fde <_dtoa_r+0x92e>
 8005ace:	462a      	mov	r2, r5
 8005ad0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ad8:	f7fb f800 	bl	8000adc <__aeabi_dcmplt>
 8005adc:	2800      	cmp	r0, #0
 8005ade:	f040 827c 	bne.w	8005fda <_dtoa_r+0x92a>
 8005ae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005ae6:	e9cd 2300 	strd	r2, r3, [sp]
 8005aea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f2c0 8150 	blt.w	8005d92 <_dtoa_r+0x6e2>
 8005af2:	f1ba 0f0e 	cmp.w	sl, #14
 8005af6:	f300 814c 	bgt.w	8005d92 <_dtoa_r+0x6e2>
 8005afa:	4b6a      	ldr	r3, [pc, #424]	; (8005ca4 <_dtoa_r+0x5f4>)
 8005afc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005b00:	ed93 7b00 	vldr	d7, [r3]
 8005b04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005b0c:	f280 80d8 	bge.w	8005cc0 <_dtoa_r+0x610>
 8005b10:	f1b9 0f00 	cmp.w	r9, #0
 8005b14:	f300 80d4 	bgt.w	8005cc0 <_dtoa_r+0x610>
 8005b18:	f040 825e 	bne.w	8005fd8 <_dtoa_r+0x928>
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	4b66      	ldr	r3, [pc, #408]	; (8005cb8 <_dtoa_r+0x608>)
 8005b20:	ec51 0b17 	vmov	r0, r1, d7
 8005b24:	f7fa fd68 	bl	80005f8 <__aeabi_dmul>
 8005b28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b2c:	f7fa ffea 	bl	8000b04 <__aeabi_dcmpge>
 8005b30:	464f      	mov	r7, r9
 8005b32:	464e      	mov	r6, r9
 8005b34:	2800      	cmp	r0, #0
 8005b36:	f040 8234 	bne.w	8005fa2 <_dtoa_r+0x8f2>
 8005b3a:	2331      	movs	r3, #49	; 0x31
 8005b3c:	f10b 0501 	add.w	r5, fp, #1
 8005b40:	f88b 3000 	strb.w	r3, [fp]
 8005b44:	f10a 0a01 	add.w	sl, sl, #1
 8005b48:	e22f      	b.n	8005faa <_dtoa_r+0x8fa>
 8005b4a:	07f2      	lsls	r2, r6, #31
 8005b4c:	d505      	bpl.n	8005b5a <_dtoa_r+0x4aa>
 8005b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b52:	f7fa fd51 	bl	80005f8 <__aeabi_dmul>
 8005b56:	3501      	adds	r5, #1
 8005b58:	2301      	movs	r3, #1
 8005b5a:	1076      	asrs	r6, r6, #1
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	e772      	b.n	8005a46 <_dtoa_r+0x396>
 8005b60:	2502      	movs	r5, #2
 8005b62:	e774      	b.n	8005a4e <_dtoa_r+0x39e>
 8005b64:	f8cd a020 	str.w	sl, [sp, #32]
 8005b68:	464f      	mov	r7, r9
 8005b6a:	e791      	b.n	8005a90 <_dtoa_r+0x3e0>
 8005b6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ca4 <_dtoa_r+0x5f4>)
 8005b6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b72:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d047      	beq.n	8005c0c <_dtoa_r+0x55c>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	2000      	movs	r0, #0
 8005b82:	494e      	ldr	r1, [pc, #312]	; (8005cbc <_dtoa_r+0x60c>)
 8005b84:	f7fa fe62 	bl	800084c <__aeabi_ddiv>
 8005b88:	462a      	mov	r2, r5
 8005b8a:	4633      	mov	r3, r6
 8005b8c:	f7fa fb7c 	bl	8000288 <__aeabi_dsub>
 8005b90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005b94:	465d      	mov	r5, fp
 8005b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b9a:	f7fa ffdd 	bl	8000b58 <__aeabi_d2iz>
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	f7fa fcc0 	bl	8000524 <__aeabi_i2d>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bac:	f7fa fb6c 	bl	8000288 <__aeabi_dsub>
 8005bb0:	3630      	adds	r6, #48	; 0x30
 8005bb2:	f805 6b01 	strb.w	r6, [r5], #1
 8005bb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005bba:	e9cd 0100 	strd	r0, r1, [sp]
 8005bbe:	f7fa ff8d 	bl	8000adc <__aeabi_dcmplt>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d163      	bne.n	8005c8e <_dtoa_r+0x5de>
 8005bc6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bca:	2000      	movs	r0, #0
 8005bcc:	4937      	ldr	r1, [pc, #220]	; (8005cac <_dtoa_r+0x5fc>)
 8005bce:	f7fa fb5b 	bl	8000288 <__aeabi_dsub>
 8005bd2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005bd6:	f7fa ff81 	bl	8000adc <__aeabi_dcmplt>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	f040 80b7 	bne.w	8005d4e <_dtoa_r+0x69e>
 8005be0:	eba5 030b 	sub.w	r3, r5, fp
 8005be4:	429f      	cmp	r7, r3
 8005be6:	f77f af7c 	ble.w	8005ae2 <_dtoa_r+0x432>
 8005bea:	2200      	movs	r2, #0
 8005bec:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <_dtoa_r+0x600>)
 8005bee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005bf2:	f7fa fd01 	bl	80005f8 <__aeabi_dmul>
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005bfc:	4b2c      	ldr	r3, [pc, #176]	; (8005cb0 <_dtoa_r+0x600>)
 8005bfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c02:	f7fa fcf9 	bl	80005f8 <__aeabi_dmul>
 8005c06:	e9cd 0100 	strd	r0, r1, [sp]
 8005c0a:	e7c4      	b.n	8005b96 <_dtoa_r+0x4e6>
 8005c0c:	462a      	mov	r2, r5
 8005c0e:	4633      	mov	r3, r6
 8005c10:	f7fa fcf2 	bl	80005f8 <__aeabi_dmul>
 8005c14:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c18:	eb0b 0507 	add.w	r5, fp, r7
 8005c1c:	465e      	mov	r6, fp
 8005c1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c22:	f7fa ff99 	bl	8000b58 <__aeabi_d2iz>
 8005c26:	4607      	mov	r7, r0
 8005c28:	f7fa fc7c 	bl	8000524 <__aeabi_i2d>
 8005c2c:	3730      	adds	r7, #48	; 0x30
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c36:	f7fa fb27 	bl	8000288 <__aeabi_dsub>
 8005c3a:	f806 7b01 	strb.w	r7, [r6], #1
 8005c3e:	42ae      	cmp	r6, r5
 8005c40:	e9cd 0100 	strd	r0, r1, [sp]
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	d126      	bne.n	8005c98 <_dtoa_r+0x5e8>
 8005c4a:	4b1c      	ldr	r3, [pc, #112]	; (8005cbc <_dtoa_r+0x60c>)
 8005c4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c50:	f7fa fb1c 	bl	800028c <__adddf3>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c5c:	f7fa ff5c 	bl	8000b18 <__aeabi_dcmpgt>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	d174      	bne.n	8005d4e <_dtoa_r+0x69e>
 8005c64:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c68:	2000      	movs	r0, #0
 8005c6a:	4914      	ldr	r1, [pc, #80]	; (8005cbc <_dtoa_r+0x60c>)
 8005c6c:	f7fa fb0c 	bl	8000288 <__aeabi_dsub>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c78:	f7fa ff30 	bl	8000adc <__aeabi_dcmplt>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	f43f af30 	beq.w	8005ae2 <_dtoa_r+0x432>
 8005c82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c86:	2b30      	cmp	r3, #48	; 0x30
 8005c88:	f105 32ff 	add.w	r2, r5, #4294967295
 8005c8c:	d002      	beq.n	8005c94 <_dtoa_r+0x5e4>
 8005c8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005c92:	e04a      	b.n	8005d2a <_dtoa_r+0x67a>
 8005c94:	4615      	mov	r5, r2
 8005c96:	e7f4      	b.n	8005c82 <_dtoa_r+0x5d2>
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <_dtoa_r+0x600>)
 8005c9a:	f7fa fcad 	bl	80005f8 <__aeabi_dmul>
 8005c9e:	e9cd 0100 	strd	r0, r1, [sp]
 8005ca2:	e7bc      	b.n	8005c1e <_dtoa_r+0x56e>
 8005ca4:	08006de8 	.word	0x08006de8
 8005ca8:	08006dc0 	.word	0x08006dc0
 8005cac:	3ff00000 	.word	0x3ff00000
 8005cb0:	40240000 	.word	0x40240000
 8005cb4:	401c0000 	.word	0x401c0000
 8005cb8:	40140000 	.word	0x40140000
 8005cbc:	3fe00000 	.word	0x3fe00000
 8005cc0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005cc4:	465d      	mov	r5, fp
 8005cc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cca:	4630      	mov	r0, r6
 8005ccc:	4639      	mov	r1, r7
 8005cce:	f7fa fdbd 	bl	800084c <__aeabi_ddiv>
 8005cd2:	f7fa ff41 	bl	8000b58 <__aeabi_d2iz>
 8005cd6:	4680      	mov	r8, r0
 8005cd8:	f7fa fc24 	bl	8000524 <__aeabi_i2d>
 8005cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ce0:	f7fa fc8a 	bl	80005f8 <__aeabi_dmul>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4630      	mov	r0, r6
 8005cea:	4639      	mov	r1, r7
 8005cec:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005cf0:	f7fa faca 	bl	8000288 <__aeabi_dsub>
 8005cf4:	f805 6b01 	strb.w	r6, [r5], #1
 8005cf8:	eba5 060b 	sub.w	r6, r5, fp
 8005cfc:	45b1      	cmp	r9, r6
 8005cfe:	4602      	mov	r2, r0
 8005d00:	460b      	mov	r3, r1
 8005d02:	d139      	bne.n	8005d78 <_dtoa_r+0x6c8>
 8005d04:	f7fa fac2 	bl	800028c <__adddf3>
 8005d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d0c:	4606      	mov	r6, r0
 8005d0e:	460f      	mov	r7, r1
 8005d10:	f7fa ff02 	bl	8000b18 <__aeabi_dcmpgt>
 8005d14:	b9c8      	cbnz	r0, 8005d4a <_dtoa_r+0x69a>
 8005d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	4639      	mov	r1, r7
 8005d1e:	f7fa fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d22:	b110      	cbz	r0, 8005d2a <_dtoa_r+0x67a>
 8005d24:	f018 0f01 	tst.w	r8, #1
 8005d28:	d10f      	bne.n	8005d4a <_dtoa_r+0x69a>
 8005d2a:	9904      	ldr	r1, [sp, #16]
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f000 facc 	bl	80062ca <_Bfree>
 8005d32:	2300      	movs	r3, #0
 8005d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d36:	702b      	strb	r3, [r5, #0]
 8005d38:	f10a 0301 	add.w	r3, sl, #1
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 8241 	beq.w	80061c8 <_dtoa_r+0xb18>
 8005d46:	601d      	str	r5, [r3, #0]
 8005d48:	e23e      	b.n	80061c8 <_dtoa_r+0xb18>
 8005d4a:	f8cd a020 	str.w	sl, [sp, #32]
 8005d4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d52:	2a39      	cmp	r2, #57	; 0x39
 8005d54:	f105 33ff 	add.w	r3, r5, #4294967295
 8005d58:	d108      	bne.n	8005d6c <_dtoa_r+0x6bc>
 8005d5a:	459b      	cmp	fp, r3
 8005d5c:	d10a      	bne.n	8005d74 <_dtoa_r+0x6c4>
 8005d5e:	9b08      	ldr	r3, [sp, #32]
 8005d60:	3301      	adds	r3, #1
 8005d62:	9308      	str	r3, [sp, #32]
 8005d64:	2330      	movs	r3, #48	; 0x30
 8005d66:	f88b 3000 	strb.w	r3, [fp]
 8005d6a:	465b      	mov	r3, fp
 8005d6c:	781a      	ldrb	r2, [r3, #0]
 8005d6e:	3201      	adds	r2, #1
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e78c      	b.n	8005c8e <_dtoa_r+0x5de>
 8005d74:	461d      	mov	r5, r3
 8005d76:	e7ea      	b.n	8005d4e <_dtoa_r+0x69e>
 8005d78:	2200      	movs	r2, #0
 8005d7a:	4b9b      	ldr	r3, [pc, #620]	; (8005fe8 <_dtoa_r+0x938>)
 8005d7c:	f7fa fc3c 	bl	80005f8 <__aeabi_dmul>
 8005d80:	2200      	movs	r2, #0
 8005d82:	2300      	movs	r3, #0
 8005d84:	4606      	mov	r6, r0
 8005d86:	460f      	mov	r7, r1
 8005d88:	f7fa fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	d09a      	beq.n	8005cc6 <_dtoa_r+0x616>
 8005d90:	e7cb      	b.n	8005d2a <_dtoa_r+0x67a>
 8005d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	f000 808b 	beq.w	8005eb0 <_dtoa_r+0x800>
 8005d9a:	9a06      	ldr	r2, [sp, #24]
 8005d9c:	2a01      	cmp	r2, #1
 8005d9e:	dc6e      	bgt.n	8005e7e <_dtoa_r+0x7ce>
 8005da0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005da2:	2a00      	cmp	r2, #0
 8005da4:	d067      	beq.n	8005e76 <_dtoa_r+0x7c6>
 8005da6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005daa:	9f07      	ldr	r7, [sp, #28]
 8005dac:	9d05      	ldr	r5, [sp, #20]
 8005dae:	9a05      	ldr	r2, [sp, #20]
 8005db0:	2101      	movs	r1, #1
 8005db2:	441a      	add	r2, r3
 8005db4:	4620      	mov	r0, r4
 8005db6:	9205      	str	r2, [sp, #20]
 8005db8:	4498      	add	r8, r3
 8005dba:	f000 fb26 	bl	800640a <__i2b>
 8005dbe:	4606      	mov	r6, r0
 8005dc0:	2d00      	cmp	r5, #0
 8005dc2:	dd0c      	ble.n	8005dde <_dtoa_r+0x72e>
 8005dc4:	f1b8 0f00 	cmp.w	r8, #0
 8005dc8:	dd09      	ble.n	8005dde <_dtoa_r+0x72e>
 8005dca:	4545      	cmp	r5, r8
 8005dcc:	9a05      	ldr	r2, [sp, #20]
 8005dce:	462b      	mov	r3, r5
 8005dd0:	bfa8      	it	ge
 8005dd2:	4643      	movge	r3, r8
 8005dd4:	1ad2      	subs	r2, r2, r3
 8005dd6:	9205      	str	r2, [sp, #20]
 8005dd8:	1aed      	subs	r5, r5, r3
 8005dda:	eba8 0803 	sub.w	r8, r8, r3
 8005dde:	9b07      	ldr	r3, [sp, #28]
 8005de0:	b1eb      	cbz	r3, 8005e1e <_dtoa_r+0x76e>
 8005de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d067      	beq.n	8005eb8 <_dtoa_r+0x808>
 8005de8:	b18f      	cbz	r7, 8005e0e <_dtoa_r+0x75e>
 8005dea:	4631      	mov	r1, r6
 8005dec:	463a      	mov	r2, r7
 8005dee:	4620      	mov	r0, r4
 8005df0:	f000 fbaa 	bl	8006548 <__pow5mult>
 8005df4:	9a04      	ldr	r2, [sp, #16]
 8005df6:	4601      	mov	r1, r0
 8005df8:	4606      	mov	r6, r0
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 fb0e 	bl	800641c <__multiply>
 8005e00:	9904      	ldr	r1, [sp, #16]
 8005e02:	9008      	str	r0, [sp, #32]
 8005e04:	4620      	mov	r0, r4
 8005e06:	f000 fa60 	bl	80062ca <_Bfree>
 8005e0a:	9b08      	ldr	r3, [sp, #32]
 8005e0c:	9304      	str	r3, [sp, #16]
 8005e0e:	9b07      	ldr	r3, [sp, #28]
 8005e10:	1bda      	subs	r2, r3, r7
 8005e12:	d004      	beq.n	8005e1e <_dtoa_r+0x76e>
 8005e14:	9904      	ldr	r1, [sp, #16]
 8005e16:	4620      	mov	r0, r4
 8005e18:	f000 fb96 	bl	8006548 <__pow5mult>
 8005e1c:	9004      	str	r0, [sp, #16]
 8005e1e:	2101      	movs	r1, #1
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 faf2 	bl	800640a <__i2b>
 8005e26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e28:	4607      	mov	r7, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 81d0 	beq.w	80061d0 <_dtoa_r+0xb20>
 8005e30:	461a      	mov	r2, r3
 8005e32:	4601      	mov	r1, r0
 8005e34:	4620      	mov	r0, r4
 8005e36:	f000 fb87 	bl	8006548 <__pow5mult>
 8005e3a:	9b06      	ldr	r3, [sp, #24]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	4607      	mov	r7, r0
 8005e40:	dc40      	bgt.n	8005ec4 <_dtoa_r+0x814>
 8005e42:	9b00      	ldr	r3, [sp, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d139      	bne.n	8005ebc <_dtoa_r+0x80c>
 8005e48:	9b01      	ldr	r3, [sp, #4]
 8005e4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d136      	bne.n	8005ec0 <_dtoa_r+0x810>
 8005e52:	9b01      	ldr	r3, [sp, #4]
 8005e54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e58:	0d1b      	lsrs	r3, r3, #20
 8005e5a:	051b      	lsls	r3, r3, #20
 8005e5c:	b12b      	cbz	r3, 8005e6a <_dtoa_r+0x7ba>
 8005e5e:	9b05      	ldr	r3, [sp, #20]
 8005e60:	3301      	adds	r3, #1
 8005e62:	9305      	str	r3, [sp, #20]
 8005e64:	f108 0801 	add.w	r8, r8, #1
 8005e68:	2301      	movs	r3, #1
 8005e6a:	9307      	str	r3, [sp, #28]
 8005e6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d12a      	bne.n	8005ec8 <_dtoa_r+0x818>
 8005e72:	2001      	movs	r0, #1
 8005e74:	e030      	b.n	8005ed8 <_dtoa_r+0x828>
 8005e76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e78:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e7c:	e795      	b.n	8005daa <_dtoa_r+0x6fa>
 8005e7e:	9b07      	ldr	r3, [sp, #28]
 8005e80:	f109 37ff 	add.w	r7, r9, #4294967295
 8005e84:	42bb      	cmp	r3, r7
 8005e86:	bfbf      	itttt	lt
 8005e88:	9b07      	ldrlt	r3, [sp, #28]
 8005e8a:	9707      	strlt	r7, [sp, #28]
 8005e8c:	1afa      	sublt	r2, r7, r3
 8005e8e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005e90:	bfbb      	ittet	lt
 8005e92:	189b      	addlt	r3, r3, r2
 8005e94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005e96:	1bdf      	subge	r7, r3, r7
 8005e98:	2700      	movlt	r7, #0
 8005e9a:	f1b9 0f00 	cmp.w	r9, #0
 8005e9e:	bfb5      	itete	lt
 8005ea0:	9b05      	ldrlt	r3, [sp, #20]
 8005ea2:	9d05      	ldrge	r5, [sp, #20]
 8005ea4:	eba3 0509 	sublt.w	r5, r3, r9
 8005ea8:	464b      	movge	r3, r9
 8005eaa:	bfb8      	it	lt
 8005eac:	2300      	movlt	r3, #0
 8005eae:	e77e      	b.n	8005dae <_dtoa_r+0x6fe>
 8005eb0:	9f07      	ldr	r7, [sp, #28]
 8005eb2:	9d05      	ldr	r5, [sp, #20]
 8005eb4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005eb6:	e783      	b.n	8005dc0 <_dtoa_r+0x710>
 8005eb8:	9a07      	ldr	r2, [sp, #28]
 8005eba:	e7ab      	b.n	8005e14 <_dtoa_r+0x764>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e7d4      	b.n	8005e6a <_dtoa_r+0x7ba>
 8005ec0:	9b00      	ldr	r3, [sp, #0]
 8005ec2:	e7d2      	b.n	8005e6a <_dtoa_r+0x7ba>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9307      	str	r3, [sp, #28]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005ece:	6918      	ldr	r0, [r3, #16]
 8005ed0:	f000 fa4d 	bl	800636e <__hi0bits>
 8005ed4:	f1c0 0020 	rsb	r0, r0, #32
 8005ed8:	4440      	add	r0, r8
 8005eda:	f010 001f 	ands.w	r0, r0, #31
 8005ede:	d047      	beq.n	8005f70 <_dtoa_r+0x8c0>
 8005ee0:	f1c0 0320 	rsb	r3, r0, #32
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	dd3b      	ble.n	8005f60 <_dtoa_r+0x8b0>
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	f1c0 001c 	rsb	r0, r0, #28
 8005eee:	4403      	add	r3, r0
 8005ef0:	9305      	str	r3, [sp, #20]
 8005ef2:	4405      	add	r5, r0
 8005ef4:	4480      	add	r8, r0
 8005ef6:	9b05      	ldr	r3, [sp, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dd05      	ble.n	8005f08 <_dtoa_r+0x858>
 8005efc:	461a      	mov	r2, r3
 8005efe:	9904      	ldr	r1, [sp, #16]
 8005f00:	4620      	mov	r0, r4
 8005f02:	f000 fb6f 	bl	80065e4 <__lshift>
 8005f06:	9004      	str	r0, [sp, #16]
 8005f08:	f1b8 0f00 	cmp.w	r8, #0
 8005f0c:	dd05      	ble.n	8005f1a <_dtoa_r+0x86a>
 8005f0e:	4639      	mov	r1, r7
 8005f10:	4642      	mov	r2, r8
 8005f12:	4620      	mov	r0, r4
 8005f14:	f000 fb66 	bl	80065e4 <__lshift>
 8005f18:	4607      	mov	r7, r0
 8005f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f1c:	b353      	cbz	r3, 8005f74 <_dtoa_r+0x8c4>
 8005f1e:	4639      	mov	r1, r7
 8005f20:	9804      	ldr	r0, [sp, #16]
 8005f22:	f000 fbb3 	bl	800668c <__mcmp>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	da24      	bge.n	8005f74 <_dtoa_r+0x8c4>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	220a      	movs	r2, #10
 8005f2e:	9904      	ldr	r1, [sp, #16]
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 f9e1 	bl	80062f8 <__multadd>
 8005f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f38:	9004      	str	r0, [sp, #16]
 8005f3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 814d 	beq.w	80061de <_dtoa_r+0xb2e>
 8005f44:	2300      	movs	r3, #0
 8005f46:	4631      	mov	r1, r6
 8005f48:	220a      	movs	r2, #10
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 f9d4 	bl	80062f8 <__multadd>
 8005f50:	9b02      	ldr	r3, [sp, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	4606      	mov	r6, r0
 8005f56:	dc4f      	bgt.n	8005ff8 <_dtoa_r+0x948>
 8005f58:	9b06      	ldr	r3, [sp, #24]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	dd4c      	ble.n	8005ff8 <_dtoa_r+0x948>
 8005f5e:	e011      	b.n	8005f84 <_dtoa_r+0x8d4>
 8005f60:	d0c9      	beq.n	8005ef6 <_dtoa_r+0x846>
 8005f62:	9a05      	ldr	r2, [sp, #20]
 8005f64:	331c      	adds	r3, #28
 8005f66:	441a      	add	r2, r3
 8005f68:	9205      	str	r2, [sp, #20]
 8005f6a:	441d      	add	r5, r3
 8005f6c:	4498      	add	r8, r3
 8005f6e:	e7c2      	b.n	8005ef6 <_dtoa_r+0x846>
 8005f70:	4603      	mov	r3, r0
 8005f72:	e7f6      	b.n	8005f62 <_dtoa_r+0x8b2>
 8005f74:	f1b9 0f00 	cmp.w	r9, #0
 8005f78:	dc38      	bgt.n	8005fec <_dtoa_r+0x93c>
 8005f7a:	9b06      	ldr	r3, [sp, #24]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	dd35      	ble.n	8005fec <_dtoa_r+0x93c>
 8005f80:	f8cd 9008 	str.w	r9, [sp, #8]
 8005f84:	9b02      	ldr	r3, [sp, #8]
 8005f86:	b963      	cbnz	r3, 8005fa2 <_dtoa_r+0x8f2>
 8005f88:	4639      	mov	r1, r7
 8005f8a:	2205      	movs	r2, #5
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f000 f9b3 	bl	80062f8 <__multadd>
 8005f92:	4601      	mov	r1, r0
 8005f94:	4607      	mov	r7, r0
 8005f96:	9804      	ldr	r0, [sp, #16]
 8005f98:	f000 fb78 	bl	800668c <__mcmp>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	f73f adcc 	bgt.w	8005b3a <_dtoa_r+0x48a>
 8005fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fa4:	465d      	mov	r5, fp
 8005fa6:	ea6f 0a03 	mvn.w	sl, r3
 8005faa:	f04f 0900 	mov.w	r9, #0
 8005fae:	4639      	mov	r1, r7
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f000 f98a 	bl	80062ca <_Bfree>
 8005fb6:	2e00      	cmp	r6, #0
 8005fb8:	f43f aeb7 	beq.w	8005d2a <_dtoa_r+0x67a>
 8005fbc:	f1b9 0f00 	cmp.w	r9, #0
 8005fc0:	d005      	beq.n	8005fce <_dtoa_r+0x91e>
 8005fc2:	45b1      	cmp	r9, r6
 8005fc4:	d003      	beq.n	8005fce <_dtoa_r+0x91e>
 8005fc6:	4649      	mov	r1, r9
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 f97e 	bl	80062ca <_Bfree>
 8005fce:	4631      	mov	r1, r6
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 f97a 	bl	80062ca <_Bfree>
 8005fd6:	e6a8      	b.n	8005d2a <_dtoa_r+0x67a>
 8005fd8:	2700      	movs	r7, #0
 8005fda:	463e      	mov	r6, r7
 8005fdc:	e7e1      	b.n	8005fa2 <_dtoa_r+0x8f2>
 8005fde:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005fe2:	463e      	mov	r6, r7
 8005fe4:	e5a9      	b.n	8005b3a <_dtoa_r+0x48a>
 8005fe6:	bf00      	nop
 8005fe8:	40240000 	.word	0x40240000
 8005fec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fee:	f8cd 9008 	str.w	r9, [sp, #8]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80fa 	beq.w	80061ec <_dtoa_r+0xb3c>
 8005ff8:	2d00      	cmp	r5, #0
 8005ffa:	dd05      	ble.n	8006008 <_dtoa_r+0x958>
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	462a      	mov	r2, r5
 8006000:	4620      	mov	r0, r4
 8006002:	f000 faef 	bl	80065e4 <__lshift>
 8006006:	4606      	mov	r6, r0
 8006008:	9b07      	ldr	r3, [sp, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d04c      	beq.n	80060a8 <_dtoa_r+0x9f8>
 800600e:	6871      	ldr	r1, [r6, #4]
 8006010:	4620      	mov	r0, r4
 8006012:	f000 f926 	bl	8006262 <_Balloc>
 8006016:	6932      	ldr	r2, [r6, #16]
 8006018:	3202      	adds	r2, #2
 800601a:	4605      	mov	r5, r0
 800601c:	0092      	lsls	r2, r2, #2
 800601e:	f106 010c 	add.w	r1, r6, #12
 8006022:	300c      	adds	r0, #12
 8006024:	f000 f912 	bl	800624c <memcpy>
 8006028:	2201      	movs	r2, #1
 800602a:	4629      	mov	r1, r5
 800602c:	4620      	mov	r0, r4
 800602e:	f000 fad9 	bl	80065e4 <__lshift>
 8006032:	9b00      	ldr	r3, [sp, #0]
 8006034:	f8cd b014 	str.w	fp, [sp, #20]
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	46b1      	mov	r9, r6
 800603e:	9307      	str	r3, [sp, #28]
 8006040:	4606      	mov	r6, r0
 8006042:	4639      	mov	r1, r7
 8006044:	9804      	ldr	r0, [sp, #16]
 8006046:	f7ff faa7 	bl	8005598 <quorem>
 800604a:	4649      	mov	r1, r9
 800604c:	4605      	mov	r5, r0
 800604e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006052:	9804      	ldr	r0, [sp, #16]
 8006054:	f000 fb1a 	bl	800668c <__mcmp>
 8006058:	4632      	mov	r2, r6
 800605a:	9000      	str	r0, [sp, #0]
 800605c:	4639      	mov	r1, r7
 800605e:	4620      	mov	r0, r4
 8006060:	f000 fb2e 	bl	80066c0 <__mdiff>
 8006064:	68c3      	ldr	r3, [r0, #12]
 8006066:	4602      	mov	r2, r0
 8006068:	bb03      	cbnz	r3, 80060ac <_dtoa_r+0x9fc>
 800606a:	4601      	mov	r1, r0
 800606c:	9008      	str	r0, [sp, #32]
 800606e:	9804      	ldr	r0, [sp, #16]
 8006070:	f000 fb0c 	bl	800668c <__mcmp>
 8006074:	9a08      	ldr	r2, [sp, #32]
 8006076:	4603      	mov	r3, r0
 8006078:	4611      	mov	r1, r2
 800607a:	4620      	mov	r0, r4
 800607c:	9308      	str	r3, [sp, #32]
 800607e:	f000 f924 	bl	80062ca <_Bfree>
 8006082:	9b08      	ldr	r3, [sp, #32]
 8006084:	b9a3      	cbnz	r3, 80060b0 <_dtoa_r+0xa00>
 8006086:	9a06      	ldr	r2, [sp, #24]
 8006088:	b992      	cbnz	r2, 80060b0 <_dtoa_r+0xa00>
 800608a:	9a07      	ldr	r2, [sp, #28]
 800608c:	b982      	cbnz	r2, 80060b0 <_dtoa_r+0xa00>
 800608e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006092:	d029      	beq.n	80060e8 <_dtoa_r+0xa38>
 8006094:	9b00      	ldr	r3, [sp, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	dd01      	ble.n	800609e <_dtoa_r+0x9ee>
 800609a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800609e:	9b05      	ldr	r3, [sp, #20]
 80060a0:	1c5d      	adds	r5, r3, #1
 80060a2:	f883 8000 	strb.w	r8, [r3]
 80060a6:	e782      	b.n	8005fae <_dtoa_r+0x8fe>
 80060a8:	4630      	mov	r0, r6
 80060aa:	e7c2      	b.n	8006032 <_dtoa_r+0x982>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e7e3      	b.n	8006078 <_dtoa_r+0x9c8>
 80060b0:	9a00      	ldr	r2, [sp, #0]
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	db04      	blt.n	80060c0 <_dtoa_r+0xa10>
 80060b6:	d125      	bne.n	8006104 <_dtoa_r+0xa54>
 80060b8:	9a06      	ldr	r2, [sp, #24]
 80060ba:	bb1a      	cbnz	r2, 8006104 <_dtoa_r+0xa54>
 80060bc:	9a07      	ldr	r2, [sp, #28]
 80060be:	bb0a      	cbnz	r2, 8006104 <_dtoa_r+0xa54>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	ddec      	ble.n	800609e <_dtoa_r+0x9ee>
 80060c4:	2201      	movs	r2, #1
 80060c6:	9904      	ldr	r1, [sp, #16]
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fa8b 	bl	80065e4 <__lshift>
 80060ce:	4639      	mov	r1, r7
 80060d0:	9004      	str	r0, [sp, #16]
 80060d2:	f000 fadb 	bl	800668c <__mcmp>
 80060d6:	2800      	cmp	r0, #0
 80060d8:	dc03      	bgt.n	80060e2 <_dtoa_r+0xa32>
 80060da:	d1e0      	bne.n	800609e <_dtoa_r+0x9ee>
 80060dc:	f018 0f01 	tst.w	r8, #1
 80060e0:	d0dd      	beq.n	800609e <_dtoa_r+0x9ee>
 80060e2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80060e6:	d1d8      	bne.n	800609a <_dtoa_r+0x9ea>
 80060e8:	9b05      	ldr	r3, [sp, #20]
 80060ea:	9a05      	ldr	r2, [sp, #20]
 80060ec:	1c5d      	adds	r5, r3, #1
 80060ee:	2339      	movs	r3, #57	; 0x39
 80060f0:	7013      	strb	r3, [r2, #0]
 80060f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060f6:	2b39      	cmp	r3, #57	; 0x39
 80060f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80060fc:	d04f      	beq.n	800619e <_dtoa_r+0xaee>
 80060fe:	3301      	adds	r3, #1
 8006100:	7013      	strb	r3, [r2, #0]
 8006102:	e754      	b.n	8005fae <_dtoa_r+0x8fe>
 8006104:	9a05      	ldr	r2, [sp, #20]
 8006106:	2b00      	cmp	r3, #0
 8006108:	f102 0501 	add.w	r5, r2, #1
 800610c:	dd06      	ble.n	800611c <_dtoa_r+0xa6c>
 800610e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006112:	d0e9      	beq.n	80060e8 <_dtoa_r+0xa38>
 8006114:	f108 0801 	add.w	r8, r8, #1
 8006118:	9b05      	ldr	r3, [sp, #20]
 800611a:	e7c2      	b.n	80060a2 <_dtoa_r+0x9f2>
 800611c:	9a02      	ldr	r2, [sp, #8]
 800611e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006122:	eba5 030b 	sub.w	r3, r5, fp
 8006126:	4293      	cmp	r3, r2
 8006128:	d021      	beq.n	800616e <_dtoa_r+0xabe>
 800612a:	2300      	movs	r3, #0
 800612c:	220a      	movs	r2, #10
 800612e:	9904      	ldr	r1, [sp, #16]
 8006130:	4620      	mov	r0, r4
 8006132:	f000 f8e1 	bl	80062f8 <__multadd>
 8006136:	45b1      	cmp	r9, r6
 8006138:	9004      	str	r0, [sp, #16]
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	f04f 020a 	mov.w	r2, #10
 8006142:	4649      	mov	r1, r9
 8006144:	4620      	mov	r0, r4
 8006146:	d105      	bne.n	8006154 <_dtoa_r+0xaa4>
 8006148:	f000 f8d6 	bl	80062f8 <__multadd>
 800614c:	4681      	mov	r9, r0
 800614e:	4606      	mov	r6, r0
 8006150:	9505      	str	r5, [sp, #20]
 8006152:	e776      	b.n	8006042 <_dtoa_r+0x992>
 8006154:	f000 f8d0 	bl	80062f8 <__multadd>
 8006158:	4631      	mov	r1, r6
 800615a:	4681      	mov	r9, r0
 800615c:	2300      	movs	r3, #0
 800615e:	220a      	movs	r2, #10
 8006160:	4620      	mov	r0, r4
 8006162:	f000 f8c9 	bl	80062f8 <__multadd>
 8006166:	4606      	mov	r6, r0
 8006168:	e7f2      	b.n	8006150 <_dtoa_r+0xaa0>
 800616a:	f04f 0900 	mov.w	r9, #0
 800616e:	2201      	movs	r2, #1
 8006170:	9904      	ldr	r1, [sp, #16]
 8006172:	4620      	mov	r0, r4
 8006174:	f000 fa36 	bl	80065e4 <__lshift>
 8006178:	4639      	mov	r1, r7
 800617a:	9004      	str	r0, [sp, #16]
 800617c:	f000 fa86 	bl	800668c <__mcmp>
 8006180:	2800      	cmp	r0, #0
 8006182:	dcb6      	bgt.n	80060f2 <_dtoa_r+0xa42>
 8006184:	d102      	bne.n	800618c <_dtoa_r+0xadc>
 8006186:	f018 0f01 	tst.w	r8, #1
 800618a:	d1b2      	bne.n	80060f2 <_dtoa_r+0xa42>
 800618c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006190:	2b30      	cmp	r3, #48	; 0x30
 8006192:	f105 32ff 	add.w	r2, r5, #4294967295
 8006196:	f47f af0a 	bne.w	8005fae <_dtoa_r+0x8fe>
 800619a:	4615      	mov	r5, r2
 800619c:	e7f6      	b.n	800618c <_dtoa_r+0xadc>
 800619e:	4593      	cmp	fp, r2
 80061a0:	d105      	bne.n	80061ae <_dtoa_r+0xafe>
 80061a2:	2331      	movs	r3, #49	; 0x31
 80061a4:	f10a 0a01 	add.w	sl, sl, #1
 80061a8:	f88b 3000 	strb.w	r3, [fp]
 80061ac:	e6ff      	b.n	8005fae <_dtoa_r+0x8fe>
 80061ae:	4615      	mov	r5, r2
 80061b0:	e79f      	b.n	80060f2 <_dtoa_r+0xa42>
 80061b2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006218 <_dtoa_r+0xb68>
 80061b6:	e007      	b.n	80061c8 <_dtoa_r+0xb18>
 80061b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061ba:	f8df b060 	ldr.w	fp, [pc, #96]	; 800621c <_dtoa_r+0xb6c>
 80061be:	b11b      	cbz	r3, 80061c8 <_dtoa_r+0xb18>
 80061c0:	f10b 0308 	add.w	r3, fp, #8
 80061c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	4658      	mov	r0, fp
 80061ca:	b017      	add	sp, #92	; 0x5c
 80061cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d0:	9b06      	ldr	r3, [sp, #24]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	f77f ae35 	ble.w	8005e42 <_dtoa_r+0x792>
 80061d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061da:	9307      	str	r3, [sp, #28]
 80061dc:	e649      	b.n	8005e72 <_dtoa_r+0x7c2>
 80061de:	9b02      	ldr	r3, [sp, #8]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	dc03      	bgt.n	80061ec <_dtoa_r+0xb3c>
 80061e4:	9b06      	ldr	r3, [sp, #24]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	f73f aecc 	bgt.w	8005f84 <_dtoa_r+0x8d4>
 80061ec:	465d      	mov	r5, fp
 80061ee:	4639      	mov	r1, r7
 80061f0:	9804      	ldr	r0, [sp, #16]
 80061f2:	f7ff f9d1 	bl	8005598 <quorem>
 80061f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80061fa:	f805 8b01 	strb.w	r8, [r5], #1
 80061fe:	9a02      	ldr	r2, [sp, #8]
 8006200:	eba5 030b 	sub.w	r3, r5, fp
 8006204:	429a      	cmp	r2, r3
 8006206:	ddb0      	ble.n	800616a <_dtoa_r+0xaba>
 8006208:	2300      	movs	r3, #0
 800620a:	220a      	movs	r2, #10
 800620c:	9904      	ldr	r1, [sp, #16]
 800620e:	4620      	mov	r0, r4
 8006210:	f000 f872 	bl	80062f8 <__multadd>
 8006214:	9004      	str	r0, [sp, #16]
 8006216:	e7ea      	b.n	80061ee <_dtoa_r+0xb3e>
 8006218:	08006d88 	.word	0x08006d88
 800621c:	08006dac 	.word	0x08006dac

08006220 <_localeconv_r>:
 8006220:	4b04      	ldr	r3, [pc, #16]	; (8006234 <_localeconv_r+0x14>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6a18      	ldr	r0, [r3, #32]
 8006226:	4b04      	ldr	r3, [pc, #16]	; (8006238 <_localeconv_r+0x18>)
 8006228:	2800      	cmp	r0, #0
 800622a:	bf08      	it	eq
 800622c:	4618      	moveq	r0, r3
 800622e:	30f0      	adds	r0, #240	; 0xf0
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	2000000c 	.word	0x2000000c
 8006238:	20000070 	.word	0x20000070

0800623c <malloc>:
 800623c:	4b02      	ldr	r3, [pc, #8]	; (8006248 <malloc+0xc>)
 800623e:	4601      	mov	r1, r0
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	f000 bb45 	b.w	80068d0 <_malloc_r>
 8006246:	bf00      	nop
 8006248:	2000000c 	.word	0x2000000c

0800624c <memcpy>:
 800624c:	b510      	push	{r4, lr}
 800624e:	1e43      	subs	r3, r0, #1
 8006250:	440a      	add	r2, r1
 8006252:	4291      	cmp	r1, r2
 8006254:	d100      	bne.n	8006258 <memcpy+0xc>
 8006256:	bd10      	pop	{r4, pc}
 8006258:	f811 4b01 	ldrb.w	r4, [r1], #1
 800625c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006260:	e7f7      	b.n	8006252 <memcpy+0x6>

08006262 <_Balloc>:
 8006262:	b570      	push	{r4, r5, r6, lr}
 8006264:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006266:	4604      	mov	r4, r0
 8006268:	460e      	mov	r6, r1
 800626a:	b93d      	cbnz	r5, 800627c <_Balloc+0x1a>
 800626c:	2010      	movs	r0, #16
 800626e:	f7ff ffe5 	bl	800623c <malloc>
 8006272:	6260      	str	r0, [r4, #36]	; 0x24
 8006274:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006278:	6005      	str	r5, [r0, #0]
 800627a:	60c5      	str	r5, [r0, #12]
 800627c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800627e:	68eb      	ldr	r3, [r5, #12]
 8006280:	b183      	cbz	r3, 80062a4 <_Balloc+0x42>
 8006282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800628a:	b9b8      	cbnz	r0, 80062bc <_Balloc+0x5a>
 800628c:	2101      	movs	r1, #1
 800628e:	fa01 f506 	lsl.w	r5, r1, r6
 8006292:	1d6a      	adds	r2, r5, #5
 8006294:	0092      	lsls	r2, r2, #2
 8006296:	4620      	mov	r0, r4
 8006298:	f000 fabe 	bl	8006818 <_calloc_r>
 800629c:	b160      	cbz	r0, 80062b8 <_Balloc+0x56>
 800629e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80062a2:	e00e      	b.n	80062c2 <_Balloc+0x60>
 80062a4:	2221      	movs	r2, #33	; 0x21
 80062a6:	2104      	movs	r1, #4
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 fab5 	bl	8006818 <_calloc_r>
 80062ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062b0:	60e8      	str	r0, [r5, #12]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e4      	bne.n	8006282 <_Balloc+0x20>
 80062b8:	2000      	movs	r0, #0
 80062ba:	bd70      	pop	{r4, r5, r6, pc}
 80062bc:	6802      	ldr	r2, [r0, #0]
 80062be:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80062c2:	2300      	movs	r3, #0
 80062c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062c8:	e7f7      	b.n	80062ba <_Balloc+0x58>

080062ca <_Bfree>:
 80062ca:	b570      	push	{r4, r5, r6, lr}
 80062cc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80062ce:	4606      	mov	r6, r0
 80062d0:	460d      	mov	r5, r1
 80062d2:	b93c      	cbnz	r4, 80062e4 <_Bfree+0x1a>
 80062d4:	2010      	movs	r0, #16
 80062d6:	f7ff ffb1 	bl	800623c <malloc>
 80062da:	6270      	str	r0, [r6, #36]	; 0x24
 80062dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062e0:	6004      	str	r4, [r0, #0]
 80062e2:	60c4      	str	r4, [r0, #12]
 80062e4:	b13d      	cbz	r5, 80062f6 <_Bfree+0x2c>
 80062e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80062e8:	686a      	ldr	r2, [r5, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062f0:	6029      	str	r1, [r5, #0]
 80062f2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80062f6:	bd70      	pop	{r4, r5, r6, pc}

080062f8 <__multadd>:
 80062f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fc:	690d      	ldr	r5, [r1, #16]
 80062fe:	461f      	mov	r7, r3
 8006300:	4606      	mov	r6, r0
 8006302:	460c      	mov	r4, r1
 8006304:	f101 0c14 	add.w	ip, r1, #20
 8006308:	2300      	movs	r3, #0
 800630a:	f8dc 0000 	ldr.w	r0, [ip]
 800630e:	b281      	uxth	r1, r0
 8006310:	fb02 7101 	mla	r1, r2, r1, r7
 8006314:	0c0f      	lsrs	r7, r1, #16
 8006316:	0c00      	lsrs	r0, r0, #16
 8006318:	fb02 7000 	mla	r0, r2, r0, r7
 800631c:	b289      	uxth	r1, r1
 800631e:	3301      	adds	r3, #1
 8006320:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006324:	429d      	cmp	r5, r3
 8006326:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800632a:	f84c 1b04 	str.w	r1, [ip], #4
 800632e:	dcec      	bgt.n	800630a <__multadd+0x12>
 8006330:	b1d7      	cbz	r7, 8006368 <__multadd+0x70>
 8006332:	68a3      	ldr	r3, [r4, #8]
 8006334:	42ab      	cmp	r3, r5
 8006336:	dc12      	bgt.n	800635e <__multadd+0x66>
 8006338:	6861      	ldr	r1, [r4, #4]
 800633a:	4630      	mov	r0, r6
 800633c:	3101      	adds	r1, #1
 800633e:	f7ff ff90 	bl	8006262 <_Balloc>
 8006342:	6922      	ldr	r2, [r4, #16]
 8006344:	3202      	adds	r2, #2
 8006346:	f104 010c 	add.w	r1, r4, #12
 800634a:	4680      	mov	r8, r0
 800634c:	0092      	lsls	r2, r2, #2
 800634e:	300c      	adds	r0, #12
 8006350:	f7ff ff7c 	bl	800624c <memcpy>
 8006354:	4621      	mov	r1, r4
 8006356:	4630      	mov	r0, r6
 8006358:	f7ff ffb7 	bl	80062ca <_Bfree>
 800635c:	4644      	mov	r4, r8
 800635e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006362:	3501      	adds	r5, #1
 8006364:	615f      	str	r7, [r3, #20]
 8006366:	6125      	str	r5, [r4, #16]
 8006368:	4620      	mov	r0, r4
 800636a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800636e <__hi0bits>:
 800636e:	0c02      	lsrs	r2, r0, #16
 8006370:	0412      	lsls	r2, r2, #16
 8006372:	4603      	mov	r3, r0
 8006374:	b9b2      	cbnz	r2, 80063a4 <__hi0bits+0x36>
 8006376:	0403      	lsls	r3, r0, #16
 8006378:	2010      	movs	r0, #16
 800637a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800637e:	bf04      	itt	eq
 8006380:	021b      	lsleq	r3, r3, #8
 8006382:	3008      	addeq	r0, #8
 8006384:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006388:	bf04      	itt	eq
 800638a:	011b      	lsleq	r3, r3, #4
 800638c:	3004      	addeq	r0, #4
 800638e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006392:	bf04      	itt	eq
 8006394:	009b      	lsleq	r3, r3, #2
 8006396:	3002      	addeq	r0, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	db06      	blt.n	80063aa <__hi0bits+0x3c>
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	d503      	bpl.n	80063a8 <__hi0bits+0x3a>
 80063a0:	3001      	adds	r0, #1
 80063a2:	4770      	bx	lr
 80063a4:	2000      	movs	r0, #0
 80063a6:	e7e8      	b.n	800637a <__hi0bits+0xc>
 80063a8:	2020      	movs	r0, #32
 80063aa:	4770      	bx	lr

080063ac <__lo0bits>:
 80063ac:	6803      	ldr	r3, [r0, #0]
 80063ae:	f013 0207 	ands.w	r2, r3, #7
 80063b2:	4601      	mov	r1, r0
 80063b4:	d00b      	beq.n	80063ce <__lo0bits+0x22>
 80063b6:	07da      	lsls	r2, r3, #31
 80063b8:	d423      	bmi.n	8006402 <__lo0bits+0x56>
 80063ba:	0798      	lsls	r0, r3, #30
 80063bc:	bf49      	itett	mi
 80063be:	085b      	lsrmi	r3, r3, #1
 80063c0:	089b      	lsrpl	r3, r3, #2
 80063c2:	2001      	movmi	r0, #1
 80063c4:	600b      	strmi	r3, [r1, #0]
 80063c6:	bf5c      	itt	pl
 80063c8:	600b      	strpl	r3, [r1, #0]
 80063ca:	2002      	movpl	r0, #2
 80063cc:	4770      	bx	lr
 80063ce:	b298      	uxth	r0, r3
 80063d0:	b9a8      	cbnz	r0, 80063fe <__lo0bits+0x52>
 80063d2:	0c1b      	lsrs	r3, r3, #16
 80063d4:	2010      	movs	r0, #16
 80063d6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80063da:	bf04      	itt	eq
 80063dc:	0a1b      	lsreq	r3, r3, #8
 80063de:	3008      	addeq	r0, #8
 80063e0:	071a      	lsls	r2, r3, #28
 80063e2:	bf04      	itt	eq
 80063e4:	091b      	lsreq	r3, r3, #4
 80063e6:	3004      	addeq	r0, #4
 80063e8:	079a      	lsls	r2, r3, #30
 80063ea:	bf04      	itt	eq
 80063ec:	089b      	lsreq	r3, r3, #2
 80063ee:	3002      	addeq	r0, #2
 80063f0:	07da      	lsls	r2, r3, #31
 80063f2:	d402      	bmi.n	80063fa <__lo0bits+0x4e>
 80063f4:	085b      	lsrs	r3, r3, #1
 80063f6:	d006      	beq.n	8006406 <__lo0bits+0x5a>
 80063f8:	3001      	adds	r0, #1
 80063fa:	600b      	str	r3, [r1, #0]
 80063fc:	4770      	bx	lr
 80063fe:	4610      	mov	r0, r2
 8006400:	e7e9      	b.n	80063d6 <__lo0bits+0x2a>
 8006402:	2000      	movs	r0, #0
 8006404:	4770      	bx	lr
 8006406:	2020      	movs	r0, #32
 8006408:	4770      	bx	lr

0800640a <__i2b>:
 800640a:	b510      	push	{r4, lr}
 800640c:	460c      	mov	r4, r1
 800640e:	2101      	movs	r1, #1
 8006410:	f7ff ff27 	bl	8006262 <_Balloc>
 8006414:	2201      	movs	r2, #1
 8006416:	6144      	str	r4, [r0, #20]
 8006418:	6102      	str	r2, [r0, #16]
 800641a:	bd10      	pop	{r4, pc}

0800641c <__multiply>:
 800641c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006420:	4614      	mov	r4, r2
 8006422:	690a      	ldr	r2, [r1, #16]
 8006424:	6923      	ldr	r3, [r4, #16]
 8006426:	429a      	cmp	r2, r3
 8006428:	bfb8      	it	lt
 800642a:	460b      	movlt	r3, r1
 800642c:	4688      	mov	r8, r1
 800642e:	bfbc      	itt	lt
 8006430:	46a0      	movlt	r8, r4
 8006432:	461c      	movlt	r4, r3
 8006434:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006438:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800643c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006440:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006444:	eb07 0609 	add.w	r6, r7, r9
 8006448:	42b3      	cmp	r3, r6
 800644a:	bfb8      	it	lt
 800644c:	3101      	addlt	r1, #1
 800644e:	f7ff ff08 	bl	8006262 <_Balloc>
 8006452:	f100 0514 	add.w	r5, r0, #20
 8006456:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800645a:	462b      	mov	r3, r5
 800645c:	2200      	movs	r2, #0
 800645e:	4573      	cmp	r3, lr
 8006460:	d316      	bcc.n	8006490 <__multiply+0x74>
 8006462:	f104 0214 	add.w	r2, r4, #20
 8006466:	f108 0114 	add.w	r1, r8, #20
 800646a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800646e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	9b00      	ldr	r3, [sp, #0]
 8006476:	9201      	str	r2, [sp, #4]
 8006478:	4293      	cmp	r3, r2
 800647a:	d80c      	bhi.n	8006496 <__multiply+0x7a>
 800647c:	2e00      	cmp	r6, #0
 800647e:	dd03      	ble.n	8006488 <__multiply+0x6c>
 8006480:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05d      	beq.n	8006544 <__multiply+0x128>
 8006488:	6106      	str	r6, [r0, #16]
 800648a:	b003      	add	sp, #12
 800648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006490:	f843 2b04 	str.w	r2, [r3], #4
 8006494:	e7e3      	b.n	800645e <__multiply+0x42>
 8006496:	f8b2 b000 	ldrh.w	fp, [r2]
 800649a:	f1bb 0f00 	cmp.w	fp, #0
 800649e:	d023      	beq.n	80064e8 <__multiply+0xcc>
 80064a0:	4689      	mov	r9, r1
 80064a2:	46ac      	mov	ip, r5
 80064a4:	f04f 0800 	mov.w	r8, #0
 80064a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80064ac:	f8dc a000 	ldr.w	sl, [ip]
 80064b0:	b2a3      	uxth	r3, r4
 80064b2:	fa1f fa8a 	uxth.w	sl, sl
 80064b6:	fb0b a303 	mla	r3, fp, r3, sl
 80064ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80064be:	f8dc 4000 	ldr.w	r4, [ip]
 80064c2:	4443      	add	r3, r8
 80064c4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80064c8:	fb0b 840a 	mla	r4, fp, sl, r8
 80064cc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80064d0:	46e2      	mov	sl, ip
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80064d8:	454f      	cmp	r7, r9
 80064da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80064de:	f84a 3b04 	str.w	r3, [sl], #4
 80064e2:	d82b      	bhi.n	800653c <__multiply+0x120>
 80064e4:	f8cc 8004 	str.w	r8, [ip, #4]
 80064e8:	9b01      	ldr	r3, [sp, #4]
 80064ea:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80064ee:	3204      	adds	r2, #4
 80064f0:	f1ba 0f00 	cmp.w	sl, #0
 80064f4:	d020      	beq.n	8006538 <__multiply+0x11c>
 80064f6:	682b      	ldr	r3, [r5, #0]
 80064f8:	4689      	mov	r9, r1
 80064fa:	46a8      	mov	r8, r5
 80064fc:	f04f 0b00 	mov.w	fp, #0
 8006500:	f8b9 c000 	ldrh.w	ip, [r9]
 8006504:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006508:	fb0a 440c 	mla	r4, sl, ip, r4
 800650c:	445c      	add	r4, fp
 800650e:	46c4      	mov	ip, r8
 8006510:	b29b      	uxth	r3, r3
 8006512:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006516:	f84c 3b04 	str.w	r3, [ip], #4
 800651a:	f859 3b04 	ldr.w	r3, [r9], #4
 800651e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006522:	0c1b      	lsrs	r3, r3, #16
 8006524:	fb0a b303 	mla	r3, sl, r3, fp
 8006528:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800652c:	454f      	cmp	r7, r9
 800652e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006532:	d805      	bhi.n	8006540 <__multiply+0x124>
 8006534:	f8c8 3004 	str.w	r3, [r8, #4]
 8006538:	3504      	adds	r5, #4
 800653a:	e79b      	b.n	8006474 <__multiply+0x58>
 800653c:	46d4      	mov	ip, sl
 800653e:	e7b3      	b.n	80064a8 <__multiply+0x8c>
 8006540:	46e0      	mov	r8, ip
 8006542:	e7dd      	b.n	8006500 <__multiply+0xe4>
 8006544:	3e01      	subs	r6, #1
 8006546:	e799      	b.n	800647c <__multiply+0x60>

08006548 <__pow5mult>:
 8006548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800654c:	4615      	mov	r5, r2
 800654e:	f012 0203 	ands.w	r2, r2, #3
 8006552:	4606      	mov	r6, r0
 8006554:	460f      	mov	r7, r1
 8006556:	d007      	beq.n	8006568 <__pow5mult+0x20>
 8006558:	3a01      	subs	r2, #1
 800655a:	4c21      	ldr	r4, [pc, #132]	; (80065e0 <__pow5mult+0x98>)
 800655c:	2300      	movs	r3, #0
 800655e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006562:	f7ff fec9 	bl	80062f8 <__multadd>
 8006566:	4607      	mov	r7, r0
 8006568:	10ad      	asrs	r5, r5, #2
 800656a:	d035      	beq.n	80065d8 <__pow5mult+0x90>
 800656c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800656e:	b93c      	cbnz	r4, 8006580 <__pow5mult+0x38>
 8006570:	2010      	movs	r0, #16
 8006572:	f7ff fe63 	bl	800623c <malloc>
 8006576:	6270      	str	r0, [r6, #36]	; 0x24
 8006578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800657c:	6004      	str	r4, [r0, #0]
 800657e:	60c4      	str	r4, [r0, #12]
 8006580:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006588:	b94c      	cbnz	r4, 800659e <__pow5mult+0x56>
 800658a:	f240 2171 	movw	r1, #625	; 0x271
 800658e:	4630      	mov	r0, r6
 8006590:	f7ff ff3b 	bl	800640a <__i2b>
 8006594:	2300      	movs	r3, #0
 8006596:	f8c8 0008 	str.w	r0, [r8, #8]
 800659a:	4604      	mov	r4, r0
 800659c:	6003      	str	r3, [r0, #0]
 800659e:	f04f 0800 	mov.w	r8, #0
 80065a2:	07eb      	lsls	r3, r5, #31
 80065a4:	d50a      	bpl.n	80065bc <__pow5mult+0x74>
 80065a6:	4639      	mov	r1, r7
 80065a8:	4622      	mov	r2, r4
 80065aa:	4630      	mov	r0, r6
 80065ac:	f7ff ff36 	bl	800641c <__multiply>
 80065b0:	4639      	mov	r1, r7
 80065b2:	4681      	mov	r9, r0
 80065b4:	4630      	mov	r0, r6
 80065b6:	f7ff fe88 	bl	80062ca <_Bfree>
 80065ba:	464f      	mov	r7, r9
 80065bc:	106d      	asrs	r5, r5, #1
 80065be:	d00b      	beq.n	80065d8 <__pow5mult+0x90>
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	b938      	cbnz	r0, 80065d4 <__pow5mult+0x8c>
 80065c4:	4622      	mov	r2, r4
 80065c6:	4621      	mov	r1, r4
 80065c8:	4630      	mov	r0, r6
 80065ca:	f7ff ff27 	bl	800641c <__multiply>
 80065ce:	6020      	str	r0, [r4, #0]
 80065d0:	f8c0 8000 	str.w	r8, [r0]
 80065d4:	4604      	mov	r4, r0
 80065d6:	e7e4      	b.n	80065a2 <__pow5mult+0x5a>
 80065d8:	4638      	mov	r0, r7
 80065da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065de:	bf00      	nop
 80065e0:	08006eb0 	.word	0x08006eb0

080065e4 <__lshift>:
 80065e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e8:	460c      	mov	r4, r1
 80065ea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065ee:	6923      	ldr	r3, [r4, #16]
 80065f0:	6849      	ldr	r1, [r1, #4]
 80065f2:	eb0a 0903 	add.w	r9, sl, r3
 80065f6:	68a3      	ldr	r3, [r4, #8]
 80065f8:	4607      	mov	r7, r0
 80065fa:	4616      	mov	r6, r2
 80065fc:	f109 0501 	add.w	r5, r9, #1
 8006600:	42ab      	cmp	r3, r5
 8006602:	db32      	blt.n	800666a <__lshift+0x86>
 8006604:	4638      	mov	r0, r7
 8006606:	f7ff fe2c 	bl	8006262 <_Balloc>
 800660a:	2300      	movs	r3, #0
 800660c:	4680      	mov	r8, r0
 800660e:	f100 0114 	add.w	r1, r0, #20
 8006612:	461a      	mov	r2, r3
 8006614:	4553      	cmp	r3, sl
 8006616:	db2b      	blt.n	8006670 <__lshift+0x8c>
 8006618:	6920      	ldr	r0, [r4, #16]
 800661a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800661e:	f104 0314 	add.w	r3, r4, #20
 8006622:	f016 021f 	ands.w	r2, r6, #31
 8006626:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800662a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800662e:	d025      	beq.n	800667c <__lshift+0x98>
 8006630:	f1c2 0e20 	rsb	lr, r2, #32
 8006634:	2000      	movs	r0, #0
 8006636:	681e      	ldr	r6, [r3, #0]
 8006638:	468a      	mov	sl, r1
 800663a:	4096      	lsls	r6, r2
 800663c:	4330      	orrs	r0, r6
 800663e:	f84a 0b04 	str.w	r0, [sl], #4
 8006642:	f853 0b04 	ldr.w	r0, [r3], #4
 8006646:	459c      	cmp	ip, r3
 8006648:	fa20 f00e 	lsr.w	r0, r0, lr
 800664c:	d814      	bhi.n	8006678 <__lshift+0x94>
 800664e:	6048      	str	r0, [r1, #4]
 8006650:	b108      	cbz	r0, 8006656 <__lshift+0x72>
 8006652:	f109 0502 	add.w	r5, r9, #2
 8006656:	3d01      	subs	r5, #1
 8006658:	4638      	mov	r0, r7
 800665a:	f8c8 5010 	str.w	r5, [r8, #16]
 800665e:	4621      	mov	r1, r4
 8006660:	f7ff fe33 	bl	80062ca <_Bfree>
 8006664:	4640      	mov	r0, r8
 8006666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666a:	3101      	adds	r1, #1
 800666c:	005b      	lsls	r3, r3, #1
 800666e:	e7c7      	b.n	8006600 <__lshift+0x1c>
 8006670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006674:	3301      	adds	r3, #1
 8006676:	e7cd      	b.n	8006614 <__lshift+0x30>
 8006678:	4651      	mov	r1, sl
 800667a:	e7dc      	b.n	8006636 <__lshift+0x52>
 800667c:	3904      	subs	r1, #4
 800667e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006682:	f841 2f04 	str.w	r2, [r1, #4]!
 8006686:	459c      	cmp	ip, r3
 8006688:	d8f9      	bhi.n	800667e <__lshift+0x9a>
 800668a:	e7e4      	b.n	8006656 <__lshift+0x72>

0800668c <__mcmp>:
 800668c:	6903      	ldr	r3, [r0, #16]
 800668e:	690a      	ldr	r2, [r1, #16]
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	b530      	push	{r4, r5, lr}
 8006694:	d10c      	bne.n	80066b0 <__mcmp+0x24>
 8006696:	0092      	lsls	r2, r2, #2
 8006698:	3014      	adds	r0, #20
 800669a:	3114      	adds	r1, #20
 800669c:	1884      	adds	r4, r0, r2
 800669e:	4411      	add	r1, r2
 80066a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066a8:	4295      	cmp	r5, r2
 80066aa:	d003      	beq.n	80066b4 <__mcmp+0x28>
 80066ac:	d305      	bcc.n	80066ba <__mcmp+0x2e>
 80066ae:	2301      	movs	r3, #1
 80066b0:	4618      	mov	r0, r3
 80066b2:	bd30      	pop	{r4, r5, pc}
 80066b4:	42a0      	cmp	r0, r4
 80066b6:	d3f3      	bcc.n	80066a0 <__mcmp+0x14>
 80066b8:	e7fa      	b.n	80066b0 <__mcmp+0x24>
 80066ba:	f04f 33ff 	mov.w	r3, #4294967295
 80066be:	e7f7      	b.n	80066b0 <__mcmp+0x24>

080066c0 <__mdiff>:
 80066c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c4:	460d      	mov	r5, r1
 80066c6:	4607      	mov	r7, r0
 80066c8:	4611      	mov	r1, r2
 80066ca:	4628      	mov	r0, r5
 80066cc:	4614      	mov	r4, r2
 80066ce:	f7ff ffdd 	bl	800668c <__mcmp>
 80066d2:	1e06      	subs	r6, r0, #0
 80066d4:	d108      	bne.n	80066e8 <__mdiff+0x28>
 80066d6:	4631      	mov	r1, r6
 80066d8:	4638      	mov	r0, r7
 80066da:	f7ff fdc2 	bl	8006262 <_Balloc>
 80066de:	2301      	movs	r3, #1
 80066e0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80066e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e8:	bfa4      	itt	ge
 80066ea:	4623      	movge	r3, r4
 80066ec:	462c      	movge	r4, r5
 80066ee:	4638      	mov	r0, r7
 80066f0:	6861      	ldr	r1, [r4, #4]
 80066f2:	bfa6      	itte	ge
 80066f4:	461d      	movge	r5, r3
 80066f6:	2600      	movge	r6, #0
 80066f8:	2601      	movlt	r6, #1
 80066fa:	f7ff fdb2 	bl	8006262 <_Balloc>
 80066fe:	692b      	ldr	r3, [r5, #16]
 8006700:	60c6      	str	r6, [r0, #12]
 8006702:	6926      	ldr	r6, [r4, #16]
 8006704:	f105 0914 	add.w	r9, r5, #20
 8006708:	f104 0214 	add.w	r2, r4, #20
 800670c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006710:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006714:	f100 0514 	add.w	r5, r0, #20
 8006718:	f04f 0e00 	mov.w	lr, #0
 800671c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006720:	f859 4b04 	ldr.w	r4, [r9], #4
 8006724:	fa1e f18a 	uxtah	r1, lr, sl
 8006728:	b2a3      	uxth	r3, r4
 800672a:	1ac9      	subs	r1, r1, r3
 800672c:	0c23      	lsrs	r3, r4, #16
 800672e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006732:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006736:	b289      	uxth	r1, r1
 8006738:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800673c:	45c8      	cmp	r8, r9
 800673e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006742:	4694      	mov	ip, r2
 8006744:	f845 3b04 	str.w	r3, [r5], #4
 8006748:	d8e8      	bhi.n	800671c <__mdiff+0x5c>
 800674a:	45bc      	cmp	ip, r7
 800674c:	d304      	bcc.n	8006758 <__mdiff+0x98>
 800674e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006752:	b183      	cbz	r3, 8006776 <__mdiff+0xb6>
 8006754:	6106      	str	r6, [r0, #16]
 8006756:	e7c5      	b.n	80066e4 <__mdiff+0x24>
 8006758:	f85c 1b04 	ldr.w	r1, [ip], #4
 800675c:	fa1e f381 	uxtah	r3, lr, r1
 8006760:	141a      	asrs	r2, r3, #16
 8006762:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006766:	b29b      	uxth	r3, r3
 8006768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800676c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006770:	f845 3b04 	str.w	r3, [r5], #4
 8006774:	e7e9      	b.n	800674a <__mdiff+0x8a>
 8006776:	3e01      	subs	r6, #1
 8006778:	e7e9      	b.n	800674e <__mdiff+0x8e>

0800677a <__d2b>:
 800677a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800677e:	460e      	mov	r6, r1
 8006780:	2101      	movs	r1, #1
 8006782:	ec59 8b10 	vmov	r8, r9, d0
 8006786:	4615      	mov	r5, r2
 8006788:	f7ff fd6b 	bl	8006262 <_Balloc>
 800678c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006790:	4607      	mov	r7, r0
 8006792:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006796:	bb34      	cbnz	r4, 80067e6 <__d2b+0x6c>
 8006798:	9301      	str	r3, [sp, #4]
 800679a:	f1b8 0300 	subs.w	r3, r8, #0
 800679e:	d027      	beq.n	80067f0 <__d2b+0x76>
 80067a0:	a802      	add	r0, sp, #8
 80067a2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80067a6:	f7ff fe01 	bl	80063ac <__lo0bits>
 80067aa:	9900      	ldr	r1, [sp, #0]
 80067ac:	b1f0      	cbz	r0, 80067ec <__d2b+0x72>
 80067ae:	9a01      	ldr	r2, [sp, #4]
 80067b0:	f1c0 0320 	rsb	r3, r0, #32
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	430b      	orrs	r3, r1
 80067ba:	40c2      	lsrs	r2, r0
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	9201      	str	r2, [sp, #4]
 80067c0:	9b01      	ldr	r3, [sp, #4]
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bf14      	ite	ne
 80067c8:	2102      	movne	r1, #2
 80067ca:	2101      	moveq	r1, #1
 80067cc:	6139      	str	r1, [r7, #16]
 80067ce:	b1c4      	cbz	r4, 8006802 <__d2b+0x88>
 80067d0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80067d4:	4404      	add	r4, r0
 80067d6:	6034      	str	r4, [r6, #0]
 80067d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067dc:	6028      	str	r0, [r5, #0]
 80067de:	4638      	mov	r0, r7
 80067e0:	b003      	add	sp, #12
 80067e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ea:	e7d5      	b.n	8006798 <__d2b+0x1e>
 80067ec:	6179      	str	r1, [r7, #20]
 80067ee:	e7e7      	b.n	80067c0 <__d2b+0x46>
 80067f0:	a801      	add	r0, sp, #4
 80067f2:	f7ff fddb 	bl	80063ac <__lo0bits>
 80067f6:	9b01      	ldr	r3, [sp, #4]
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	2101      	movs	r1, #1
 80067fc:	6139      	str	r1, [r7, #16]
 80067fe:	3020      	adds	r0, #32
 8006800:	e7e5      	b.n	80067ce <__d2b+0x54>
 8006802:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006806:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800680a:	6030      	str	r0, [r6, #0]
 800680c:	6918      	ldr	r0, [r3, #16]
 800680e:	f7ff fdae 	bl	800636e <__hi0bits>
 8006812:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006816:	e7e1      	b.n	80067dc <__d2b+0x62>

08006818 <_calloc_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	fb02 f401 	mul.w	r4, r2, r1
 800681e:	4621      	mov	r1, r4
 8006820:	f000 f856 	bl	80068d0 <_malloc_r>
 8006824:	4605      	mov	r5, r0
 8006826:	b118      	cbz	r0, 8006830 <_calloc_r+0x18>
 8006828:	4622      	mov	r2, r4
 800682a:	2100      	movs	r1, #0
 800682c:	f7fe fa30 	bl	8004c90 <memset>
 8006830:	4628      	mov	r0, r5
 8006832:	bd38      	pop	{r3, r4, r5, pc}

08006834 <_free_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4605      	mov	r5, r0
 8006838:	2900      	cmp	r1, #0
 800683a:	d045      	beq.n	80068c8 <_free_r+0x94>
 800683c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006840:	1f0c      	subs	r4, r1, #4
 8006842:	2b00      	cmp	r3, #0
 8006844:	bfb8      	it	lt
 8006846:	18e4      	addlt	r4, r4, r3
 8006848:	f000 fa29 	bl	8006c9e <__malloc_lock>
 800684c:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <_free_r+0x98>)
 800684e:	6813      	ldr	r3, [r2, #0]
 8006850:	4610      	mov	r0, r2
 8006852:	b933      	cbnz	r3, 8006862 <_free_r+0x2e>
 8006854:	6063      	str	r3, [r4, #4]
 8006856:	6014      	str	r4, [r2, #0]
 8006858:	4628      	mov	r0, r5
 800685a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800685e:	f000 ba1f 	b.w	8006ca0 <__malloc_unlock>
 8006862:	42a3      	cmp	r3, r4
 8006864:	d90c      	bls.n	8006880 <_free_r+0x4c>
 8006866:	6821      	ldr	r1, [r4, #0]
 8006868:	1862      	adds	r2, r4, r1
 800686a:	4293      	cmp	r3, r2
 800686c:	bf04      	itt	eq
 800686e:	681a      	ldreq	r2, [r3, #0]
 8006870:	685b      	ldreq	r3, [r3, #4]
 8006872:	6063      	str	r3, [r4, #4]
 8006874:	bf04      	itt	eq
 8006876:	1852      	addeq	r2, r2, r1
 8006878:	6022      	streq	r2, [r4, #0]
 800687a:	6004      	str	r4, [r0, #0]
 800687c:	e7ec      	b.n	8006858 <_free_r+0x24>
 800687e:	4613      	mov	r3, r2
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	b10a      	cbz	r2, 8006888 <_free_r+0x54>
 8006884:	42a2      	cmp	r2, r4
 8006886:	d9fa      	bls.n	800687e <_free_r+0x4a>
 8006888:	6819      	ldr	r1, [r3, #0]
 800688a:	1858      	adds	r0, r3, r1
 800688c:	42a0      	cmp	r0, r4
 800688e:	d10b      	bne.n	80068a8 <_free_r+0x74>
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	4401      	add	r1, r0
 8006894:	1858      	adds	r0, r3, r1
 8006896:	4282      	cmp	r2, r0
 8006898:	6019      	str	r1, [r3, #0]
 800689a:	d1dd      	bne.n	8006858 <_free_r+0x24>
 800689c:	6810      	ldr	r0, [r2, #0]
 800689e:	6852      	ldr	r2, [r2, #4]
 80068a0:	605a      	str	r2, [r3, #4]
 80068a2:	4401      	add	r1, r0
 80068a4:	6019      	str	r1, [r3, #0]
 80068a6:	e7d7      	b.n	8006858 <_free_r+0x24>
 80068a8:	d902      	bls.n	80068b0 <_free_r+0x7c>
 80068aa:	230c      	movs	r3, #12
 80068ac:	602b      	str	r3, [r5, #0]
 80068ae:	e7d3      	b.n	8006858 <_free_r+0x24>
 80068b0:	6820      	ldr	r0, [r4, #0]
 80068b2:	1821      	adds	r1, r4, r0
 80068b4:	428a      	cmp	r2, r1
 80068b6:	bf04      	itt	eq
 80068b8:	6811      	ldreq	r1, [r2, #0]
 80068ba:	6852      	ldreq	r2, [r2, #4]
 80068bc:	6062      	str	r2, [r4, #4]
 80068be:	bf04      	itt	eq
 80068c0:	1809      	addeq	r1, r1, r0
 80068c2:	6021      	streq	r1, [r4, #0]
 80068c4:	605c      	str	r4, [r3, #4]
 80068c6:	e7c7      	b.n	8006858 <_free_r+0x24>
 80068c8:	bd38      	pop	{r3, r4, r5, pc}
 80068ca:	bf00      	nop
 80068cc:	200001fc 	.word	0x200001fc

080068d0 <_malloc_r>:
 80068d0:	b570      	push	{r4, r5, r6, lr}
 80068d2:	1ccd      	adds	r5, r1, #3
 80068d4:	f025 0503 	bic.w	r5, r5, #3
 80068d8:	3508      	adds	r5, #8
 80068da:	2d0c      	cmp	r5, #12
 80068dc:	bf38      	it	cc
 80068de:	250c      	movcc	r5, #12
 80068e0:	2d00      	cmp	r5, #0
 80068e2:	4606      	mov	r6, r0
 80068e4:	db01      	blt.n	80068ea <_malloc_r+0x1a>
 80068e6:	42a9      	cmp	r1, r5
 80068e8:	d903      	bls.n	80068f2 <_malloc_r+0x22>
 80068ea:	230c      	movs	r3, #12
 80068ec:	6033      	str	r3, [r6, #0]
 80068ee:	2000      	movs	r0, #0
 80068f0:	bd70      	pop	{r4, r5, r6, pc}
 80068f2:	f000 f9d4 	bl	8006c9e <__malloc_lock>
 80068f6:	4a21      	ldr	r2, [pc, #132]	; (800697c <_malloc_r+0xac>)
 80068f8:	6814      	ldr	r4, [r2, #0]
 80068fa:	4621      	mov	r1, r4
 80068fc:	b991      	cbnz	r1, 8006924 <_malloc_r+0x54>
 80068fe:	4c20      	ldr	r4, [pc, #128]	; (8006980 <_malloc_r+0xb0>)
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	b91b      	cbnz	r3, 800690c <_malloc_r+0x3c>
 8006904:	4630      	mov	r0, r6
 8006906:	f000 f98f 	bl	8006c28 <_sbrk_r>
 800690a:	6020      	str	r0, [r4, #0]
 800690c:	4629      	mov	r1, r5
 800690e:	4630      	mov	r0, r6
 8006910:	f000 f98a 	bl	8006c28 <_sbrk_r>
 8006914:	1c43      	adds	r3, r0, #1
 8006916:	d124      	bne.n	8006962 <_malloc_r+0x92>
 8006918:	230c      	movs	r3, #12
 800691a:	6033      	str	r3, [r6, #0]
 800691c:	4630      	mov	r0, r6
 800691e:	f000 f9bf 	bl	8006ca0 <__malloc_unlock>
 8006922:	e7e4      	b.n	80068ee <_malloc_r+0x1e>
 8006924:	680b      	ldr	r3, [r1, #0]
 8006926:	1b5b      	subs	r3, r3, r5
 8006928:	d418      	bmi.n	800695c <_malloc_r+0x8c>
 800692a:	2b0b      	cmp	r3, #11
 800692c:	d90f      	bls.n	800694e <_malloc_r+0x7e>
 800692e:	600b      	str	r3, [r1, #0]
 8006930:	50cd      	str	r5, [r1, r3]
 8006932:	18cc      	adds	r4, r1, r3
 8006934:	4630      	mov	r0, r6
 8006936:	f000 f9b3 	bl	8006ca0 <__malloc_unlock>
 800693a:	f104 000b 	add.w	r0, r4, #11
 800693e:	1d23      	adds	r3, r4, #4
 8006940:	f020 0007 	bic.w	r0, r0, #7
 8006944:	1ac3      	subs	r3, r0, r3
 8006946:	d0d3      	beq.n	80068f0 <_malloc_r+0x20>
 8006948:	425a      	negs	r2, r3
 800694a:	50e2      	str	r2, [r4, r3]
 800694c:	e7d0      	b.n	80068f0 <_malloc_r+0x20>
 800694e:	428c      	cmp	r4, r1
 8006950:	684b      	ldr	r3, [r1, #4]
 8006952:	bf16      	itet	ne
 8006954:	6063      	strne	r3, [r4, #4]
 8006956:	6013      	streq	r3, [r2, #0]
 8006958:	460c      	movne	r4, r1
 800695a:	e7eb      	b.n	8006934 <_malloc_r+0x64>
 800695c:	460c      	mov	r4, r1
 800695e:	6849      	ldr	r1, [r1, #4]
 8006960:	e7cc      	b.n	80068fc <_malloc_r+0x2c>
 8006962:	1cc4      	adds	r4, r0, #3
 8006964:	f024 0403 	bic.w	r4, r4, #3
 8006968:	42a0      	cmp	r0, r4
 800696a:	d005      	beq.n	8006978 <_malloc_r+0xa8>
 800696c:	1a21      	subs	r1, r4, r0
 800696e:	4630      	mov	r0, r6
 8006970:	f000 f95a 	bl	8006c28 <_sbrk_r>
 8006974:	3001      	adds	r0, #1
 8006976:	d0cf      	beq.n	8006918 <_malloc_r+0x48>
 8006978:	6025      	str	r5, [r4, #0]
 800697a:	e7db      	b.n	8006934 <_malloc_r+0x64>
 800697c:	200001fc 	.word	0x200001fc
 8006980:	20000200 	.word	0x20000200

08006984 <__ssputs_r>:
 8006984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	688e      	ldr	r6, [r1, #8]
 800698a:	429e      	cmp	r6, r3
 800698c:	4682      	mov	sl, r0
 800698e:	460c      	mov	r4, r1
 8006990:	4690      	mov	r8, r2
 8006992:	4699      	mov	r9, r3
 8006994:	d837      	bhi.n	8006a06 <__ssputs_r+0x82>
 8006996:	898a      	ldrh	r2, [r1, #12]
 8006998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800699c:	d031      	beq.n	8006a02 <__ssputs_r+0x7e>
 800699e:	6825      	ldr	r5, [r4, #0]
 80069a0:	6909      	ldr	r1, [r1, #16]
 80069a2:	1a6f      	subs	r7, r5, r1
 80069a4:	6965      	ldr	r5, [r4, #20]
 80069a6:	2302      	movs	r3, #2
 80069a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80069b0:	f109 0301 	add.w	r3, r9, #1
 80069b4:	443b      	add	r3, r7
 80069b6:	429d      	cmp	r5, r3
 80069b8:	bf38      	it	cc
 80069ba:	461d      	movcc	r5, r3
 80069bc:	0553      	lsls	r3, r2, #21
 80069be:	d530      	bpl.n	8006a22 <__ssputs_r+0x9e>
 80069c0:	4629      	mov	r1, r5
 80069c2:	f7ff ff85 	bl	80068d0 <_malloc_r>
 80069c6:	4606      	mov	r6, r0
 80069c8:	b950      	cbnz	r0, 80069e0 <__ssputs_r+0x5c>
 80069ca:	230c      	movs	r3, #12
 80069cc:	f8ca 3000 	str.w	r3, [sl]
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d6:	81a3      	strh	r3, [r4, #12]
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e0:	463a      	mov	r2, r7
 80069e2:	6921      	ldr	r1, [r4, #16]
 80069e4:	f7ff fc32 	bl	800624c <memcpy>
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f2:	81a3      	strh	r3, [r4, #12]
 80069f4:	6126      	str	r6, [r4, #16]
 80069f6:	6165      	str	r5, [r4, #20]
 80069f8:	443e      	add	r6, r7
 80069fa:	1bed      	subs	r5, r5, r7
 80069fc:	6026      	str	r6, [r4, #0]
 80069fe:	60a5      	str	r5, [r4, #8]
 8006a00:	464e      	mov	r6, r9
 8006a02:	454e      	cmp	r6, r9
 8006a04:	d900      	bls.n	8006a08 <__ssputs_r+0x84>
 8006a06:	464e      	mov	r6, r9
 8006a08:	4632      	mov	r2, r6
 8006a0a:	4641      	mov	r1, r8
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	f000 f92d 	bl	8006c6c <memmove>
 8006a12:	68a3      	ldr	r3, [r4, #8]
 8006a14:	1b9b      	subs	r3, r3, r6
 8006a16:	60a3      	str	r3, [r4, #8]
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	441e      	add	r6, r3
 8006a1c:	6026      	str	r6, [r4, #0]
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e7dc      	b.n	80069dc <__ssputs_r+0x58>
 8006a22:	462a      	mov	r2, r5
 8006a24:	f000 f93d 	bl	8006ca2 <_realloc_r>
 8006a28:	4606      	mov	r6, r0
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d1e2      	bne.n	80069f4 <__ssputs_r+0x70>
 8006a2e:	6921      	ldr	r1, [r4, #16]
 8006a30:	4650      	mov	r0, sl
 8006a32:	f7ff feff 	bl	8006834 <_free_r>
 8006a36:	e7c8      	b.n	80069ca <__ssputs_r+0x46>

08006a38 <_svfiprintf_r>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	461d      	mov	r5, r3
 8006a3e:	898b      	ldrh	r3, [r1, #12]
 8006a40:	061f      	lsls	r7, r3, #24
 8006a42:	b09d      	sub	sp, #116	; 0x74
 8006a44:	4680      	mov	r8, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	4616      	mov	r6, r2
 8006a4a:	d50f      	bpl.n	8006a6c <_svfiprintf_r+0x34>
 8006a4c:	690b      	ldr	r3, [r1, #16]
 8006a4e:	b96b      	cbnz	r3, 8006a6c <_svfiprintf_r+0x34>
 8006a50:	2140      	movs	r1, #64	; 0x40
 8006a52:	f7ff ff3d 	bl	80068d0 <_malloc_r>
 8006a56:	6020      	str	r0, [r4, #0]
 8006a58:	6120      	str	r0, [r4, #16]
 8006a5a:	b928      	cbnz	r0, 8006a68 <_svfiprintf_r+0x30>
 8006a5c:	230c      	movs	r3, #12
 8006a5e:	f8c8 3000 	str.w	r3, [r8]
 8006a62:	f04f 30ff 	mov.w	r0, #4294967295
 8006a66:	e0c8      	b.n	8006bfa <_svfiprintf_r+0x1c2>
 8006a68:	2340      	movs	r3, #64	; 0x40
 8006a6a:	6163      	str	r3, [r4, #20]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006a70:	2320      	movs	r3, #32
 8006a72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a76:	2330      	movs	r3, #48	; 0x30
 8006a78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a7c:	9503      	str	r5, [sp, #12]
 8006a7e:	f04f 0b01 	mov.w	fp, #1
 8006a82:	4637      	mov	r7, r6
 8006a84:	463d      	mov	r5, r7
 8006a86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a8a:	b10b      	cbz	r3, 8006a90 <_svfiprintf_r+0x58>
 8006a8c:	2b25      	cmp	r3, #37	; 0x25
 8006a8e:	d13e      	bne.n	8006b0e <_svfiprintf_r+0xd6>
 8006a90:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a94:	d00b      	beq.n	8006aae <_svfiprintf_r+0x76>
 8006a96:	4653      	mov	r3, sl
 8006a98:	4632      	mov	r2, r6
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	f7ff ff71 	bl	8006984 <__ssputs_r>
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	f000 80a4 	beq.w	8006bf0 <_svfiprintf_r+0x1b8>
 8006aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aaa:	4453      	add	r3, sl
 8006aac:	9309      	str	r3, [sp, #36]	; 0x24
 8006aae:	783b      	ldrb	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 809d 	beq.w	8006bf0 <_svfiprintf_r+0x1b8>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8006abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ac0:	9304      	str	r3, [sp, #16]
 8006ac2:	9307      	str	r3, [sp, #28]
 8006ac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ac8:	931a      	str	r3, [sp, #104]	; 0x68
 8006aca:	462f      	mov	r7, r5
 8006acc:	2205      	movs	r2, #5
 8006ace:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006ad2:	4850      	ldr	r0, [pc, #320]	; (8006c14 <_svfiprintf_r+0x1dc>)
 8006ad4:	f7f9 fb84 	bl	80001e0 <memchr>
 8006ad8:	9b04      	ldr	r3, [sp, #16]
 8006ada:	b9d0      	cbnz	r0, 8006b12 <_svfiprintf_r+0xda>
 8006adc:	06d9      	lsls	r1, r3, #27
 8006ade:	bf44      	itt	mi
 8006ae0:	2220      	movmi	r2, #32
 8006ae2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ae6:	071a      	lsls	r2, r3, #28
 8006ae8:	bf44      	itt	mi
 8006aea:	222b      	movmi	r2, #43	; 0x2b
 8006aec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006af0:	782a      	ldrb	r2, [r5, #0]
 8006af2:	2a2a      	cmp	r2, #42	; 0x2a
 8006af4:	d015      	beq.n	8006b22 <_svfiprintf_r+0xea>
 8006af6:	9a07      	ldr	r2, [sp, #28]
 8006af8:	462f      	mov	r7, r5
 8006afa:	2000      	movs	r0, #0
 8006afc:	250a      	movs	r5, #10
 8006afe:	4639      	mov	r1, r7
 8006b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b04:	3b30      	subs	r3, #48	; 0x30
 8006b06:	2b09      	cmp	r3, #9
 8006b08:	d94d      	bls.n	8006ba6 <_svfiprintf_r+0x16e>
 8006b0a:	b1b8      	cbz	r0, 8006b3c <_svfiprintf_r+0x104>
 8006b0c:	e00f      	b.n	8006b2e <_svfiprintf_r+0xf6>
 8006b0e:	462f      	mov	r7, r5
 8006b10:	e7b8      	b.n	8006a84 <_svfiprintf_r+0x4c>
 8006b12:	4a40      	ldr	r2, [pc, #256]	; (8006c14 <_svfiprintf_r+0x1dc>)
 8006b14:	1a80      	subs	r0, r0, r2
 8006b16:	fa0b f000 	lsl.w	r0, fp, r0
 8006b1a:	4318      	orrs	r0, r3
 8006b1c:	9004      	str	r0, [sp, #16]
 8006b1e:	463d      	mov	r5, r7
 8006b20:	e7d3      	b.n	8006aca <_svfiprintf_r+0x92>
 8006b22:	9a03      	ldr	r2, [sp, #12]
 8006b24:	1d11      	adds	r1, r2, #4
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	9103      	str	r1, [sp, #12]
 8006b2a:	2a00      	cmp	r2, #0
 8006b2c:	db01      	blt.n	8006b32 <_svfiprintf_r+0xfa>
 8006b2e:	9207      	str	r2, [sp, #28]
 8006b30:	e004      	b.n	8006b3c <_svfiprintf_r+0x104>
 8006b32:	4252      	negs	r2, r2
 8006b34:	f043 0302 	orr.w	r3, r3, #2
 8006b38:	9207      	str	r2, [sp, #28]
 8006b3a:	9304      	str	r3, [sp, #16]
 8006b3c:	783b      	ldrb	r3, [r7, #0]
 8006b3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b40:	d10c      	bne.n	8006b5c <_svfiprintf_r+0x124>
 8006b42:	787b      	ldrb	r3, [r7, #1]
 8006b44:	2b2a      	cmp	r3, #42	; 0x2a
 8006b46:	d133      	bne.n	8006bb0 <_svfiprintf_r+0x178>
 8006b48:	9b03      	ldr	r3, [sp, #12]
 8006b4a:	1d1a      	adds	r2, r3, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	9203      	str	r2, [sp, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	bfb8      	it	lt
 8006b54:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b58:	3702      	adds	r7, #2
 8006b5a:	9305      	str	r3, [sp, #20]
 8006b5c:	4d2e      	ldr	r5, [pc, #184]	; (8006c18 <_svfiprintf_r+0x1e0>)
 8006b5e:	7839      	ldrb	r1, [r7, #0]
 8006b60:	2203      	movs	r2, #3
 8006b62:	4628      	mov	r0, r5
 8006b64:	f7f9 fb3c 	bl	80001e0 <memchr>
 8006b68:	b138      	cbz	r0, 8006b7a <_svfiprintf_r+0x142>
 8006b6a:	2340      	movs	r3, #64	; 0x40
 8006b6c:	1b40      	subs	r0, r0, r5
 8006b6e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	4303      	orrs	r3, r0
 8006b76:	3701      	adds	r7, #1
 8006b78:	9304      	str	r3, [sp, #16]
 8006b7a:	7839      	ldrb	r1, [r7, #0]
 8006b7c:	4827      	ldr	r0, [pc, #156]	; (8006c1c <_svfiprintf_r+0x1e4>)
 8006b7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b82:	2206      	movs	r2, #6
 8006b84:	1c7e      	adds	r6, r7, #1
 8006b86:	f7f9 fb2b 	bl	80001e0 <memchr>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d038      	beq.n	8006c00 <_svfiprintf_r+0x1c8>
 8006b8e:	4b24      	ldr	r3, [pc, #144]	; (8006c20 <_svfiprintf_r+0x1e8>)
 8006b90:	bb13      	cbnz	r3, 8006bd8 <_svfiprintf_r+0x1a0>
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	3307      	adds	r3, #7
 8006b96:	f023 0307 	bic.w	r3, r3, #7
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba0:	444b      	add	r3, r9
 8006ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba4:	e76d      	b.n	8006a82 <_svfiprintf_r+0x4a>
 8006ba6:	fb05 3202 	mla	r2, r5, r2, r3
 8006baa:	2001      	movs	r0, #1
 8006bac:	460f      	mov	r7, r1
 8006bae:	e7a6      	b.n	8006afe <_svfiprintf_r+0xc6>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	3701      	adds	r7, #1
 8006bb4:	9305      	str	r3, [sp, #20]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	250a      	movs	r5, #10
 8006bba:	4638      	mov	r0, r7
 8006bbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc0:	3a30      	subs	r2, #48	; 0x30
 8006bc2:	2a09      	cmp	r2, #9
 8006bc4:	d903      	bls.n	8006bce <_svfiprintf_r+0x196>
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d0c8      	beq.n	8006b5c <_svfiprintf_r+0x124>
 8006bca:	9105      	str	r1, [sp, #20]
 8006bcc:	e7c6      	b.n	8006b5c <_svfiprintf_r+0x124>
 8006bce:	fb05 2101 	mla	r1, r5, r1, r2
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4607      	mov	r7, r0
 8006bd6:	e7f0      	b.n	8006bba <_svfiprintf_r+0x182>
 8006bd8:	ab03      	add	r3, sp, #12
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	4622      	mov	r2, r4
 8006bde:	4b11      	ldr	r3, [pc, #68]	; (8006c24 <_svfiprintf_r+0x1ec>)
 8006be0:	a904      	add	r1, sp, #16
 8006be2:	4640      	mov	r0, r8
 8006be4:	f7fe f8f0 	bl	8004dc8 <_printf_float>
 8006be8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006bec:	4681      	mov	r9, r0
 8006bee:	d1d6      	bne.n	8006b9e <_svfiprintf_r+0x166>
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	065b      	lsls	r3, r3, #25
 8006bf4:	f53f af35 	bmi.w	8006a62 <_svfiprintf_r+0x2a>
 8006bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bfa:	b01d      	add	sp, #116	; 0x74
 8006bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c00:	ab03      	add	r3, sp, #12
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	4622      	mov	r2, r4
 8006c06:	4b07      	ldr	r3, [pc, #28]	; (8006c24 <_svfiprintf_r+0x1ec>)
 8006c08:	a904      	add	r1, sp, #16
 8006c0a:	4640      	mov	r0, r8
 8006c0c:	f7fe fb92 	bl	8005334 <_printf_i>
 8006c10:	e7ea      	b.n	8006be8 <_svfiprintf_r+0x1b0>
 8006c12:	bf00      	nop
 8006c14:	08006ebc 	.word	0x08006ebc
 8006c18:	08006ec2 	.word	0x08006ec2
 8006c1c:	08006ec6 	.word	0x08006ec6
 8006c20:	08004dc9 	.word	0x08004dc9
 8006c24:	08006985 	.word	0x08006985

08006c28 <_sbrk_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	4c06      	ldr	r4, [pc, #24]	; (8006c44 <_sbrk_r+0x1c>)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	4605      	mov	r5, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	6023      	str	r3, [r4, #0]
 8006c34:	f7fd ff96 	bl	8004b64 <_sbrk>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_sbrk_r+0x1a>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_sbrk_r+0x1a>
 8006c40:	602b      	str	r3, [r5, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	200002dc 	.word	0x200002dc

08006c48 <__ascii_mbtowc>:
 8006c48:	b082      	sub	sp, #8
 8006c4a:	b901      	cbnz	r1, 8006c4e <__ascii_mbtowc+0x6>
 8006c4c:	a901      	add	r1, sp, #4
 8006c4e:	b142      	cbz	r2, 8006c62 <__ascii_mbtowc+0x1a>
 8006c50:	b14b      	cbz	r3, 8006c66 <__ascii_mbtowc+0x1e>
 8006c52:	7813      	ldrb	r3, [r2, #0]
 8006c54:	600b      	str	r3, [r1, #0]
 8006c56:	7812      	ldrb	r2, [r2, #0]
 8006c58:	1c10      	adds	r0, r2, #0
 8006c5a:	bf18      	it	ne
 8006c5c:	2001      	movne	r0, #1
 8006c5e:	b002      	add	sp, #8
 8006c60:	4770      	bx	lr
 8006c62:	4610      	mov	r0, r2
 8006c64:	e7fb      	b.n	8006c5e <__ascii_mbtowc+0x16>
 8006c66:	f06f 0001 	mvn.w	r0, #1
 8006c6a:	e7f8      	b.n	8006c5e <__ascii_mbtowc+0x16>

08006c6c <memmove>:
 8006c6c:	4288      	cmp	r0, r1
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	eb01 0302 	add.w	r3, r1, r2
 8006c74:	d807      	bhi.n	8006c86 <memmove+0x1a>
 8006c76:	1e42      	subs	r2, r0, #1
 8006c78:	4299      	cmp	r1, r3
 8006c7a:	d00a      	beq.n	8006c92 <memmove+0x26>
 8006c7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c80:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006c84:	e7f8      	b.n	8006c78 <memmove+0xc>
 8006c86:	4283      	cmp	r3, r0
 8006c88:	d9f5      	bls.n	8006c76 <memmove+0xa>
 8006c8a:	1881      	adds	r1, r0, r2
 8006c8c:	1ad2      	subs	r2, r2, r3
 8006c8e:	42d3      	cmn	r3, r2
 8006c90:	d100      	bne.n	8006c94 <memmove+0x28>
 8006c92:	bd10      	pop	{r4, pc}
 8006c94:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c98:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c9c:	e7f7      	b.n	8006c8e <memmove+0x22>

08006c9e <__malloc_lock>:
 8006c9e:	4770      	bx	lr

08006ca0 <__malloc_unlock>:
 8006ca0:	4770      	bx	lr

08006ca2 <_realloc_r>:
 8006ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca4:	4607      	mov	r7, r0
 8006ca6:	4614      	mov	r4, r2
 8006ca8:	460e      	mov	r6, r1
 8006caa:	b921      	cbnz	r1, 8006cb6 <_realloc_r+0x14>
 8006cac:	4611      	mov	r1, r2
 8006cae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006cb2:	f7ff be0d 	b.w	80068d0 <_malloc_r>
 8006cb6:	b922      	cbnz	r2, 8006cc2 <_realloc_r+0x20>
 8006cb8:	f7ff fdbc 	bl	8006834 <_free_r>
 8006cbc:	4625      	mov	r5, r4
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc2:	f000 f821 	bl	8006d08 <_malloc_usable_size_r>
 8006cc6:	42a0      	cmp	r0, r4
 8006cc8:	d20f      	bcs.n	8006cea <_realloc_r+0x48>
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f7ff fdff 	bl	80068d0 <_malloc_r>
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	2800      	cmp	r0, #0
 8006cd6:	d0f2      	beq.n	8006cbe <_realloc_r+0x1c>
 8006cd8:	4631      	mov	r1, r6
 8006cda:	4622      	mov	r2, r4
 8006cdc:	f7ff fab6 	bl	800624c <memcpy>
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	f7ff fda6 	bl	8006834 <_free_r>
 8006ce8:	e7e9      	b.n	8006cbe <_realloc_r+0x1c>
 8006cea:	4635      	mov	r5, r6
 8006cec:	e7e7      	b.n	8006cbe <_realloc_r+0x1c>

08006cee <__ascii_wctomb>:
 8006cee:	b149      	cbz	r1, 8006d04 <__ascii_wctomb+0x16>
 8006cf0:	2aff      	cmp	r2, #255	; 0xff
 8006cf2:	bf85      	ittet	hi
 8006cf4:	238a      	movhi	r3, #138	; 0x8a
 8006cf6:	6003      	strhi	r3, [r0, #0]
 8006cf8:	700a      	strbls	r2, [r1, #0]
 8006cfa:	f04f 30ff 	movhi.w	r0, #4294967295
 8006cfe:	bf98      	it	ls
 8006d00:	2001      	movls	r0, #1
 8006d02:	4770      	bx	lr
 8006d04:	4608      	mov	r0, r1
 8006d06:	4770      	bx	lr

08006d08 <_malloc_usable_size_r>:
 8006d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d0c:	1f18      	subs	r0, r3, #4
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bfbc      	itt	lt
 8006d12:	580b      	ldrlt	r3, [r1, r0]
 8006d14:	18c0      	addlt	r0, r0, r3
 8006d16:	4770      	bx	lr

08006d18 <_init>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	bf00      	nop
 8006d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1e:	bc08      	pop	{r3}
 8006d20:	469e      	mov	lr, r3
 8006d22:	4770      	bx	lr

08006d24 <_fini>:
 8006d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d26:	bf00      	nop
 8006d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d2a:	bc08      	pop	{r3}
 8006d2c:	469e      	mov	lr, r3
 8006d2e:	4770      	bx	lr
