
I2C_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bd4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08005d60  08005d60  00015d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb8  08005fb8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005fb8  08005fb8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fb8  08005fb8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fbc  08005fbc  00015fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  200001dc  0800619c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  0800619c  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1ef  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aca  00000000  00000000  0002a3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000810  00000000  00000000  0002bec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000728  00000000  00000000  0002c6d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019583  00000000  00000000  0002ce00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008184  00000000  00000000  00046383  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00090cc2  00000000  00000000  0004e507  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df1c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a4  00000000  00000000  000df244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005d44 	.word	0x08005d44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	08005d44 	.word	0x08005d44

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x28>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f92b 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f003 fa96 	bl	800404c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f943 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b68:	f000 f90b 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000004 	.word	0x20000004
 8000b88:	20000000 	.word	0x20000000

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000004 	.word	0x20000004
 8000bb0:	2000020c 	.word	0x2000020c

08000bb4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	2000020c 	.word	0x2000020c

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	; (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d4c:	f7ff ff8e 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff29 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff3e 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff8e 	bl	8000cc0 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff31 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffa2 	bl	8000d28 <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d005      	beq.n	8000e10 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2204      	movs	r2, #4
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
 8000e0e:	e027      	b.n	8000e60 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 020e 	bic.w	r2, r2, #14
 8000e1e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0201 	bic.w	r2, r2, #1
 8000e2e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	4798      	blx	r3
    } 
  }
  return status;
 8000e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e7a:	e154      	b.n	8001126 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8146 	beq.w	8001120 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x38>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	6939      	ldr	r1, [r7, #16]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d00b      	beq.n	8000f40 <HAL_GPIO_Init+0xd4>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d007      	beq.n	8000f40 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f34:	2b11      	cmp	r3, #17
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b12      	cmp	r3, #18
 8000f3e:	d130      	bne.n	8000fa2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f76:	2201      	movs	r2, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	f003 0201 	and.w	r2, r3, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 80a0 	beq.w	8001120 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe0:	4b58      	ldr	r3, [pc, #352]	; (8001144 <HAL_GPIO_Init+0x2d8>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a57      	ldr	r2, [pc, #348]	; (8001144 <HAL_GPIO_Init+0x2d8>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b55      	ldr	r3, [pc, #340]	; (8001144 <HAL_GPIO_Init+0x2d8>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ff8:	4a53      	ldr	r2, [pc, #332]	; (8001148 <HAL_GPIO_Init+0x2dc>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001022:	d019      	beq.n	8001058 <HAL_GPIO_Init+0x1ec>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a49      	ldr	r2, [pc, #292]	; (800114c <HAL_GPIO_Init+0x2e0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d013      	beq.n	8001054 <HAL_GPIO_Init+0x1e8>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a48      	ldr	r2, [pc, #288]	; (8001150 <HAL_GPIO_Init+0x2e4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d00d      	beq.n	8001050 <HAL_GPIO_Init+0x1e4>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a47      	ldr	r2, [pc, #284]	; (8001154 <HAL_GPIO_Init+0x2e8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d007      	beq.n	800104c <HAL_GPIO_Init+0x1e0>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a46      	ldr	r2, [pc, #280]	; (8001158 <HAL_GPIO_Init+0x2ec>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d101      	bne.n	8001048 <HAL_GPIO_Init+0x1dc>
 8001044:	2304      	movs	r3, #4
 8001046:	e008      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 8001048:	2305      	movs	r3, #5
 800104a:	e006      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 800104c:	2303      	movs	r3, #3
 800104e:	e004      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 8001050:	2302      	movs	r3, #2
 8001052:	e002      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <HAL_GPIO_Init+0x1ee>
 8001058:	2300      	movs	r3, #0
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	f002 0203 	and.w	r2, r2, #3
 8001060:	0092      	lsls	r2, r2, #2
 8001062:	4093      	lsls	r3, r2
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106a:	4937      	ldr	r1, [pc, #220]	; (8001148 <HAL_GPIO_Init+0x2dc>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001078:	4b38      	ldr	r3, [pc, #224]	; (800115c <HAL_GPIO_Init+0x2f0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800109c:	4a2f      	ldr	r2, [pc, #188]	; (800115c <HAL_GPIO_Init+0x2f0>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a2:	4b2e      	ldr	r3, [pc, #184]	; (800115c <HAL_GPIO_Init+0x2f0>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <HAL_GPIO_Init+0x2f0>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <HAL_GPIO_Init+0x2f0>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010f0:	4a1a      	ldr	r2, [pc, #104]	; (800115c <HAL_GPIO_Init+0x2f0>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_GPIO_Init+0x2f0>)
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <HAL_GPIO_Init+0x2f0>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	3301      	adds	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	fa22 f303 	lsr.w	r3, r2, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	f47f aea3 	bne.w	8000e7c <HAL_GPIO_Init+0x10>
  }
}
 8001136:	bf00      	nop
 8001138:	371c      	adds	r7, #28
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	40010000 	.word	0x40010000
 800114c:	48000400 	.word	0x48000400
 8001150:	48000800 	.word	0x48000800
 8001154:	48000c00 	.word	0x48000c00
 8001158:	48001000 	.word	0x48001000
 800115c:	40010400 	.word	0x40010400

08001160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e081      	b.n	8001276 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d106      	bne.n	800118c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f002 ff84 	bl	8004094 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2224      	movs	r2, #36	; 0x24
 8001190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0201 	bic.w	r2, r2, #1
 80011a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d107      	bne.n	80011da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	e006      	b.n	80011e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d104      	bne.n	80011fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800120c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800121c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	ea42 0103 	orr.w	r1, r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	021a      	lsls	r2, r3, #8
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69d9      	ldr	r1, [r3, #28]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1a      	ldr	r2, [r3, #32]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2220      	movs	r2, #32
 8001262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800129c:	2b28      	cmp	r3, #40	; 0x28
 800129e:	f040 8088 	bne.w	80013b2 <HAL_I2C_Slave_Seq_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d105      	bne.n	80012ba <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e07c      	b.n	80013b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x134>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80012ba:	2105      	movs	r1, #5
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f001 f921 	bl	8002504 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_I2C_Slave_Seq_Transmit_IT+0x50>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e071      	b.n	80013b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x134>
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	2b2a      	cmp	r3, #42	; 0x2a
 80012e2:	d12a      	bne.n	800133a <HAL_I2C_Slave_Seq_Transmit_IT+0xba>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80012e4:	2102      	movs	r1, #2
 80012e6:	68f8      	ldr	r0, [r7, #12]
 80012e8:	f001 f90c 	bl	8002504 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012fa:	d11e      	bne.n	800133a <HAL_I2C_Slave_Seq_Transmit_IT+0xba>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800130a:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001310:	2b00      	cmp	r3, #0
 8001312:	d012      	beq.n	800133a <HAL_I2C_Slave_Seq_Transmit_IT+0xba>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001318:	4a28      	ldr	r2, [pc, #160]	; (80013bc <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>)
 800131a:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fd64 	bl	8000dee <HAL_DMA_Abort_IT>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d006      	beq.n	800133a <HAL_I2C_Slave_Seq_Transmit_IT+0xba>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001336:	4610      	mov	r0, r2
 8001338:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2229      	movs	r2, #41	; 0x29
 800133e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2220      	movs	r2, #32
 8001346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	685a      	ldr	r2, [r3, #4]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800135e:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	88fa      	ldrh	r2, [r7, #6]
 800136a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001370:	b29a      	uxth	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_I2C_Slave_Seq_Transmit_IT+0x140>)
 8001380:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	0c1b      	lsrs	r3, r3, #16
 800138a:	b2db      	uxtb	r3, r3
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d103      	bne.n	800139e <HAL_I2C_Slave_Seq_Transmit_IT+0x11e>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2208      	movs	r2, #8
 800139c:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80013a6:	2105      	movs	r1, #5
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f001 f83d 	bl	8002428 <I2C_Enable_IRQ>

    return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e000      	b.n	80013b4 <HAL_I2C_Slave_Seq_Transmit_IT+0x134>
  }
  else
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
  }
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3710      	adds	r7, #16
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	08002385 	.word	0x08002385
 80013c0:	080016bb 	.word	0x080016bb

080013c4 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	4613      	mov	r3, r2
 80013d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80013e0:	2b28      	cmp	r3, #40	; 0x28
 80013e2:	f040 8088 	bne.w	80014f6 <HAL_I2C_Slave_Seq_Receive_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d105      	bne.n	80013fe <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e07c      	b.n	80014f8 <HAL_I2C_Slave_Seq_Receive_IT+0x134>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80013fe:	2106      	movs	r1, #6
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f001 f87f 	bl	8002504 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800140c:	2b01      	cmp	r3, #1
 800140e:	d101      	bne.n	8001414 <HAL_I2C_Slave_Seq_Receive_IT+0x50>
 8001410:	2302      	movs	r3, #2
 8001412:	e071      	b.n	80014f8 <HAL_I2C_Slave_Seq_Receive_IT+0x134>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2201      	movs	r2, #1
 8001418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b29      	cmp	r3, #41	; 0x29
 8001426:	d12a      	bne.n	800147e <HAL_I2C_Slave_Seq_Receive_IT+0xba>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001428:	2101      	movs	r1, #1
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f001 f86a 	bl	8002504 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800143a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800143e:	d11e      	bne.n	800147e <HAL_I2C_Slave_Seq_Receive_IT+0xba>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800144e:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001454:	2b00      	cmp	r3, #0
 8001456:	d012      	beq.n	800147e <HAL_I2C_Slave_Seq_Receive_IT+0xba>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145c:	4a28      	ldr	r2, [pc, #160]	; (8001500 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>)
 800145e:	635a      	str	r2, [r3, #52]	; 0x34

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fcc2 	bl	8000dee <HAL_DMA_Abort_IT>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d006      	beq.n	800147e <HAL_I2C_Slave_Seq_Receive_IT+0xba>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800147a:	4610      	mov	r0, r2
 800147c:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	222a      	movs	r2, #42	; 0x2a
 8001482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2220      	movs	r2, #32
 800148a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2200      	movs	r2, #0
 8001492:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014a2:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	88fa      	ldrh	r2, [r7, #6]
 80014ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4a10      	ldr	r2, [pc, #64]	; (8001504 <HAL_I2C_Slave_Seq_Receive_IT+0x140>)
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34

    if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	0c1b      	lsrs	r3, r3, #16
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d103      	bne.n	80014e2 <HAL_I2C_Slave_Seq_Receive_IT+0x11e>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2208      	movs	r2, #8
 80014e0:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80014ea:	2106      	movs	r1, #6
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f000 ff9b 	bl	8002428 <I2C_Enable_IRQ>

    return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e000      	b.n	80014f8 <HAL_I2C_Slave_Seq_Receive_IT+0x134>
  }
  else
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
  }
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	08002385 	.word	0x08002385
 8001504:	080016bb 	.word	0x080016bb

08001508 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b20      	cmp	r3, #32
 800151a:	d10c      	bne.n	8001536 <HAL_I2C_EnableListen_IT+0x2e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2228      	movs	r2, #40	; 0x28
 8001520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a06      	ldr	r2, [pc, #24]	; (8001540 <HAL_I2C_EnableListen_IT+0x38>)
 8001528:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800152a:	2104      	movs	r1, #4
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 ff7b 	bl	8002428 <I2C_Enable_IRQ>

    return HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	e000      	b.n	8001538 <HAL_I2C_EnableListen_IT+0x30>
  }
  else
  {
    return HAL_BUSY;
 8001536:	2302      	movs	r3, #2
  }
}
 8001538:	4618      	mov	r0, r3
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	080016bb 	.word	0x080016bb

08001544 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	68f9      	ldr	r1, [r7, #12]
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
  }
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	0a1b      	lsrs	r3, r3, #8
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d010      	beq.n	80015be <HAL_I2C_ER_IRQHandler+0x46>
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	09db      	lsrs	r3, r3, #7
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00a      	beq.n	80015be <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	f043 0201 	orr.w	r2, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	0a9b      	lsrs	r3, r3, #10
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d010      	beq.n	80015ec <HAL_I2C_ER_IRQHandler+0x74>
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	09db      	lsrs	r3, r3, #7
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00a      	beq.n	80015ec <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f043 0208 	orr.w	r2, r3, #8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	0a5b      	lsrs	r3, r3, #9
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d010      	beq.n	800161a <HAL_I2C_ER_IRQHandler+0xa2>
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	09db      	lsrs	r3, r3, #7
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00a      	beq.n	800161a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	f043 0202 	orr.w	r2, r3, #2
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001618:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f003 030b 	and.w	r3, r3, #11
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800162a:	68f9      	ldr	r1, [r7, #12]
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fdc5 	bl	80021bc <I2C_ITError>
  }
}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800163a:	b480      	push	{r7}
 800163c:	b083      	sub	sp, #12
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800164e:	b480      	push	{r7}
 8001650:	b083      	sub	sp, #12
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016ac:	b2db      	uxtb	r3, r3
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d101      	bne.n	80016de <I2C_Slave_ISR_IT+0x24>
 80016da:	2302      	movs	r3, #2
 80016dc:	e0ec      	b.n	80018b8 <I2C_Slave_ISR_IT+0x1fe>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	095b      	lsrs	r3, r3, #5
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d009      	beq.n	8001706 <I2C_Slave_ISR_IT+0x4c>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	095b      	lsrs	r3, r3, #5
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80016fe:	6939      	ldr	r1, [r7, #16]
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 fc31 	bl	8001f68 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d04d      	beq.n	80017ae <I2C_Slave_ISR_IT+0xf4>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d047      	beq.n	80017ae <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001722:	b29b      	uxth	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d128      	bne.n	800177a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b28      	cmp	r3, #40	; 0x28
 8001732:	d108      	bne.n	8001746 <I2C_Slave_ISR_IT+0x8c>
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800173a:	d104      	bne.n	8001746 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 fce8 	bl	8002114 <I2C_ITListenCplt>
 8001744:	e032      	b.n	80017ac <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b29      	cmp	r3, #41	; 0x29
 8001750:	d10e      	bne.n	8001770 <I2C_Slave_ISR_IT+0xb6>
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001758:	d00a      	beq.n	8001770 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2210      	movs	r2, #16
 8001760:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 fdea 	bl	800233c <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 fb23 	bl	8001db4 <I2C_ITSlaveSeqCplt>
 800176e:	e01d      	b.n	80017ac <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2210      	movs	r2, #16
 8001776:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001778:	e096      	b.n	80018a8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2210      	movs	r2, #16
 8001780:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f043 0204 	orr.w	r2, r3, #4
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d004      	beq.n	800179e <I2C_Slave_ISR_IT+0xe4>
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800179a:	f040 8085 	bne.w	80018a8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4619      	mov	r1, r3
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 fd09 	bl	80021bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80017aa:	e07d      	b.n	80018a8 <I2C_Slave_ISR_IT+0x1ee>
 80017ac:	e07c      	b.n	80018a8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	089b      	lsrs	r3, r3, #2
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d030      	beq.n	800181c <I2C_Slave_ISR_IT+0x162>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	089b      	lsrs	r3, r3, #2
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d02a      	beq.n	800181c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d018      	beq.n	8001802 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001806:	b29b      	uxth	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d14f      	bne.n	80018ac <I2C_Slave_ISR_IT+0x1f2>
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001812:	d04b      	beq.n	80018ac <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f000 facd 	bl	8001db4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800181a:	e047      	b.n	80018ac <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	08db      	lsrs	r3, r3, #3
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00a      	beq.n	800183e <I2C_Slave_ISR_IT+0x184>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d004      	beq.n	800183e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001834:	6939      	ldr	r1, [r7, #16]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	f000 f9fd 	bl	8001c36 <I2C_ITAddrCplt>
 800183c:	e037      	b.n	80018ae <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	085b      	lsrs	r3, r3, #1
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d031      	beq.n	80018ae <I2C_Slave_ISR_IT+0x1f4>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	085b      	lsrs	r3, r3, #1
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d02b      	beq.n	80018ae <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29b      	uxth	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d018      	beq.n	8001892 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187a:	b29b      	uxth	r3, r3
 800187c:	3b01      	subs	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	851a      	strh	r2, [r3, #40]	; 0x28
 8001890:	e00d      	b.n	80018ae <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001898:	d002      	beq.n	80018a0 <I2C_Slave_ISR_IT+0x1e6>
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d106      	bne.n	80018ae <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fa87 	bl	8001db4 <I2C_ITSlaveSeqCplt>
 80018a6:	e002      	b.n	80018ae <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80018a8:	bf00      	nop
 80018aa:	e000      	b.n	80018ae <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80018ac:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <I2C_Master_ISR_DMA+0x1a>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e0e1      	b.n	8001a9e <I2C_Master_ISR_DMA+0x1de>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	091b      	lsrs	r3, r3, #4
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d017      	beq.n	800191e <I2C_Master_ISR_DMA+0x5e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d011      	beq.n	800191e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2210      	movs	r2, #16
 8001900:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f043 0204 	orr.w	r2, r3, #4
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800190e:	2112      	movs	r1, #18
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f000 fd89 	bl	8002428 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 fd10 	bl	800233c <I2C_Flush_TXDR>
 800191c:	e0ba      	b.n	8001a94 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	09db      	lsrs	r3, r3, #7
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d072      	beq.n	8001a10 <I2C_Master_ISR_DMA+0x150>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	099b      	lsrs	r3, r3, #6
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b00      	cmp	r3, #0
 8001934:	d06c      	beq.n	8001a10 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001944:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194a:	b29b      	uxth	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d04e      	beq.n	80019ee <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	b29b      	uxth	r3, r3
 8001958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800195c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001962:	b29b      	uxth	r3, r3
 8001964:	2bff      	cmp	r3, #255	; 0xff
 8001966:	d906      	bls.n	8001976 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	22ff      	movs	r2, #255	; 0xff
 800196c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800196e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e010      	b.n	8001998 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197a:	b29a      	uxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001988:	d003      	beq.n	8001992 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e002      	b.n	8001998 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001996:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199c:	b2da      	uxtb	r2, r3
 800199e:	8a79      	ldrh	r1, [r7, #18]
 80019a0:	2300      	movs	r3, #0
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 fd10 	bl	80023cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b22      	cmp	r3, #34	; 0x22
 80019c8:	d108      	bne.n	80019dc <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019d8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80019da:	e05b      	b.n	8001a94 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019ea:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80019ec:	e052      	b.n	8001a94 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019fc:	d003      	beq.n	8001a06 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f99b 	bl	8001d3a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001a04:	e046      	b.n	8001a94 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a06:	2140      	movs	r1, #64	; 0x40
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 fbd7 	bl	80021bc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001a0e:	e041      	b.n	8001a94 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	099b      	lsrs	r3, r3, #6
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d029      	beq.n	8001a70 <I2C_Master_ISR_DMA+0x1b0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d023      	beq.n	8001a70 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d119      	bne.n	8001a66 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a40:	d027      	beq.n	8001a92 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a4a:	d108      	bne.n	8001a5e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a5a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001a5c:	e019      	b.n	8001a92 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f96b 	bl	8001d3a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001a64:	e015      	b.n	8001a92 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001a66:	2140      	movs	r1, #64	; 0x40
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 fba7 	bl	80021bc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001a6e:	e010      	b.n	8001a92 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d00b      	beq.n	8001a94 <I2C_Master_ISR_DMA+0x1d4>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f000 f9d0 	bl	8001e30 <I2C_ITMasterCplt>
 8001a90:	e000      	b.n	8001a94 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001a92:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b086      	sub	sp, #24
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	613b      	str	r3, [r7, #16]
  uint32_t treatdmanack = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <I2C_Slave_ISR_DMA+0x24>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e0b1      	b.n	8001c2e <I2C_Slave_ISR_DMA+0x188>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	095b      	lsrs	r3, r3, #5
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <I2C_Slave_ISR_DMA+0x4c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	095b      	lsrs	r3, r3, #5
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 fa3b 	bl	8001f68 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	091b      	lsrs	r3, r3, #4
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8082 	beq.w	8001c04 <I2C_Slave_ISR_DMA+0x15e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d07b      	beq.n	8001c04 <I2C_Slave_ISR_DMA+0x15e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	0b9b      	lsrs	r3, r3, #14
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <I2C_Slave_ISR_DMA+0x7e>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	0bdb      	lsrs	r3, r3, #15
 8001b1c:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d068      	beq.n	8001bf6 <I2C_Slave_ISR_DMA+0x150>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00d      	beq.n	8001b48 <I2C_Slave_ISR_DMA+0xa2>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	0bdb      	lsrs	r3, r3, #15
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <I2C_Slave_ISR_DMA+0xa2>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <I2C_Slave_ISR_DMA+0xa2>
          {
            treatdmanack = 1U;
 8001b44:	2301      	movs	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00d      	beq.n	8001b6c <I2C_Slave_ISR_DMA+0xc6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	0b9b      	lsrs	r3, r3, #14
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <I2C_Slave_ISR_DMA+0xc6>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <I2C_Slave_ISR_DMA+0xc6>
          {
            treatdmanack = 1U;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
          }
        }
      }

      if (treatdmanack == 1U)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d128      	bne.n	8001bc4 <I2C_Slave_ISR_DMA+0x11e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b28      	cmp	r3, #40	; 0x28
 8001b7c:	d108      	bne.n	8001b90 <I2C_Slave_ISR_DMA+0xea>
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b84:	d104      	bne.n	8001b90 <I2C_Slave_ISR_DMA+0xea>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fac3 	bl	8002114 <I2C_ITListenCplt>
 8001b8e:	e031      	b.n	8001bf4 <I2C_Slave_ISR_DMA+0x14e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b29      	cmp	r3, #41	; 0x29
 8001b9a:	d10e      	bne.n	8001bba <I2C_Slave_ISR_DMA+0x114>
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ba2:	d00a      	beq.n	8001bba <I2C_Slave_ISR_DMA+0x114>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2210      	movs	r2, #16
 8001baa:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 fbc5 	bl	800233c <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f8fe 	bl	8001db4 <I2C_ITSlaveSeqCplt>
 8001bb8:	e01c      	b.n	8001bf4 <I2C_Slave_ISR_DMA+0x14e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001bc2:	e01d      	b.n	8001c00 <I2C_Slave_ISR_DMA+0x15a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2210      	movs	r2, #16
 8001bca:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f043 0204 	orr.w	r2, r3, #4
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <I2C_Slave_ISR_DMA+0x140>
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d10c      	bne.n	8001c00 <I2C_Slave_ISR_DMA+0x15a>
        {
          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4619      	mov	r1, r3
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 fae5 	bl	80021bc <I2C_ITError>
      if (treatdmanack == 1U)
 8001bf2:	e005      	b.n	8001c00 <I2C_Slave_ISR_DMA+0x15a>
 8001bf4:	e004      	b.n	8001c00 <I2C_Slave_ISR_DMA+0x15a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2210      	movs	r2, #16
 8001bfc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001bfe:	e011      	b.n	8001c24 <I2C_Slave_ISR_DMA+0x17e>
      if (treatdmanack == 1U)
 8001c00:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001c02:	e00f      	b.n	8001c24 <I2C_Slave_ISR_DMA+0x17e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	08db      	lsrs	r3, r3, #3
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <I2C_Slave_ISR_DMA+0x17e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	08db      	lsrs	r3, r3, #3
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <I2C_Slave_ISR_DMA+0x17e>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f809 	bl	8001c36 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001c4c:	2b28      	cmp	r3, #40	; 0x28
 8001c4e:	d168      	bne.n	8001d22 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	0c1b      	lsrs	r3, r3, #16
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	0c1b      	lsrs	r3, r3, #16
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001c6e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001c8a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d137      	bne.n	8001d04 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001c94:	897b      	ldrh	r3, [r7, #10]
 8001c96:	09db      	lsrs	r3, r3, #7
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	89bb      	ldrh	r3, [r7, #12]
 8001c9c:	4053      	eors	r3, r2
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	f003 0306 	and.w	r3, r3, #6
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d11c      	bne.n	8001ce2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001ca8:	897b      	ldrh	r3, [r7, #10]
 8001caa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d139      	bne.n	8001d32 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2208      	movs	r2, #8
 8001cca:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cd4:	89ba      	ldrh	r2, [r7, #12]
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f002 f8f8 	bl	8003ed0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001ce0:	e027      	b.n	8001d32 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 8001ce2:	893b      	ldrh	r3, [r7, #8]
 8001ce4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fc0b 	bl	8002504 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001cf6:	89ba      	ldrh	r2, [r7, #12]
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f002 f8e7 	bl	8003ed0 <HAL_I2C_AddrCallback>
}
 8001d02:	e016      	b.n	8001d32 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001d04:	2104      	movs	r1, #4
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fbfc 	bl	8002504 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001d14:	89ba      	ldrh	r2, [r7, #12]
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f002 f8d8 	bl	8003ed0 <HAL_I2C_AddrCallback>
}
 8001d20:	e007      	b.n	8001d32 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2208      	movs	r2, #8
 8001d28:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b21      	cmp	r3, #33	; 0x21
 8001d54:	d115      	bne.n	8001d82 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2211      	movs	r2, #17
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fbc9 	bl	8002504 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff fc5d 	bl	800163a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001d80:	e014      	b.n	8001dac <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2220      	movs	r2, #32
 8001d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2212      	movs	r2, #18
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d96:	2102      	movs	r1, #2
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 fbb3 	bl	8002504 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fc51 	bl	800164e <HAL_I2C_MasterRxCpltCallback>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b29      	cmp	r3, #41	; 0x29
 8001dce:	d112      	bne.n	8001df6 <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2228      	movs	r2, #40	; 0x28
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2221      	movs	r2, #33	; 0x21
 8001ddc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001dde:	2101      	movs	r1, #1
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fb8f 	bl	8002504 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f002 f8f4 	bl	8003fdc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001df4:	e017      	b.n	8001e26 <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8001e00:	d111      	bne.n	8001e26 <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2228      	movs	r2, #40	; 0x28
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2222      	movs	r2, #34	; 0x22
 8001e0e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001e10:	2102      	movs	r1, #2
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fb76 	bl	8002504 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f002 f893 	bl	8003f4c <HAL_I2C_SlaveRxCpltCallback>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2220      	movs	r2, #32
 8001e40:	61da      	str	r2, [r3, #28]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b44      	ldr	r3, [pc, #272]	; (8001f60 <I2C_ITMasterCplt+0x130>)
 8001e4e:	400b      	ands	r3, r1
 8001e50:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->XferISR       = NULL;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <I2C_ITMasterCplt+0x134>)
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <I2C_ITMasterCplt+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2210      	movs	r2, #16
 8001e76:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fa59 	bl	800233c <I2C_Flush_TXDR>

  /* Disable Interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001e8a:	2103      	movs	r1, #3
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fb39 	bl	8002504 <I2C_Disable_IRQ>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b60      	cmp	r3, #96	; 0x60
 8001ea2:	d002      	beq.n	8001eaa <I2C_ITMasterCplt+0x7a>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <I2C_ITMasterCplt+0x88>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	4619      	mov	r1, r3
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f000 f983 	bl	80021bc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001eb6:	e04e      	b.n	8001f56 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b21      	cmp	r3, #33	; 0x21
 8001ec2:	d121      	bne.n	8001f08 <I2C_ITMasterCplt+0xd8>
    hi2c->State = HAL_I2C_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b40      	cmp	r3, #64	; 0x40
 8001ed6:	d10b      	bne.n	8001ef0 <I2C_ITMasterCplt+0xc0>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fbba 	bl	8001662 <HAL_I2C_MemTxCpltCallback>
}
 8001eee:	e032      	b.n	8001f56 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fb9a 	bl	800163a <HAL_I2C_MasterTxCpltCallback>
}
 8001f06:	e026      	b.n	8001f56 <I2C_ITMasterCplt+0x126>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b22      	cmp	r3, #34	; 0x22
 8001f12:	d120      	bne.n	8001f56 <I2C_ITMasterCplt+0x126>
    hi2c->State = HAL_I2C_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b40      	cmp	r3, #64	; 0x40
 8001f26:	d10b      	bne.n	8001f40 <I2C_ITMasterCplt+0x110>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fb9c 	bl	8001676 <HAL_I2C_MemRxCpltCallback>
}
 8001f3e:	e00a      	b.n	8001f56 <I2C_ITMasterCplt+0x126>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fb7c 	bl	800164e <HAL_I2C_MasterRxCpltCallback>
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	fe00e800 	.word	0xfe00e800
 8001f64:	ffff0000 	.word	0xffff0000

08001f68 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2220      	movs	r2, #32
 8001f84:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8001f86:	2107      	movs	r1, #7
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fabb 	bl	8002504 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	685a      	ldr	r2, [r3, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f9c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b58      	ldr	r3, [pc, #352]	; (800210c <I2C_ITSlaveCplt+0x1a4>)
 8001faa:	400b      	ands	r3, r1
 8001fac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f9c4 	bl	800233c <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	0b9b      	lsrs	r3, r3, #14
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d018      	beq.n	8001ffa <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fd6:	e010      	b.n	8001ffa <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	0bdb      	lsrs	r3, r3, #15
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d020      	beq.n	8002048 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00c      	beq.n	8002048 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	3b01      	subs	r3, #1
 8002034:	b29a      	uxth	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800204c:	b29b      	uxth	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	f043 0204 	orr.w	r2, r3, #4
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	2b00      	cmp	r3, #0
 8002078:	d010      	beq.n	800209c <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4619      	mov	r1, r3
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f89b 	bl	80021bc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b28      	cmp	r3, #40	; 0x28
 8002090:	d138      	bne.n	8002104 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f83d 	bl	8002114 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800209a:	e033      	b.n	8002104 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020a4:	d011      	beq.n	80020ca <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fe84 	bl	8001db4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a18      	ldr	r2, [pc, #96]	; (8002110 <I2C_ITSlaveCplt+0x1a8>)
 80020b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f001 ff9a 	bl	8003ffc <HAL_I2C_ListenCpltCallback>
}
 80020c8:	e01c      	b.n	8002104 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b22      	cmp	r3, #34	; 0x22
 80020d4:	d10b      	bne.n	80020ee <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f001 ff30 	bl	8003f4c <HAL_I2C_SlaveRxCpltCallback>
}
 80020ec:	e00a      	b.n	8002104 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f001 ff6c 	bl	8003fdc <HAL_I2C_SlaveTxCpltCallback>
}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	fe00e800 	.word	0xfe00e800
 8002110:	ffff0000 	.word	0xffff0000

08002114 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a25      	ldr	r2, [pc, #148]	; (80021b8 <I2C_ITListenCplt+0xa4>)
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d022      	beq.n	8002192 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	2b00      	cmp	r3, #0
 800216a:	d012      	beq.n	8002192 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f043 0204 	orr.w	r2, r3, #4
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002192:	2107      	movs	r1, #7
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f9b5 	bl	8002504 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2210      	movs	r2, #16
 80021a0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f001 ff26 	bl	8003ffc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	ffff0000 	.word	0xffff0000

080021bc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021cc:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a55      	ldr	r2, [pc, #340]	; (8002330 <I2C_ITError+0x174>)
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b28      	cmp	r3, #40	; 0x28
 80021f2:	d005      	beq.n	8002200 <I2C_ITError+0x44>
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b29      	cmp	r3, #41	; 0x29
 80021f8:	d002      	beq.n	8002200 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	2b2a      	cmp	r3, #42	; 0x2a
 80021fe:	d10e      	bne.n	800221e <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002200:	2103      	movs	r1, #3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f97e 	bl	8002504 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2228      	movs	r2, #40	; 0x28
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a46      	ldr	r2, [pc, #280]	; (8002334 <I2C_ITError+0x178>)
 800221a:	635a      	str	r2, [r3, #52]	; 0x34
 800221c:	e013      	b.n	8002246 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800221e:	2107      	movs	r1, #7
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f96f 	bl	8002504 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b60      	cmp	r3, #96	; 0x60
 8002230:	d003      	beq.n	800223a <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2220      	movs	r2, #32
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002254:	d123      	bne.n	800229e <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002264:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	2b00      	cmp	r3, #0
 800226c:	d05c      	beq.n	8002328 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	4a31      	ldr	r2, [pc, #196]	; (8002338 <I2C_ITError+0x17c>)
 8002274:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe fdb3 	bl	8000dee <HAL_DMA_Abort_IT>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d04c      	beq.n	8002328 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002298:	4610      	mov	r0, r2
 800229a:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800229c:	e044      	b.n	8002328 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022ac:	d123      	bne.n	80022f6 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022bc:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d030      	beq.n	8002328 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <I2C_ITError+0x17c>)
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_UNLOCK(hi2c);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fd87 	bl	8000dee <HAL_DMA_Abort_IT>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d020      	beq.n	8002328 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022f0:	4610      	mov	r0, r2
 80022f2:	4798      	blx	r3
}
 80022f4:	e018      	b.n	8002328 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b60      	cmp	r3, #96	; 0x60
 8002300:	d10b      	bne.n	800231a <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff f9b9 	bl	800168a <HAL_I2C_AbortCpltCallback>
}
 8002318:	e006      	b.n	8002328 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f001 fe7a 	bl	800401c <HAL_I2C_ErrorCallback>
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	ffff0000 	.word	0xffff0000
 8002334:	080016bb 	.word	0x080016bb
 8002338:	08002385 	.word	0x08002385

0800233c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d103      	bne.n	800235a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2200      	movs	r2, #0
 8002358:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d007      	beq.n	8002378 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	699a      	ldr	r2, [r3, #24]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	619a      	str	r2, [r3, #24]
  }
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002390:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002396:	2200      	movs	r2, #0
 8002398:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239e:	2200      	movs	r2, #0
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b60      	cmp	r3, #96	; 0x60
 80023ac:	d107      	bne.n	80023be <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f7ff f967 	bl	800168a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023bc:	e002      	b.n	80023c4 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f001 fe2c 	bl	800401c <HAL_I2C_ErrorCallback>
}
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	817b      	strh	r3, [r7, #10]
 80023da:	4613      	mov	r3, r2
 80023dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	0d5b      	lsrs	r3, r3, #21
 80023e8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <I2C_TransferConfig+0x58>)
 80023ee:	430b      	orrs	r3, r1
 80023f0:	43db      	mvns	r3, r3
 80023f2:	ea02 0103 	and.w	r1, r2, r3
 80023f6:	897b      	ldrh	r3, [r7, #10]
 80023f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023fc:	7a7b      	ldrb	r3, [r7, #9]
 80023fe:	041b      	lsls	r3, r3, #16
 8002400:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	431a      	orrs	r2, r3
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	431a      	orrs	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002416:	bf00      	nop
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	03ff63ff 	.word	0x03ff63ff

08002428 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243c:	4a2f      	ldr	r2, [pc, #188]	; (80024fc <I2C_Enable_IRQ+0xd4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002446:	4a2e      	ldr	r2, [pc, #184]	; (8002500 <I2C_Enable_IRQ+0xd8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d124      	bne.n	8002496 <I2C_Enable_IRQ+0x6e>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800244c:	887b      	ldrh	r3, [r7, #2]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <I2C_Enable_IRQ+0x36>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800245c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	f003 0311 	and.w	r3, r3, #17
 8002464:	2b11      	cmp	r3, #17
 8002466:	d103      	bne.n	8002470 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800246e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	f003 0312 	and.w	r3, r3, #18
 8002476:	2b12      	cmp	r3, #18
 8002478:	d103      	bne.n	8002482 <I2C_Enable_IRQ+0x5a>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f043 0320 	orr.w	r3, r3, #32
 8002480:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	f003 0312 	and.w	r3, r3, #18
 8002488:	2b12      	cmp	r3, #18
 800248a:	d128      	bne.n	80024de <I2C_Enable_IRQ+0xb6>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002492:	60fb      	str	r3, [r7, #12]
    if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8002494:	e023      	b.n	80024de <I2C_Enable_IRQ+0xb6>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <I2C_Enable_IRQ+0x80>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80024a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80024a8:	887b      	ldrh	r3, [r7, #2]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <I2C_Enable_IRQ+0x92>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80024b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80024ba:	887b      	ldrh	r3, [r7, #2]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <I2C_Enable_IRQ+0xa4>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80024ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80024cc:	887b      	ldrh	r3, [r7, #2]
 80024ce:	f003 0312 	and.w	r3, r3, #18
 80024d2:	2b12      	cmp	r3, #18
 80024d4:	d103      	bne.n	80024de <I2C_Enable_IRQ+0xb6>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f043 0320 	orr.w	r3, r3, #32
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	080018c1 	.word	0x080018c1
 8002500:	08001aa7 	.word	0x08001aa7

08002504 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00f      	beq.n	800253e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002524:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002532:	2b28      	cmp	r3, #40	; 0x28
 8002534:	d003      	beq.n	800253e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800253c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800253e:	887b      	ldrh	r3, [r7, #2]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00f      	beq.n	8002568 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800254e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800255c:	2b28      	cmp	r3, #40	; 0x28
 800255e:	d003      	beq.n	8002568 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002566:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002578:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800257a:	887b      	ldrh	r3, [r7, #2]
 800257c:	f003 0311 	and.w	r3, r3, #17
 8002580:	2b11      	cmp	r3, #17
 8002582:	d103      	bne.n	800258c <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800258a:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800258c:	887b      	ldrh	r3, [r7, #2]
 800258e:	f003 0312 	and.w	r3, r3, #18
 8002592:	2b12      	cmp	r3, #18
 8002594:	d103      	bne.n	800259e <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f043 0320 	orr.w	r3, r3, #32
 800259c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	f003 0312 	and.w	r3, r3, #18
 80025a4:	2b12      	cmp	r3, #18
 80025a6:	d103      	bne.n	80025b0 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	400a      	ands	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]
}
 80025c2:	bf00      	nop
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d138      	bne.n	8002656 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e032      	b.n	8002658 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2224      	movs	r2, #36	; 0x24
 80025fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002620:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6819      	ldr	r1, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002656:	2302      	movs	r3, #2
  }
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b20      	cmp	r3, #32
 8002678:	d139      	bne.n	80026ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002684:	2302      	movs	r3, #2
 8002686:	e033      	b.n	80026f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2224      	movs	r2, #36	; 0x24
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0201 	bic.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2220      	movs	r2, #32
 80026de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026ee:	2302      	movs	r3, #2
  }
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e038      	b.n	8002780 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002716:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f245 5255 	movw	r2, #21845	; 0x5555
 8002720:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6852      	ldr	r2, [r2, #4]
 800272a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6892      	ldr	r2, [r2, #8]
 8002734:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002736:	f7fe fa3d 	bl	8000bb4 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800273c:	e008      	b.n	8002750 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800273e:	f7fe fa39 	bl	8000bb4 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b30      	cmp	r3, #48	; 0x30
 800274a:	d901      	bls.n	8002750 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e017      	b.n	8002780 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f1      	bne.n	800273e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	429a      	cmp	r2, r3
 8002766:	d005      	beq.n	8002774 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68d2      	ldr	r2, [r2, #12]
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	e004      	b.n	800277e <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800277c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002798:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	f000 bef4 	b.w	80035aa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 816a 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027d2:	4bb3      	ldr	r3, [pc, #716]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 030c 	and.w	r3, r3, #12
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d00c      	beq.n	80027f8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027de:	4bb0      	ldr	r3, [pc, #704]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d159      	bne.n	800289e <HAL_RCC_OscConfig+0xf6>
 80027ea:	4bad      	ldr	r3, [pc, #692]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f6:	d152      	bne.n	800289e <HAL_RCC_OscConfig+0xf6>
 80027f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800280c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002810:	fab3 f383 	clz	r3, r3
 8002814:	b2db      	uxtb	r3, r3
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	b2db      	uxtb	r3, r3
 800281a:	f043 0301 	orr.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d102      	bne.n	800282a <HAL_RCC_OscConfig+0x82>
 8002824:	4b9e      	ldr	r3, [pc, #632]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0xae>
 800282a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800282e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800283e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002842:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002846:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002852:	4b93      	ldr	r3, [pc, #588]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800285a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800285e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002862:	fa92 f2a2 	rbit	r2, r2
 8002866:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800286a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800286e:	fab2 f282 	clz	r2, r2
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f042 0220 	orr.w	r2, r2, #32
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	f002 021f 	and.w	r2, r2, #31
 800287e:	2101      	movs	r1, #1
 8002880:	fa01 f202 	lsl.w	r2, r1, r2
 8002884:	4013      	ands	r3, r2
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 810c 	beq.w	8002aa4 <HAL_RCC_OscConfig+0x2fc>
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 8106 	bne.w	8002aa4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	f000 be86 	b.w	80035aa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a8:	d106      	bne.n	80028b8 <HAL_RCC_OscConfig+0x110>
 80028aa:	4b7d      	ldr	r3, [pc, #500]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a7c      	ldr	r2, [pc, #496]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e030      	b.n	800291a <HAL_RCC_OscConfig+0x172>
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x134>
 80028c2:	4b77      	ldr	r3, [pc, #476]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a76      	ldr	r2, [pc, #472]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	4b74      	ldr	r3, [pc, #464]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a73      	ldr	r2, [pc, #460]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80028d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01e      	b.n	800291a <HAL_RCC_OscConfig+0x172>
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_OscConfig+0x15a>
 80028e8:	4b6d      	ldr	r3, [pc, #436]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a6c      	ldr	r2, [pc, #432]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80028ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b6a      	ldr	r3, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a69      	ldr	r2, [pc, #420]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80028fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	e00b      	b.n	800291a <HAL_RCC_OscConfig+0x172>
 8002902:	4b67      	ldr	r3, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a66      	ldr	r2, [pc, #408]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 8002908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b64      	ldr	r3, [pc, #400]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a63      	ldr	r2, [pc, #396]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 8002914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800291a:	4b61      	ldr	r3, [pc, #388]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 800291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291e:	f023 020f 	bic.w	r2, r3, #15
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	495d      	ldr	r1, [pc, #372]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 800292a:	4313      	orrs	r3, r2
 800292c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d059      	beq.n	80029ec <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe f93c 	bl	8000bb4 <HAL_GetTick>
 800293c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002942:	f7fe f937 	bl	8000bb4 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d902      	bls.n	8002958 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	f000 be29 	b.w	80035aa <HAL_RCC_OscConfig+0xe02>
 8002958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800295c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002960:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002964:	fa93 f3a3 	rbit	r3, r3
 8002968:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800296c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_RCC_OscConfig+0x1e2>
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	e015      	b.n	80029b6 <HAL_RCC_OscConfig+0x20e>
 800298a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800298e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800299e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ba:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80029be:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029c2:	fa92 f2a2 	rbit	r2, r2
 80029c6:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80029ca:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029ce:	fab2 f282 	clz	r2, r2
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f042 0220 	orr.w	r2, r2, #32
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	f002 021f 	and.w	r2, r2, #31
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f202 	lsl.w	r2, r1, r2
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0ab      	beq.n	8002942 <HAL_RCC_OscConfig+0x19a>
 80029ea:	e05c      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe f8e2 	bl	8000bb4 <HAL_GetTick>
 80029f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f6:	f7fe f8dd 	bl	8000bb4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d902      	bls.n	8002a0c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	f000 bdcf 	b.w	80035aa <HAL_RCC_OscConfig+0xe02>
 8002a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a10:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a24:	fab3 f383 	clz	r3, r3
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d102      	bne.n	8002a3e <HAL_RCC_OscConfig+0x296>
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x2c2>
 8002a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a42:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a56:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_RCC_OscConfig+0x2f8>)
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a6e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a72:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a76:	fa92 f2a2 	rbit	r2, r2
 8002a7a:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a7e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	f042 0220 	orr.w	r2, r2, #32
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	f002 021f 	and.w	r2, r2, #31
 8002a92:	2101      	movs	r1, #1
 8002a94:	fa01 f202 	lsl.w	r2, r1, r2
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1ab      	bne.n	80029f6 <HAL_RCC_OscConfig+0x24e>
 8002a9e:	e002      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2fe>
 8002aa0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 816f 	beq.w	8002d94 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ab6:	4bd0      	ldr	r3, [pc, #832]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 030c 	and.w	r3, r3, #12
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ac2:	4bcd      	ldr	r3, [pc, #820]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d16c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x400>
 8002ace:	4bca      	ldr	r3, [pc, #808]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d166      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x400>
 8002ada:	2302      	movs	r3, #2
 8002adc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002aec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002af0:	fab3 f383 	clz	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d102      	bne.n	8002b0a <HAL_RCC_OscConfig+0x362>
 8002b04:	4bbc      	ldr	r3, [pc, #752]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	e013      	b.n	8002b32 <HAL_RCC_OscConfig+0x38a>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b14:	fa93 f3a3 	rbit	r3, r3
 8002b18:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b26:	fa93 f3a3 	rbit	r3, r3
 8002b2a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b2e:	4bb2      	ldr	r3, [pc, #712]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	2202      	movs	r2, #2
 8002b34:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b38:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b3c:	fa92 f2a2 	rbit	r2, r2
 8002b40:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b44:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b48:	fab2 f282 	clz	r2, r2
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	f042 0220 	orr.w	r2, r2, #32
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	f002 021f 	and.w	r2, r2, #31
 8002b58:	2101      	movs	r1, #1
 8002b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_RCC_OscConfig+0x3cc>
 8002b64:	1d3b      	adds	r3, r7, #4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d002      	beq.n	8002b74 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f000 bd1b 	b.w	80035aa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b74:	4ba0      	ldr	r3, [pc, #640]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	21f8      	movs	r1, #248	; 0xf8
 8002b84:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002b8c:	fa91 f1a1 	rbit	r1, r1
 8002b90:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002b94:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002b98:	fab1 f181 	clz	r1, r1
 8002b9c:	b2c9      	uxtb	r1, r1
 8002b9e:	408b      	lsls	r3, r1
 8002ba0:	4995      	ldr	r1, [pc, #596]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba6:	e0f5      	b.n	8002d94 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8085 	beq.w	8002cbe <HAL_RCC_OscConfig+0x516>
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002bc6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002bd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	2301      	movs	r3, #1
 8002bde:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fd ffe8 	bl	8000bb4 <HAL_GetTick>
 8002be4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fd ffe3 	bl	8000bb4 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d902      	bls.n	8002c00 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	f000 bcd5 	b.w	80035aa <HAL_RCC_OscConfig+0xe02>
 8002c00:	2302      	movs	r3, #2
 8002c02:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c12:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d102      	bne.n	8002c30 <HAL_RCC_OscConfig+0x488>
 8002c2a:	4b73      	ldr	r3, [pc, #460]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	e013      	b.n	8002c58 <HAL_RCC_OscConfig+0x4b0>
 8002c30:	2302      	movs	r3, #2
 8002c32:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c42:	2302      	movs	r3, #2
 8002c44:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c48:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c4c:	fa93 f3a3 	rbit	r3, r3
 8002c50:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c54:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c62:	fa92 f2a2 	rbit	r2, r2
 8002c66:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c6a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c6e:	fab2 f282 	clz	r2, r2
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	f042 0220 	orr.w	r2, r2, #32
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	f002 021f 	and.w	r2, r2, #31
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f202 	lsl.w	r2, r1, r2
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0af      	beq.n	8002bea <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8a:	4b5b      	ldr	r3, [pc, #364]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	21f8      	movs	r1, #248	; 0xf8
 8002c9a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ca2:	fa91 f1a1 	rbit	r1, r1
 8002ca6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002caa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002cae:	fab1 f181 	clz	r1, r1
 8002cb2:	b2c9      	uxtb	r1, r1
 8002cb4:	408b      	lsls	r3, r1
 8002cb6:	4950      	ldr	r1, [pc, #320]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e06a      	b.n	8002d94 <HAL_RCC_OscConfig+0x5ec>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002cd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fd ff63 	bl	8000bb4 <HAL_GetTick>
 8002cee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf4:	f7fd ff5e 	bl	8000bb4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d902      	bls.n	8002d0a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	f000 bc50 	b.w	80035aa <HAL_RCC_OscConfig+0xe02>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d102      	bne.n	8002d3a <HAL_RCC_OscConfig+0x592>
 8002d34:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	e013      	b.n	8002d62 <HAL_RCC_OscConfig+0x5ba>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d5e:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_RCC_OscConfig+0x650>)
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	2202      	movs	r2, #2
 8002d64:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002d68:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002d6c:	fa92 f2a2 	rbit	r2, r2
 8002d70:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002d74:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002d78:	fab2 f282 	clz	r2, r2
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f042 0220 	orr.w	r2, r2, #32
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f002 021f 	and.w	r2, r2, #31
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1af      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d94:	1d3b      	adds	r3, r7, #4
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80da 	beq.w	8002f58 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d069      	beq.n	8002e82 <HAL_RCC_OscConfig+0x6da>
 8002dae:	2301      	movs	r3, #1
 8002db0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002db8:	fa93 f3a3 	rbit	r3, r3
 8002dbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc4:	fab3 f383 	clz	r3, r3
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <HAL_RCC_OscConfig+0x654>)
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd8:	f7fd feec 	bl	8000bb4 <HAL_GetTick>
 8002ddc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de0:	e00e      	b.n	8002e00 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de2:	f7fd fee7 	bl	8000bb4 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d906      	bls.n	8002e00 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e3d9      	b.n	80035aa <HAL_RCC_OscConfig+0xe02>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	10908120 	.word	0x10908120
 8002e00:	2302      	movs	r3, #2
 8002e02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002e16:	2202      	movs	r2, #2
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	fa93 f2a3 	rbit	r2, r3
 8002e24:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002e2e:	2202      	movs	r2, #2
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	fa93 f2a3 	rbit	r2, r3
 8002e3c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002e40:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	4ba5      	ldr	r3, [pc, #660]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8002e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e46:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	6019      	str	r1, [r3, #0]
 8002e4e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fa93 f1a3 	rbit	r1, r3
 8002e58:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e5c:	6019      	str	r1, [r3, #0]
  return result;
 8002e5e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	fab3 f383 	clz	r3, r3
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	2101      	movs	r1, #1
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0b0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x63a>
 8002e80:	e06a      	b.n	8002f58 <HAL_RCC_OscConfig+0x7b0>
 8002e82:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e86:	2201      	movs	r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	fa93 f2a3 	rbit	r2, r3
 8002e94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e98:	601a      	str	r2, [r3, #0]
  return result;
 8002e9a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e9e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	4b8c      	ldr	r3, [pc, #560]	; (80030dc <HAL_RCC_OscConfig+0x934>)
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7fd fe7e 	bl	8000bb4 <HAL_GetTick>
 8002eb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ebc:	e009      	b.n	8002ed2 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7fd fe79 	bl	8000bb4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e36b      	b.n	80035aa <HAL_RCC_OscConfig+0xe02>
 8002ed2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	fa93 f2a3 	rbit	r2, r3
 8002ee4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002eee:	2202      	movs	r2, #2
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	fa93 f2a3 	rbit	r2, r3
 8002efc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002f06:	2202      	movs	r2, #2
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	fa93 f2a3 	rbit	r2, r3
 8002f14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1a:	4b6f      	ldr	r3, [pc, #444]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8002f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f22:	2102      	movs	r1, #2
 8002f24:	6019      	str	r1, [r3, #0]
 8002f26:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f1a3 	rbit	r1, r3
 8002f30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f34:	6019      	str	r1, [r3, #0]
  return result;
 8002f36:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	4013      	ands	r3, r2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1b2      	bne.n	8002ebe <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8158 	beq.w	8003218 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f6e:	4b5a      	ldr	r3, [pc, #360]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d112      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	4b57      	ldr	r3, [pc, #348]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4a56      	ldr	r2, [pc, #344]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f84:	61d3      	str	r3, [r2, #28]
 8002f86:	4b54      	ldr	r3, [pc, #336]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	f107 0308 	add.w	r3, r7, #8
 8002f98:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	4b4f      	ldr	r3, [pc, #316]	; (80030e0 <HAL_RCC_OscConfig+0x938>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11a      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fac:	4b4c      	ldr	r3, [pc, #304]	; (80030e0 <HAL_RCC_OscConfig+0x938>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a4b      	ldr	r2, [pc, #300]	; (80030e0 <HAL_RCC_OscConfig+0x938>)
 8002fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fb8:	f7fd fdfc 	bl	8000bb4 <HAL_GetTick>
 8002fbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc0:	e009      	b.n	8002fd6 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc2:	f7fd fdf7 	bl	8000bb4 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e2e9      	b.n	80035aa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd6:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_RCC_OscConfig+0x938>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0ef      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d106      	bne.n	8002ffa <HAL_RCC_OscConfig+0x852>
 8002fec:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4a39      	ldr	r2, [pc, #228]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6213      	str	r3, [r2, #32]
 8002ff8:	e02f      	b.n	800305a <HAL_RCC_OscConfig+0x8b2>
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10c      	bne.n	800301e <HAL_RCC_OscConfig+0x876>
 8003004:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	4a33      	ldr	r2, [pc, #204]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 800300a:	f023 0301 	bic.w	r3, r3, #1
 800300e:	6213      	str	r3, [r2, #32]
 8003010:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a30      	ldr	r2, [pc, #192]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8003016:	f023 0304 	bic.w	r3, r3, #4
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	e01d      	b.n	800305a <HAL_RCC_OscConfig+0x8b2>
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b05      	cmp	r3, #5
 8003026:	d10c      	bne.n	8003042 <HAL_RCC_OscConfig+0x89a>
 8003028:	4b2b      	ldr	r3, [pc, #172]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 800302e:	f043 0304 	orr.w	r3, r3, #4
 8003032:	6213      	str	r3, [r2, #32]
 8003034:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4a27      	ldr	r2, [pc, #156]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6213      	str	r3, [r2, #32]
 8003040:	e00b      	b.n	800305a <HAL_RCC_OscConfig+0x8b2>
 8003042:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a24      	ldr	r2, [pc, #144]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6213      	str	r3, [r2, #32]
 800304e:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	4a21      	ldr	r2, [pc, #132]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d06b      	beq.n	800313c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003064:	f7fd fda6 	bl	8000bb4 <HAL_GetTick>
 8003068:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800306c:	e00b      	b.n	8003086 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fd fda1 	bl	8000bb4 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e291      	b.n	80035aa <HAL_RCC_OscConfig+0xe02>
 8003086:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800308a:	2202      	movs	r2, #2
 800308c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	fa93 f2a3 	rbit	r2, r3
 8003098:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030a2:	2202      	movs	r2, #2
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f2a3 	rbit	r2, r3
 80030b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030b4:	601a      	str	r2, [r3, #0]
  return result;
 80030b6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80030ba:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f043 0302 	orr.w	r3, r3, #2
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d109      	bne.n	80030e4 <HAL_RCC_OscConfig+0x93c>
 80030d0:	4b01      	ldr	r3, [pc, #4]	; (80030d8 <HAL_RCC_OscConfig+0x930>)
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	e014      	b.n	8003100 <HAL_RCC_OscConfig+0x958>
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	10908120 	.word	0x10908120
 80030e0:	40007000 	.word	0x40007000
 80030e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030e8:	2202      	movs	r2, #2
 80030ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	fa93 f2a3 	rbit	r2, r3
 80030f6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	4bbb      	ldr	r3, [pc, #748]	; (80033ec <HAL_RCC_OscConfig+0xc44>)
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003104:	2102      	movs	r1, #2
 8003106:	6011      	str	r1, [r2, #0]
 8003108:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	fa92 f1a2 	rbit	r1, r2
 8003112:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003116:	6011      	str	r1, [r2, #0]
  return result;
 8003118:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800311c:	6812      	ldr	r2, [r2, #0]
 800311e:	fab2 f282 	clz	r2, r2
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	f002 021f 	and.w	r2, r2, #31
 800312e:	2101      	movs	r1, #1
 8003130:	fa01 f202 	lsl.w	r2, r1, r2
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d099      	beq.n	800306e <HAL_RCC_OscConfig+0x8c6>
 800313a:	e063      	b.n	8003204 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313c:	f7fd fd3a 	bl	8000bb4 <HAL_GetTick>
 8003140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003144:	e00b      	b.n	800315e <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7fd fd35 	bl	8000bb4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e225      	b.n	80035aa <HAL_RCC_OscConfig+0xe02>
 800315e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003162:	2202      	movs	r2, #2
 8003164:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	fa93 f2a3 	rbit	r2, r3
 8003170:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003174:	601a      	str	r2, [r3, #0]
 8003176:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800317a:	2202      	movs	r2, #2
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	fa93 f2a3 	rbit	r2, r3
 8003188:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800318c:	601a      	str	r2, [r3, #0]
  return result;
 800318e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003192:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f043 0302 	orr.w	r3, r3, #2
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d102      	bne.n	80031ae <HAL_RCC_OscConfig+0xa06>
 80031a8:	4b90      	ldr	r3, [pc, #576]	; (80033ec <HAL_RCC_OscConfig+0xc44>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	e00d      	b.n	80031ca <HAL_RCC_OscConfig+0xa22>
 80031ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031b2:	2202      	movs	r2, #2
 80031b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	fa93 f2a3 	rbit	r2, r3
 80031c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	4b89      	ldr	r3, [pc, #548]	; (80033ec <HAL_RCC_OscConfig+0xc44>)
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031ce:	2102      	movs	r1, #2
 80031d0:	6011      	str	r1, [r2, #0]
 80031d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	fa92 f1a2 	rbit	r1, r2
 80031dc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80031e0:	6011      	str	r1, [r2, #0]
  return result;
 80031e2:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	fab2 f282 	clz	r2, r2
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	f002 021f 	and.w	r2, r2, #31
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f202 	lsl.w	r2, r1, r2
 80031fe:	4013      	ands	r3, r2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1a0      	bne.n	8003146 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003204:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003208:	2b01      	cmp	r3, #1
 800320a:	d105      	bne.n	8003218 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800320c:	4b77      	ldr	r3, [pc, #476]	; (80033ec <HAL_RCC_OscConfig+0xc44>)
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	4a76      	ldr	r2, [pc, #472]	; (80033ec <HAL_RCC_OscConfig+0xc44>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003216:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003218:	1d3b      	adds	r3, r7, #4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 81c2 	beq.w	80035a8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003224:	4b71      	ldr	r3, [pc, #452]	; (80033ec <HAL_RCC_OscConfig+0xc44>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b08      	cmp	r3, #8
 800322e:	f000 819c 	beq.w	800356a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003232:	1d3b      	adds	r3, r7, #4
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	2b02      	cmp	r3, #2
 800323a:	f040 8114 	bne.w	8003466 <HAL_RCC_OscConfig+0xcbe>
 800323e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003242:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003246:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	fa93 f2a3 	rbit	r2, r3
 8003252:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003256:	601a      	str	r2, [r3, #0]
  return result;
 8003258:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800325c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	fab3 f383 	clz	r3, r3
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003268:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	461a      	mov	r2, r3
 8003270:	2300      	movs	r3, #0
 8003272:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fd fc9e 	bl	8000bb4 <HAL_GetTick>
 8003278:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800327c:	e009      	b.n	8003292 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327e:	f7fd fc99 	bl	8000bb4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e18b      	b.n	80035aa <HAL_RCC_OscConfig+0xe02>
 8003292:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003296:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800329a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	fa93 f2a3 	rbit	r2, r3
 80032a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032aa:	601a      	str	r2, [r3, #0]
  return result;
 80032ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80032b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b2:	fab3 f383 	clz	r3, r3
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	095b      	lsrs	r3, r3, #5
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d102      	bne.n	80032cc <HAL_RCC_OscConfig+0xb24>
 80032c6:	4b49      	ldr	r3, [pc, #292]	; (80033ec <HAL_RCC_OscConfig+0xc44>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	e01b      	b.n	8003304 <HAL_RCC_OscConfig+0xb5c>
 80032cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	fa93 f2a3 	rbit	r2, r3
 80032e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80032ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	fa93 f2a3 	rbit	r2, r3
 80032fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	4b3a      	ldr	r3, [pc, #232]	; (80033ec <HAL_RCC_OscConfig+0xc44>)
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003308:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800330c:	6011      	str	r1, [r2, #0]
 800330e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003312:	6812      	ldr	r2, [r2, #0]
 8003314:	fa92 f1a2 	rbit	r1, r2
 8003318:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800331c:	6011      	str	r1, [r2, #0]
  return result;
 800331e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	fab2 f282 	clz	r2, r2
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	f042 0220 	orr.w	r2, r2, #32
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	f002 021f 	and.w	r2, r2, #31
 8003334:	2101      	movs	r1, #1
 8003336:	fa01 f202 	lsl.w	r2, r1, r2
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d19e      	bne.n	800327e <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003340:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <HAL_RCC_OscConfig+0xc44>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003348:	1d3b      	adds	r3, r7, #4
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800334e:	1d3b      	adds	r3, r7, #4
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	430b      	orrs	r3, r1
 8003356:	4925      	ldr	r1, [pc, #148]	; (80033ec <HAL_RCC_OscConfig+0xc44>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
 800335c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003364:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	fa93 f2a3 	rbit	r2, r3
 8003370:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003374:	601a      	str	r2, [r3, #0]
  return result;
 8003376:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800337a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800337c:	fab3 f383 	clz	r3, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003386:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	461a      	mov	r2, r3
 800338e:	2301      	movs	r3, #1
 8003390:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003392:	f7fd fc0f 	bl	8000bb4 <HAL_GetTick>
 8003396:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800339a:	e009      	b.n	80033b0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339c:	f7fd fc0a 	bl	8000bb4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e0fc      	b.n	80035aa <HAL_RCC_OscConfig+0xe02>
 80033b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	fa93 f2a3 	rbit	r2, r3
 80033c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033c8:	601a      	str	r2, [r3, #0]
  return result;
 80033ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80033d0:	fab3 f383 	clz	r3, r3
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	095b      	lsrs	r3, r3, #5
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <HAL_RCC_OscConfig+0xc48>
 80033e4:	4b01      	ldr	r3, [pc, #4]	; (80033ec <HAL_RCC_OscConfig+0xc44>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	e01e      	b.n	8003428 <HAL_RCC_OscConfig+0xc80>
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	fa93 f2a3 	rbit	r2, r3
 8003404:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800340e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	fa93 f2a3 	rbit	r2, r3
 800341e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	4b63      	ldr	r3, [pc, #396]	; (80035b4 <HAL_RCC_OscConfig+0xe0c>)
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800342c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003430:	6011      	str	r1, [r2, #0]
 8003432:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003436:	6812      	ldr	r2, [r2, #0]
 8003438:	fa92 f1a2 	rbit	r1, r2
 800343c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003440:	6011      	str	r1, [r2, #0]
  return result;
 8003442:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	fab2 f282 	clz	r2, r2
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	f042 0220 	orr.w	r2, r2, #32
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	f002 021f 	and.w	r2, r2, #31
 8003458:	2101      	movs	r1, #1
 800345a:	fa01 f202 	lsl.w	r2, r1, r2
 800345e:	4013      	ands	r3, r2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d09b      	beq.n	800339c <HAL_RCC_OscConfig+0xbf4>
 8003464:	e0a0      	b.n	80035a8 <HAL_RCC_OscConfig+0xe00>
 8003466:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800346a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800346e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	fa93 f2a3 	rbit	r2, r3
 800347a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800347e:	601a      	str	r2, [r3, #0]
  return result;
 8003480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003484:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003490:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	461a      	mov	r2, r3
 8003498:	2300      	movs	r3, #0
 800349a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fd fb8a 	bl	8000bb4 <HAL_GetTick>
 80034a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a4:	e009      	b.n	80034ba <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fd fb85 	bl	8000bb4 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e077      	b.n	80035aa <HAL_RCC_OscConfig+0xe02>
 80034ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	fa93 f2a3 	rbit	r2, r3
 80034ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d2:	601a      	str	r2, [r3, #0]
  return result;
 80034d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	095b      	lsrs	r3, r3, #5
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d102      	bne.n	80034f4 <HAL_RCC_OscConfig+0xd4c>
 80034ee:	4b31      	ldr	r3, [pc, #196]	; (80035b4 <HAL_RCC_OscConfig+0xe0c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	e01b      	b.n	800352c <HAL_RCC_OscConfig+0xd84>
 80034f4:	f107 0320 	add.w	r3, r7, #32
 80034f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	f107 0320 	add.w	r3, r7, #32
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	fa93 f2a3 	rbit	r2, r3
 8003508:	f107 031c 	add.w	r3, r7, #28
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	f107 0318 	add.w	r3, r7, #24
 8003512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f107 0318 	add.w	r3, r7, #24
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	fa93 f2a3 	rbit	r2, r3
 8003522:	f107 0314 	add.w	r3, r7, #20
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	4b22      	ldr	r3, [pc, #136]	; (80035b4 <HAL_RCC_OscConfig+0xe0c>)
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f107 0210 	add.w	r2, r7, #16
 8003530:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003534:	6011      	str	r1, [r2, #0]
 8003536:	f107 0210 	add.w	r2, r7, #16
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	fa92 f1a2 	rbit	r1, r2
 8003540:	f107 020c 	add.w	r2, r7, #12
 8003544:	6011      	str	r1, [r2, #0]
  return result;
 8003546:	f107 020c 	add.w	r2, r7, #12
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	fab2 f282 	clz	r2, r2
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	f042 0220 	orr.w	r2, r2, #32
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	f002 021f 	and.w	r2, r2, #31
 800355c:	2101      	movs	r1, #1
 800355e:	fa01 f202 	lsl.w	r2, r1, r2
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d19e      	bne.n	80034a6 <HAL_RCC_OscConfig+0xcfe>
 8003568:	e01e      	b.n	80035a8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e018      	b.n	80035aa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003578:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <HAL_RCC_OscConfig+0xe0c>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003580:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003584:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	429a      	cmp	r2, r3
 8003590:	d108      	bne.n	80035a4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003592:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000

080035b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b09e      	sub	sp, #120	; 0x78
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e162      	b.n	8003896 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d0:	4b90      	ldr	r3, [pc, #576]	; (8003814 <HAL_RCC_ClockConfig+0x25c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d910      	bls.n	8003600 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b8d      	ldr	r3, [pc, #564]	; (8003814 <HAL_RCC_ClockConfig+0x25c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 0207 	bic.w	r2, r3, #7
 80035e6:	498b      	ldr	r1, [pc, #556]	; (8003814 <HAL_RCC_ClockConfig+0x25c>)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b89      	ldr	r3, [pc, #548]	; (8003814 <HAL_RCC_ClockConfig+0x25c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e14a      	b.n	8003896 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d008      	beq.n	800361e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b82      	ldr	r3, [pc, #520]	; (8003818 <HAL_RCC_ClockConfig+0x260>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	497f      	ldr	r1, [pc, #508]	; (8003818 <HAL_RCC_ClockConfig+0x260>)
 800361a:	4313      	orrs	r3, r2
 800361c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80dc 	beq.w	80037e4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d13c      	bne.n	80036ae <HAL_RCC_ClockConfig+0xf6>
 8003634:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003638:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003644:	fab3 f383 	clz	r3, r3
 8003648:	b2db      	uxtb	r3, r3
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d102      	bne.n	800365e <HAL_RCC_ClockConfig+0xa6>
 8003658:	4b6f      	ldr	r3, [pc, #444]	; (8003818 <HAL_RCC_ClockConfig+0x260>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	e00f      	b.n	800367e <HAL_RCC_ClockConfig+0xc6>
 800365e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003662:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	667b      	str	r3, [r7, #100]	; 0x64
 800366c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003670:	663b      	str	r3, [r7, #96]	; 0x60
 8003672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800367a:	4b67      	ldr	r3, [pc, #412]	; (8003818 <HAL_RCC_ClockConfig+0x260>)
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003682:	65ba      	str	r2, [r7, #88]	; 0x58
 8003684:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003686:	fa92 f2a2 	rbit	r2, r2
 800368a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800368c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800368e:	fab2 f282 	clz	r2, r2
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	f042 0220 	orr.w	r2, r2, #32
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	f002 021f 	and.w	r2, r2, #31
 800369e:	2101      	movs	r1, #1
 80036a0:	fa01 f202 	lsl.w	r2, r1, r2
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d17b      	bne.n	80037a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0f3      	b.n	8003896 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d13c      	bne.n	8003730 <HAL_RCC_ClockConfig+0x178>
 80036b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036c6:	fab3 f383 	clz	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d102      	bne.n	80036e0 <HAL_RCC_ClockConfig+0x128>
 80036da:	4b4f      	ldr	r3, [pc, #316]	; (8003818 <HAL_RCC_ClockConfig+0x260>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	e00f      	b.n	8003700 <HAL_RCC_ClockConfig+0x148>
 80036e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	647b      	str	r3, [r7, #68]	; 0x44
 80036ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f2:	643b      	str	r3, [r7, #64]	; 0x40
 80036f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f6:	fa93 f3a3 	rbit	r3, r3
 80036fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036fc:	4b46      	ldr	r3, [pc, #280]	; (8003818 <HAL_RCC_ClockConfig+0x260>)
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003704:	63ba      	str	r2, [r7, #56]	; 0x38
 8003706:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003708:	fa92 f2a2 	rbit	r2, r2
 800370c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800370e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f042 0220 	orr.w	r2, r2, #32
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f002 021f 	and.w	r2, r2, #31
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d13a      	bne.n	80037a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0b2      	b.n	8003896 <HAL_RCC_ClockConfig+0x2de>
 8003730:	2302      	movs	r3, #2
 8003732:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373e:	fab3 f383 	clz	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d102      	bne.n	8003758 <HAL_RCC_ClockConfig+0x1a0>
 8003752:	4b31      	ldr	r3, [pc, #196]	; (8003818 <HAL_RCC_ClockConfig+0x260>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	e00d      	b.n	8003774 <HAL_RCC_ClockConfig+0x1bc>
 8003758:	2302      	movs	r3, #2
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
 8003764:	2302      	movs	r3, #2
 8003766:	623b      	str	r3, [r7, #32]
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	fa93 f3a3 	rbit	r3, r3
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	4b29      	ldr	r3, [pc, #164]	; (8003818 <HAL_RCC_ClockConfig+0x260>)
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	2202      	movs	r2, #2
 8003776:	61ba      	str	r2, [r7, #24]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	fa92 f2a2 	rbit	r2, r2
 800377e:	617a      	str	r2, [r7, #20]
  return result;
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	fab2 f282 	clz	r2, r2
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	f042 0220 	orr.w	r2, r2, #32
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f002 021f 	and.w	r2, r2, #31
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f202 	lsl.w	r2, r1, r2
 8003798:	4013      	ands	r3, r2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e079      	b.n	8003896 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037a2:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <HAL_RCC_ClockConfig+0x260>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f023 0203 	bic.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	491a      	ldr	r1, [pc, #104]	; (8003818 <HAL_RCC_ClockConfig+0x260>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b4:	f7fd f9fe 	bl	8000bb4 <HAL_GetTick>
 80037b8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037bc:	f7fd f9fa 	bl	8000bb4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e061      	b.n	8003896 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_RCC_ClockConfig+0x260>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 020c 	and.w	r2, r3, #12
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d1eb      	bne.n	80037bc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037e4:	4b0b      	ldr	r3, [pc, #44]	; (8003814 <HAL_RCC_ClockConfig+0x25c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d214      	bcs.n	800381c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b08      	ldr	r3, [pc, #32]	; (8003814 <HAL_RCC_ClockConfig+0x25c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f023 0207 	bic.w	r2, r3, #7
 80037fa:	4906      	ldr	r1, [pc, #24]	; (8003814 <HAL_RCC_ClockConfig+0x25c>)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4313      	orrs	r3, r2
 8003800:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b04      	ldr	r3, [pc, #16]	; (8003814 <HAL_RCC_ClockConfig+0x25c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d005      	beq.n	800381c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e040      	b.n	8003896 <HAL_RCC_ClockConfig+0x2de>
 8003814:	40022000 	.word	0x40022000
 8003818:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003828:	4b1d      	ldr	r3, [pc, #116]	; (80038a0 <HAL_RCC_ClockConfig+0x2e8>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	491a      	ldr	r1, [pc, #104]	; (80038a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d009      	beq.n	800385a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4912      	ldr	r1, [pc, #72]	; (80038a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800385a:	f000 f829 	bl	80038b0 <HAL_RCC_GetSysClockFreq>
 800385e:	4601      	mov	r1, r0
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <HAL_RCC_ClockConfig+0x2e8>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003868:	22f0      	movs	r2, #240	; 0xf0
 800386a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	fa92 f2a2 	rbit	r2, r2
 8003872:	60fa      	str	r2, [r7, #12]
  return result;
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	fab2 f282 	clz	r2, r2
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	40d3      	lsrs	r3, r2
 800387e:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <HAL_RCC_ClockConfig+0x2ec>)
 8003880:	5cd3      	ldrb	r3, [r2, r3]
 8003882:	fa21 f303 	lsr.w	r3, r1, r3
 8003886:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <HAL_RCC_ClockConfig+0x2f0>)
 8003888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800388a:	4b08      	ldr	r3, [pc, #32]	; (80038ac <HAL_RCC_ClockConfig+0x2f4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f7fd f94c 	bl	8000b2c <HAL_InitTick>
  
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3778      	adds	r7, #120	; 0x78
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40021000 	.word	0x40021000
 80038a4:	08005d80 	.word	0x08005d80
 80038a8:	20000008 	.word	0x20000008
 80038ac:	20000000 	.word	0x20000000

080038b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b08b      	sub	sp, #44	; 0x2c
 80038b4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	2300      	movs	r3, #0
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80038ca:	4b29      	ldr	r3, [pc, #164]	; (8003970 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d002      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0x30>
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0x36>
 80038de:	e03c      	b.n	800395a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038e0:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038e2:	623b      	str	r3, [r7, #32]
      break;
 80038e4:	e03c      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80038ec:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80038f0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	fa92 f2a2 	rbit	r2, r2
 80038f8:	607a      	str	r2, [r7, #4]
  return result;
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	fab2 f282 	clz	r2, r2
 8003900:	b2d2      	uxtb	r2, r2
 8003902:	40d3      	lsrs	r3, r2
 8003904:	4a1c      	ldr	r2, [pc, #112]	; (8003978 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003906:	5cd3      	ldrb	r3, [r2, r3]
 8003908:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800390a:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_RCC_GetSysClockFreq+0xc0>)
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	220f      	movs	r2, #15
 8003914:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	fa92 f2a2 	rbit	r2, r2
 800391c:	60fa      	str	r2, [r7, #12]
  return result;
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	fab2 f282 	clz	r2, r2
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	40d3      	lsrs	r3, r2
 8003928:	4a14      	ldr	r2, [pc, #80]	; (800397c <HAL_RCC_GetSysClockFreq+0xcc>)
 800392a:	5cd3      	ldrb	r3, [r2, r3]
 800392c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003938:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <HAL_RCC_GetSysClockFreq+0xc4>)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	fb02 f303 	mul.w	r3, r2, r3
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
 8003948:	e004      	b.n	8003954 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <HAL_RCC_GetSysClockFreq+0xd0>)
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	623b      	str	r3, [r7, #32]
      break;
 8003958:	e002      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <HAL_RCC_GetSysClockFreq+0xc4>)
 800395c:	623b      	str	r3, [r7, #32]
      break;
 800395e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003960:	6a3b      	ldr	r3, [r7, #32]
}
 8003962:	4618      	mov	r0, r3
 8003964:	372c      	adds	r7, #44	; 0x2c
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	40021000 	.word	0x40021000
 8003974:	007a1200 	.word	0x007a1200
 8003978:	08005d60 	.word	0x08005d60
 800397c:	08005d70 	.word	0x08005d70
 8003980:	003d0900 	.word	0x003d0900

08003984 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b092      	sub	sp, #72	; 0x48
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80d7 	beq.w	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a8:	4b4e      	ldr	r3, [pc, #312]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10e      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b4:	4b4b      	ldr	r3, [pc, #300]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	4a4a      	ldr	r2, [pc, #296]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039be:	61d3      	str	r3, [r2, #28]
 80039c0:	4b48      	ldr	r3, [pc, #288]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039c2:	69db      	ldr	r3, [r3, #28]
 80039c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d2:	4b45      	ldr	r3, [pc, #276]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d118      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039de:	4b42      	ldr	r3, [pc, #264]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a41      	ldr	r2, [pc, #260]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ea:	f7fd f8e3 	bl	8000bb4 <HAL_GetTick>
 80039ee:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	e008      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fd f8df 	bl	8000bb4 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b64      	cmp	r3, #100	; 0x64
 80039fe:	d901      	bls.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e169      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a10:	4b34      	ldr	r3, [pc, #208]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8084 	beq.w	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d07c      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a30:	4b2c      	ldr	r3, [pc, #176]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a4a:	fab3 f383 	clz	r3, r3
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	4b26      	ldr	r3, [pc, #152]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a66:	fa93 f3a3 	rbit	r3, r3
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003a82:	4a18      	ldr	r2, [pc, #96]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a86:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d04b      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fd f88f 	bl	8000bb4 <HAL_GetTick>
 8003a96:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fd f88b 	bl	8000bb4 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e113      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab6:	fa93 f3a3 	rbit	r3, r3
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
 8003abc:	2302      	movs	r3, #2
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	61fb      	str	r3, [r7, #28]
  return result;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	095b      	lsrs	r3, r3, #5
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	f043 0302 	orr.w	r3, r3, #2
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d108      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003ade:	4b01      	ldr	r3, [pc, #4]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	e00d      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	10908100 	.word	0x10908100
 8003af0:	2302      	movs	r3, #2
 8003af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	4b78      	ldr	r3, [pc, #480]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2202      	movs	r2, #2
 8003b02:	613a      	str	r2, [r7, #16]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	fa92 f2a2 	rbit	r2, r2
 8003b0a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	fab2 f282 	clz	r2, r2
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	f002 021f 	and.w	r2, r2, #31
 8003b1e:	2101      	movs	r1, #1
 8003b20:	fa01 f202 	lsl.w	r2, r1, r2
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0b7      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b2a:	4b6d      	ldr	r3, [pc, #436]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	496a      	ldr	r1, [pc, #424]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d105      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b44:	4b66      	ldr	r3, [pc, #408]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4a65      	ldr	r2, [pc, #404]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b5c:	4b60      	ldr	r3, [pc, #384]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	f023 0203 	bic.w	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	495d      	ldr	r1, [pc, #372]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d008      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b7a:	4b59      	ldr	r3, [pc, #356]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	4956      	ldr	r1, [pc, #344]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b98:	4b51      	ldr	r3, [pc, #324]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	494e      	ldr	r1, [pc, #312]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb6:	4b4a      	ldr	r3, [pc, #296]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f023 0210 	bic.w	r2, r3, #16
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	4947      	ldr	r1, [pc, #284]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003bd4:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be0:	493f      	ldr	r1, [pc, #252]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d008      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bf2:	4b3b      	ldr	r3, [pc, #236]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf6:	f023 0220 	bic.w	r2, r3, #32
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	4938      	ldr	r1, [pc, #224]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c10:	4b33      	ldr	r3, [pc, #204]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	4930      	ldr	r1, [pc, #192]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d008      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	4929      	ldr	r1, [pc, #164]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c4c:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	4921      	ldr	r1, [pc, #132]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	491a      	ldr	r1, [pc, #104]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003c88:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	4912      	ldr	r1, [pc, #72]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d008      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	490b      	ldr	r1, [pc, #44]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d008      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd0:	4903      	ldr	r1, [pc, #12]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3748      	adds	r7, #72	; 0x48
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000

08003ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ce8:	f7fc ff0a 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003cec:	f000 f828 	bl	8003d40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003cf0:	f000 f8d6 	bl	8003ea0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8003cf4:	f000 f876 	bl	8003de4 <MX_I2C2_Init>
  MX_IWDG_Init();
 8003cf8:	f000 f8b4 	bl	8003e64 <MX_IWDG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ExchangeFinish=1;
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	; (8003d34 <main+0x50>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  if (ExchangeFinish)
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <main+0x50>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0fa      	beq.n	8003d02 <main+0x1e>
	  		{
	  		while (HAL_I2C_GetState(&hi2c2) != HAL_I2C_STATE_READY) {HAL_IWDG_Refresh(&hiwdg);};
 8003d0c:	e002      	b.n	8003d14 <main+0x30>
 8003d0e:	480a      	ldr	r0, [pc, #40]	; (8003d38 <main+0x54>)
 8003d10:	f7fe fd3a 	bl	8002788 <HAL_IWDG_Refresh>
 8003d14:	4809      	ldr	r0, [pc, #36]	; (8003d3c <main+0x58>)
 8003d16:	f7fd fcc2 	bl	800169e <HAL_I2C_GetState>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d1f6      	bne.n	8003d0e <main+0x2a>

	  		if (HAL_I2C_EnableListen_IT(&hi2c2) != HAL_OK) {HAL_IWDG_Refresh(&hiwdg);};
 8003d20:	4806      	ldr	r0, [pc, #24]	; (8003d3c <main+0x58>)
 8003d22:	f7fd fbf1 	bl	8001508 <HAL_I2C_EnableListen_IT>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ea      	beq.n	8003d02 <main+0x1e>
 8003d2c:	4802      	ldr	r0, [pc, #8]	; (8003d38 <main+0x54>)
 8003d2e:	f7fe fd2b 	bl	8002788 <HAL_IWDG_Refresh>
	  if (ExchangeFinish)
 8003d32:	e7e6      	b.n	8003d02 <main+0x1e>
 8003d34:	20000005 	.word	0x20000005
 8003d38:	20000210 	.word	0x20000210
 8003d3c:	20000220 	.word	0x20000220

08003d40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b09e      	sub	sp, #120	; 0x78
 8003d44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d4a:	2228      	movs	r2, #40	; 0x28
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 facc 	bl	80042ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	605a      	str	r2, [r3, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	60da      	str	r2, [r3, #12]
 8003d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d64:	463b      	mov	r3, r7
 8003d66:	223c      	movs	r2, #60	; 0x3c
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fabe 	bl	80042ec <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003d70:	230a      	movs	r3, #10
 8003d72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d74:	2301      	movs	r3, #1
 8003d76:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d78:	2310      	movs	r3, #16
 8003d7a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003d80:	2300      	movs	r3, #0
 8003d82:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d84:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe fd0d 	bl	80027a8 <HAL_RCC_OscConfig>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003d94:	f000 f952 	bl	800403c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d98:	230f      	movs	r3, #15
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003da0:	2300      	movs	r3, #0
 8003da2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003da4:	2300      	movs	r3, #0
 8003da6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003da8:	2300      	movs	r3, #0
 8003daa:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003dac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003db0:	2100      	movs	r1, #0
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fc00 	bl	80035b8 <HAL_RCC_ClockConfig>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003dbe:	f000 f93d 	bl	800403c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003dc2:	2340      	movs	r3, #64	; 0x40
 8003dc4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003dca:	463b      	mov	r3, r7
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fdd9 	bl	8003984 <HAL_RCCEx_PeriphCLKConfig>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003dd8:	f000 f930 	bl	800403c <Error_Handler>
  }
}
 8003ddc:	bf00      	nop
 8003dde:	3778      	adds	r7, #120	; 0x78
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003dea:	4a1c      	ldr	r2, [pc, #112]	; (8003e5c <MX_I2C2_Init+0x78>)
 8003dec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00103D84;
 8003dee:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003df0:	4a1b      	ldr	r2, [pc, #108]	; (8003e60 <MX_I2C2_Init+0x7c>)
 8003df2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0x33;
 8003df4:	4b18      	ldr	r3, [pc, #96]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003df6:	2233      	movs	r2, #51	; 0x33
 8003df8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dfa:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e00:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003e06:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e12:	4b11      	ldr	r3, [pc, #68]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003e1e:	480e      	ldr	r0, [pc, #56]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003e20:	f7fd f99e 	bl	8001160 <HAL_I2C_Init>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003e2a:	f000 f907 	bl	800403c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003e2e:	2100      	movs	r1, #0
 8003e30:	4809      	ldr	r0, [pc, #36]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003e32:	f7fe fbcc 	bl	80025ce <HAL_I2CEx_ConfigAnalogFilter>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003e3c:	f000 f8fe 	bl	800403c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003e40:	2100      	movs	r1, #0
 8003e42:	4805      	ldr	r0, [pc, #20]	; (8003e58 <MX_I2C2_Init+0x74>)
 8003e44:	f7fe fc0e 	bl	8002664 <HAL_I2CEx_ConfigDigitalFilter>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003e4e:	f000 f8f5 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000220 	.word	0x20000220
 8003e5c:	40005800 	.word	0x40005800
 8003e60:	00103d84 	.word	0x00103d84

08003e64 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <MX_IWDG_Init+0x34>)
 8003e6a:	4a0c      	ldr	r2, [pc, #48]	; (8003e9c <MX_IWDG_Init+0x38>)
 8003e6c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <MX_IWDG_Init+0x34>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <MX_IWDG_Init+0x34>)
 8003e76:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003e7a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <MX_IWDG_Init+0x34>)
 8003e7e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003e82:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003e84:	4804      	ldr	r0, [pc, #16]	; (8003e98 <MX_IWDG_Init+0x34>)
 8003e86:	f7fe fc39 	bl	80026fc <HAL_IWDG_Init>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8003e90:	f000 f8d4 	bl	800403c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003e94:	bf00      	nop
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000210 	.word	0x20000210
 8003e9c:	40003000 	.word	0x40003000

08003ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea6:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <MX_GPIO_Init+0x2c>)
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	4a08      	ldr	r2, [pc, #32]	; (8003ecc <MX_GPIO_Init+0x2c>)
 8003eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb0:	6153      	str	r3, [r2, #20]
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <MX_GPIO_Init+0x2c>)
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]

}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40021000 	.word	0x40021000

08003ed0 <HAL_I2C_AddrCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
 8003edc:	4613      	mov	r3, r2
 8003ede:	803b      	strh	r3, [r7, #0]
	UNUSED(AddrMatchCode);

	if (hi2c->Instance == I2C2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <HAL_I2C_AddrCallback+0x60>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d11d      	bne.n	8003f26 <HAL_I2C_AddrCallback+0x56>
		{
		//transferRequested	= 1;
		WaitReg=1;
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <HAL_I2C_AddrCallback+0x64>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	701a      	strb	r2, [r3, #0]
		ExchangeFinish=0;
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <HAL_I2C_AddrCallback+0x68>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]

		switch (TransferDirection)
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00d      	beq.n	8003f18 <HAL_I2C_AddrCallback+0x48>
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d000      	beq.n	8003f02 <HAL_I2C_AddrCallback+0x32>
			case I2C_DIRECTION_TRANSMIT:
				HAL_I2C_Slave_Seq_Receive_IT (&hi2c2, (uint8_t *)&Reg, 1, I2C_FIRST_FRAME);
				break;
			};
		};
}
 8003f00:	e011      	b.n	8003f26 <HAL_I2C_AddrCallback+0x56>
				HAL_I2C_Slave_Seq_Transmit_IT(&hi2c2, (uint8_t *)&RegData_WriteToMaster, RegSize, I2C_LAST_FRAME);
 8003f02:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <HAL_I2C_AddrCallback+0x6c>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f0e:	490c      	ldr	r1, [pc, #48]	; (8003f40 <HAL_I2C_AddrCallback+0x70>)
 8003f10:	480c      	ldr	r0, [pc, #48]	; (8003f44 <HAL_I2C_AddrCallback+0x74>)
 8003f12:	f7fd f9b5 	bl	8001280 <HAL_I2C_Slave_Seq_Transmit_IT>
				break;
 8003f16:	e006      	b.n	8003f26 <HAL_I2C_AddrCallback+0x56>
				HAL_I2C_Slave_Seq_Receive_IT (&hi2c2, (uint8_t *)&Reg, 1, I2C_FIRST_FRAME);
 8003f18:	2300      	movs	r3, #0
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	490a      	ldr	r1, [pc, #40]	; (8003f48 <HAL_I2C_AddrCallback+0x78>)
 8003f1e:	4809      	ldr	r0, [pc, #36]	; (8003f44 <HAL_I2C_AddrCallback+0x74>)
 8003f20:	f7fd fa50 	bl	80013c4 <HAL_I2C_Slave_Seq_Receive_IT>
				break;
 8003f24:	bf00      	nop
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40005800 	.word	0x40005800
 8003f34:	200001f8 	.word	0x200001f8
 8003f38:	20000005 	.word	0x20000005
 8003f3c:	20000007 	.word	0x20000007
 8003f40:	200001fc 	.word	0x200001fc
 8003f44:	20000220 	.word	0x20000220
 8003f48:	20000006 	.word	0x20000006

08003f4c <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	static volatile HAL_StatusTypeDef Res;

	if (WaitReg)
 8003f54:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d023      	beq.n	8003fa6 <HAL_I2C_SlaveRxCpltCallback+0x5a>
		{
		WaitReg=0;
 8003f5e:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <HAL_I2C_SlaveRxCpltCallback+0x70>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	701a      	strb	r2, [r3, #0]

		switch(Reg)
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d106      	bne.n	8003f7c <HAL_I2C_SlaveRxCpltCallback+0x30>
			{
			case  1: RegSize=2; RegData_WriteToMaster=(uint16_t)200;					break;
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8003f70:	2202      	movs	r2, #2
 8003f72:	701a      	strb	r2, [r3, #0]
 8003f74:	4b14      	ldr	r3, [pc, #80]	; (8003fc8 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8003f76:	22c8      	movs	r2, #200	; 0xc8
 8003f78:	801a      	strh	r2, [r3, #0]
 8003f7a:	e006      	b.n	8003f8a <HAL_I2C_SlaveRxCpltCallback+0x3e>
			default: RegSize=2; RegData_WriteToMaster=10; break;
 8003f7c:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8003f7e:	2202      	movs	r2, #2
 8003f80:	701a      	strb	r2, [r3, #0]
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_I2C_SlaveRxCpltCallback+0x7c>)
 8003f84:	220a      	movs	r2, #10
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	bf00      	nop
			};

		RegData_WriteToSlave=0;
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Slave_Seq_Receive_IT(&hi2c2, (uint8_t *)&RegData_WriteToSlave, RegSize, I2C_LAST_FRAME);
 8003f90:	4b0c      	ldr	r3, [pc, #48]	; (8003fc4 <HAL_I2C_SlaveRxCpltCallback+0x78>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f9c:	490b      	ldr	r1, [pc, #44]	; (8003fcc <HAL_I2C_SlaveRxCpltCallback+0x80>)
 8003f9e:	480c      	ldr	r0, [pc, #48]	; (8003fd0 <HAL_I2C_SlaveRxCpltCallback+0x84>)
 8003fa0:	f7fd fa10 	bl	80013c4 <HAL_I2C_Slave_Seq_Receive_IT>
 8003fa4:	e004      	b.n	8003fb0 <HAL_I2C_SlaveRxCpltCallback+0x64>
		}
	else
		{
		ExchangeFinish=1;
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_I2C_SlaveRxCpltCallback+0x88>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	701a      	strb	r2, [r3, #0]

		switch(Reg)
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <HAL_I2C_SlaveRxCpltCallback+0x74>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
			{
			//case  1: Control.HLK_Heat_PWMCurrentControl	=(int16_t)	RegData_WriteToSlave;						break;
			};
		};

	UNUSED(Res);
 8003fb0:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_I2C_SlaveRxCpltCallback+0x8c>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	200001f8 	.word	0x200001f8
 8003fc0:	20000006 	.word	0x20000006
 8003fc4:	20000007 	.word	0x20000007
 8003fc8:	200001fc 	.word	0x200001fc
 8003fcc:	200001fa 	.word	0x200001fa
 8003fd0:	20000220 	.word	0x20000220
 8003fd4:	20000005 	.word	0x20000005
 8003fd8:	200001fe 	.word	0x200001fe

08003fdc <HAL_I2C_SlaveTxCpltCallback>:
void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
	ExchangeFinish=1;
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]

	UNUSED(hi2c);
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000005 	.word	0x20000005

08003ffc <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
	ExchangeFinish=1;
 8004004:	4b04      	ldr	r3, [pc, #16]	; (8004018 <HAL_I2C_ListenCpltCallback+0x1c>)
 8004006:	2201      	movs	r2, #1
 8004008:	701a      	strb	r2, [r3, #0]

	UNUSED(hi2c);
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000005 	.word	0x20000005

0800401c <HAL_I2C_ErrorCallback>:


void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
	ExchangeFinish=1;
 8004024:	4b04      	ldr	r3, [pc, #16]	; (8004038 <HAL_I2C_ErrorCallback+0x1c>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]

	UNUSED(hi2c);
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	20000005 	.word	0x20000005

0800403c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <HAL_MspInit+0x44>)
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	4a0e      	ldr	r2, [pc, #56]	; (8004090 <HAL_MspInit+0x44>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	6193      	str	r3, [r2, #24]
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <HAL_MspInit+0x44>)
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	607b      	str	r3, [r7, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	4b09      	ldr	r3, [pc, #36]	; (8004090 <HAL_MspInit+0x44>)
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	4a08      	ldr	r2, [pc, #32]	; (8004090 <HAL_MspInit+0x44>)
 8004070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004074:	61d3      	str	r3, [r2, #28]
 8004076:	4b06      	ldr	r3, [pc, #24]	; (8004090 <HAL_MspInit+0x44>)
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000

08004094 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	60da      	str	r2, [r3, #12]
 80040aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a20      	ldr	r2, [pc, #128]	; (8004134 <HAL_I2C_MspInit+0xa0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d139      	bne.n	800412a <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040b6:	4b20      	ldr	r3, [pc, #128]	; (8004138 <HAL_I2C_MspInit+0xa4>)
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	4a1f      	ldr	r2, [pc, #124]	; (8004138 <HAL_I2C_MspInit+0xa4>)
 80040bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c0:	6153      	str	r3, [r2, #20]
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_I2C_MspInit+0xa4>)
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PA9     ------> I2C2_SCL
    PA10     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040ce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040d4:	2312      	movs	r3, #18
 80040d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040d8:	2301      	movs	r3, #1
 80040da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040dc:	2303      	movs	r3, #3
 80040de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80040e0:	2304      	movs	r3, #4
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e4:	f107 0314 	add.w	r3, r7, #20
 80040e8:	4619      	mov	r1, r3
 80040ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040ee:	f7fc febd 	bl	8000e6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <HAL_I2C_MspInit+0xa4>)
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	4a10      	ldr	r2, [pc, #64]	; (8004138 <HAL_I2C_MspInit+0xa4>)
 80040f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040fc:	61d3      	str	r3, [r2, #28]
 80040fe:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <HAL_I2C_MspInit+0xa4>)
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800410a:	2200      	movs	r2, #0
 800410c:	2100      	movs	r1, #0
 800410e:	2021      	movs	r0, #33	; 0x21
 8004110:	f7fc fe37 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004114:	2021      	movs	r0, #33	; 0x21
 8004116:	f7fc fe50 	bl	8000dba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800411a:	2200      	movs	r2, #0
 800411c:	2100      	movs	r1, #0
 800411e:	2022      	movs	r0, #34	; 0x22
 8004120:	f7fc fe2f 	bl	8000d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004124:	2022      	movs	r0, #34	; 0x22
 8004126:	f7fc fe48 	bl	8000dba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800412a:	bf00      	nop
 800412c:	3728      	adds	r7, #40	; 0x28
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40005800 	.word	0x40005800
 8004138:	40021000 	.word	0x40021000

0800413c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800414a:	b480      	push	{r7}
 800414c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800414e:	e7fe      	b.n	800414e <HardFault_Handler+0x4>

08004150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004154:	e7fe      	b.n	8004154 <MemManage_Handler+0x4>

08004156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004156:	b480      	push	{r7}
 8004158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800415a:	e7fe      	b.n	800415a <BusFault_Handler+0x4>

0800415c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004160:	e7fe      	b.n	8004160 <UsageFault_Handler+0x4>

08004162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004166:	bf00      	nop
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800417e:	b480      	push	{r7}
 8004180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004190:	f7fc fcfc 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004194:	bf00      	nop
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event global interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800419c:	4802      	ldr	r0, [pc, #8]	; (80041a8 <I2C2_EV_IRQHandler+0x10>)
 800419e:	f7fd f9d1 	bl	8001544 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000220 	.word	0x20000220

080041ac <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80041b0:	4802      	ldr	r0, [pc, #8]	; (80041bc <I2C2_ER_IRQHandler+0x10>)
 80041b2:	f7fd f9e1 	bl	8001578 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000220 	.word	0x20000220

080041c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <_sbrk+0x50>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d102      	bne.n	80041d6 <_sbrk+0x16>
		heap_end = &end;
 80041d0:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <_sbrk+0x50>)
 80041d2:	4a10      	ldr	r2, [pc, #64]	; (8004214 <_sbrk+0x54>)
 80041d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80041d6:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <_sbrk+0x50>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <_sbrk+0x50>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4413      	add	r3, r2
 80041e4:	466a      	mov	r2, sp
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d907      	bls.n	80041fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80041ea:	f000 f855 	bl	8004298 <__errno>
 80041ee:	4602      	mov	r2, r0
 80041f0:	230c      	movs	r3, #12
 80041f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80041f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041f8:	e006      	b.n	8004208 <_sbrk+0x48>
	}

	heap_end += incr;
 80041fa:	4b05      	ldr	r3, [pc, #20]	; (8004210 <_sbrk+0x50>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4413      	add	r3, r2
 8004202:	4a03      	ldr	r2, [pc, #12]	; (8004210 <_sbrk+0x50>)
 8004204:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004206:	68fb      	ldr	r3, [r7, #12]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000200 	.word	0x20000200
 8004214:	20000270 	.word	0x20000270

08004218 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <SystemInit+0x28>)
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	4a07      	ldr	r2, [pc, #28]	; (8004240 <SystemInit+0x28>)
 8004224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <SystemInit+0x28>)
 800422e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004232:	609a      	str	r2, [r3, #8]
#endif
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	e000ed00 	.word	0xe000ed00

08004244 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800427c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004248:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800424a:	e003      	b.n	8004254 <LoopCopyDataInit>

0800424c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800424e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004250:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004252:	3104      	adds	r1, #4

08004254 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004254:	480b      	ldr	r0, [pc, #44]	; (8004284 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004256:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004258:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800425a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800425c:	d3f6      	bcc.n	800424c <CopyDataInit>
	ldr	r2, =_sbss
 800425e:	4a0b      	ldr	r2, [pc, #44]	; (800428c <LoopForever+0x12>)
	b	LoopFillZerobss
 8004260:	e002      	b.n	8004268 <LoopFillZerobss>

08004262 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004262:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004264:	f842 3b04 	str.w	r3, [r2], #4

08004268 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004268:	4b09      	ldr	r3, [pc, #36]	; (8004290 <LoopForever+0x16>)
	cmp	r2, r3
 800426a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800426c:	d3f9      	bcc.n	8004262 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800426e:	f7ff ffd3 	bl	8004218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004272:	f000 f817 	bl	80042a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004276:	f7ff fd35 	bl	8003ce4 <main>

0800427a <LoopForever>:

LoopForever:
    b LoopForever
 800427a:	e7fe      	b.n	800427a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800427c:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8004280:	08005fc0 	.word	0x08005fc0
	ldr	r0, =_sdata
 8004284:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004288:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 800428c:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8004290:	20000270 	.word	0x20000270

08004294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004294:	e7fe      	b.n	8004294 <ADC1_2_IRQHandler>
	...

08004298 <__errno>:
 8004298:	4b01      	ldr	r3, [pc, #4]	; (80042a0 <__errno+0x8>)
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	2000000c 	.word	0x2000000c

080042a4 <__libc_init_array>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	4e0d      	ldr	r6, [pc, #52]	; (80042dc <__libc_init_array+0x38>)
 80042a8:	4c0d      	ldr	r4, [pc, #52]	; (80042e0 <__libc_init_array+0x3c>)
 80042aa:	1ba4      	subs	r4, r4, r6
 80042ac:	10a4      	asrs	r4, r4, #2
 80042ae:	2500      	movs	r5, #0
 80042b0:	42a5      	cmp	r5, r4
 80042b2:	d109      	bne.n	80042c8 <__libc_init_array+0x24>
 80042b4:	4e0b      	ldr	r6, [pc, #44]	; (80042e4 <__libc_init_array+0x40>)
 80042b6:	4c0c      	ldr	r4, [pc, #48]	; (80042e8 <__libc_init_array+0x44>)
 80042b8:	f001 fd44 	bl	8005d44 <_init>
 80042bc:	1ba4      	subs	r4, r4, r6
 80042be:	10a4      	asrs	r4, r4, #2
 80042c0:	2500      	movs	r5, #0
 80042c2:	42a5      	cmp	r5, r4
 80042c4:	d105      	bne.n	80042d2 <__libc_init_array+0x2e>
 80042c6:	bd70      	pop	{r4, r5, r6, pc}
 80042c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042cc:	4798      	blx	r3
 80042ce:	3501      	adds	r5, #1
 80042d0:	e7ee      	b.n	80042b0 <__libc_init_array+0xc>
 80042d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042d6:	4798      	blx	r3
 80042d8:	3501      	adds	r5, #1
 80042da:	e7f2      	b.n	80042c2 <__libc_init_array+0x1e>
 80042dc:	08005fb8 	.word	0x08005fb8
 80042e0:	08005fb8 	.word	0x08005fb8
 80042e4:	08005fb8 	.word	0x08005fb8
 80042e8:	08005fbc 	.word	0x08005fbc

080042ec <memset>:
 80042ec:	4402      	add	r2, r0
 80042ee:	4603      	mov	r3, r0
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d100      	bne.n	80042f6 <memset+0xa>
 80042f4:	4770      	bx	lr
 80042f6:	f803 1b01 	strb.w	r1, [r3], #1
 80042fa:	e7f9      	b.n	80042f0 <memset+0x4>

080042fc <__cvt>:
 80042fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004300:	ec55 4b10 	vmov	r4, r5, d0
 8004304:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004306:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800430a:	2d00      	cmp	r5, #0
 800430c:	460e      	mov	r6, r1
 800430e:	4691      	mov	r9, r2
 8004310:	4619      	mov	r1, r3
 8004312:	bfb8      	it	lt
 8004314:	4622      	movlt	r2, r4
 8004316:	462b      	mov	r3, r5
 8004318:	f027 0720 	bic.w	r7, r7, #32
 800431c:	bfbb      	ittet	lt
 800431e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004322:	461d      	movlt	r5, r3
 8004324:	2300      	movge	r3, #0
 8004326:	232d      	movlt	r3, #45	; 0x2d
 8004328:	bfb8      	it	lt
 800432a:	4614      	movlt	r4, r2
 800432c:	2f46      	cmp	r7, #70	; 0x46
 800432e:	700b      	strb	r3, [r1, #0]
 8004330:	d004      	beq.n	800433c <__cvt+0x40>
 8004332:	2f45      	cmp	r7, #69	; 0x45
 8004334:	d100      	bne.n	8004338 <__cvt+0x3c>
 8004336:	3601      	adds	r6, #1
 8004338:	2102      	movs	r1, #2
 800433a:	e000      	b.n	800433e <__cvt+0x42>
 800433c:	2103      	movs	r1, #3
 800433e:	ab03      	add	r3, sp, #12
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	ab02      	add	r3, sp, #8
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	4632      	mov	r2, r6
 8004348:	4653      	mov	r3, sl
 800434a:	ec45 4b10 	vmov	d0, r4, r5
 800434e:	f000 fbab 	bl	8004aa8 <_dtoa_r>
 8004352:	2f47      	cmp	r7, #71	; 0x47
 8004354:	4680      	mov	r8, r0
 8004356:	d102      	bne.n	800435e <__cvt+0x62>
 8004358:	f019 0f01 	tst.w	r9, #1
 800435c:	d026      	beq.n	80043ac <__cvt+0xb0>
 800435e:	2f46      	cmp	r7, #70	; 0x46
 8004360:	eb08 0906 	add.w	r9, r8, r6
 8004364:	d111      	bne.n	800438a <__cvt+0x8e>
 8004366:	f898 3000 	ldrb.w	r3, [r8]
 800436a:	2b30      	cmp	r3, #48	; 0x30
 800436c:	d10a      	bne.n	8004384 <__cvt+0x88>
 800436e:	2200      	movs	r2, #0
 8004370:	2300      	movs	r3, #0
 8004372:	4620      	mov	r0, r4
 8004374:	4629      	mov	r1, r5
 8004376:	f7fc fb53 	bl	8000a20 <__aeabi_dcmpeq>
 800437a:	b918      	cbnz	r0, 8004384 <__cvt+0x88>
 800437c:	f1c6 0601 	rsb	r6, r6, #1
 8004380:	f8ca 6000 	str.w	r6, [sl]
 8004384:	f8da 3000 	ldr.w	r3, [sl]
 8004388:	4499      	add	r9, r3
 800438a:	2200      	movs	r2, #0
 800438c:	2300      	movs	r3, #0
 800438e:	4620      	mov	r0, r4
 8004390:	4629      	mov	r1, r5
 8004392:	f7fc fb45 	bl	8000a20 <__aeabi_dcmpeq>
 8004396:	b938      	cbnz	r0, 80043a8 <__cvt+0xac>
 8004398:	2230      	movs	r2, #48	; 0x30
 800439a:	9b03      	ldr	r3, [sp, #12]
 800439c:	454b      	cmp	r3, r9
 800439e:	d205      	bcs.n	80043ac <__cvt+0xb0>
 80043a0:	1c59      	adds	r1, r3, #1
 80043a2:	9103      	str	r1, [sp, #12]
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	e7f8      	b.n	800439a <__cvt+0x9e>
 80043a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80043ac:	9b03      	ldr	r3, [sp, #12]
 80043ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80043b0:	eba3 0308 	sub.w	r3, r3, r8
 80043b4:	4640      	mov	r0, r8
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	b004      	add	sp, #16
 80043ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080043be <__exponent>:
 80043be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043c0:	2900      	cmp	r1, #0
 80043c2:	4604      	mov	r4, r0
 80043c4:	bfba      	itte	lt
 80043c6:	4249      	neglt	r1, r1
 80043c8:	232d      	movlt	r3, #45	; 0x2d
 80043ca:	232b      	movge	r3, #43	; 0x2b
 80043cc:	2909      	cmp	r1, #9
 80043ce:	f804 2b02 	strb.w	r2, [r4], #2
 80043d2:	7043      	strb	r3, [r0, #1]
 80043d4:	dd20      	ble.n	8004418 <__exponent+0x5a>
 80043d6:	f10d 0307 	add.w	r3, sp, #7
 80043da:	461f      	mov	r7, r3
 80043dc:	260a      	movs	r6, #10
 80043de:	fb91 f5f6 	sdiv	r5, r1, r6
 80043e2:	fb06 1115 	mls	r1, r6, r5, r1
 80043e6:	3130      	adds	r1, #48	; 0x30
 80043e8:	2d09      	cmp	r5, #9
 80043ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80043ee:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80043f2:	4629      	mov	r1, r5
 80043f4:	dc09      	bgt.n	800440a <__exponent+0x4c>
 80043f6:	3130      	adds	r1, #48	; 0x30
 80043f8:	3b02      	subs	r3, #2
 80043fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80043fe:	42bb      	cmp	r3, r7
 8004400:	4622      	mov	r2, r4
 8004402:	d304      	bcc.n	800440e <__exponent+0x50>
 8004404:	1a10      	subs	r0, r2, r0
 8004406:	b003      	add	sp, #12
 8004408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800440a:	4613      	mov	r3, r2
 800440c:	e7e7      	b.n	80043de <__exponent+0x20>
 800440e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004412:	f804 2b01 	strb.w	r2, [r4], #1
 8004416:	e7f2      	b.n	80043fe <__exponent+0x40>
 8004418:	2330      	movs	r3, #48	; 0x30
 800441a:	4419      	add	r1, r3
 800441c:	7083      	strb	r3, [r0, #2]
 800441e:	1d02      	adds	r2, r0, #4
 8004420:	70c1      	strb	r1, [r0, #3]
 8004422:	e7ef      	b.n	8004404 <__exponent+0x46>

08004424 <_printf_float>:
 8004424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004428:	b08d      	sub	sp, #52	; 0x34
 800442a:	460c      	mov	r4, r1
 800442c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004430:	4616      	mov	r6, r2
 8004432:	461f      	mov	r7, r3
 8004434:	4605      	mov	r5, r0
 8004436:	f001 f8ef 	bl	8005618 <_localeconv_r>
 800443a:	6803      	ldr	r3, [r0, #0]
 800443c:	9304      	str	r3, [sp, #16]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fb fec2 	bl	80001c8 <strlen>
 8004444:	2300      	movs	r3, #0
 8004446:	930a      	str	r3, [sp, #40]	; 0x28
 8004448:	f8d8 3000 	ldr.w	r3, [r8]
 800444c:	9005      	str	r0, [sp, #20]
 800444e:	3307      	adds	r3, #7
 8004450:	f023 0307 	bic.w	r3, r3, #7
 8004454:	f103 0208 	add.w	r2, r3, #8
 8004458:	f894 a018 	ldrb.w	sl, [r4, #24]
 800445c:	f8d4 b000 	ldr.w	fp, [r4]
 8004460:	f8c8 2000 	str.w	r2, [r8]
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800446c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004470:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004474:	9307      	str	r3, [sp, #28]
 8004476:	f8cd 8018 	str.w	r8, [sp, #24]
 800447a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800447e:	4ba7      	ldr	r3, [pc, #668]	; (800471c <_printf_float+0x2f8>)
 8004480:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004484:	f7fc fafe 	bl	8000a84 <__aeabi_dcmpun>
 8004488:	bb70      	cbnz	r0, 80044e8 <_printf_float+0xc4>
 800448a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800448e:	4ba3      	ldr	r3, [pc, #652]	; (800471c <_printf_float+0x2f8>)
 8004490:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004494:	f7fc fad8 	bl	8000a48 <__aeabi_dcmple>
 8004498:	bb30      	cbnz	r0, 80044e8 <_printf_float+0xc4>
 800449a:	2200      	movs	r2, #0
 800449c:	2300      	movs	r3, #0
 800449e:	4640      	mov	r0, r8
 80044a0:	4649      	mov	r1, r9
 80044a2:	f7fc fac7 	bl	8000a34 <__aeabi_dcmplt>
 80044a6:	b110      	cbz	r0, 80044ae <_printf_float+0x8a>
 80044a8:	232d      	movs	r3, #45	; 0x2d
 80044aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ae:	4a9c      	ldr	r2, [pc, #624]	; (8004720 <_printf_float+0x2fc>)
 80044b0:	4b9c      	ldr	r3, [pc, #624]	; (8004724 <_printf_float+0x300>)
 80044b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80044b6:	bf8c      	ite	hi
 80044b8:	4690      	movhi	r8, r2
 80044ba:	4698      	movls	r8, r3
 80044bc:	2303      	movs	r3, #3
 80044be:	f02b 0204 	bic.w	r2, fp, #4
 80044c2:	6123      	str	r3, [r4, #16]
 80044c4:	6022      	str	r2, [r4, #0]
 80044c6:	f04f 0900 	mov.w	r9, #0
 80044ca:	9700      	str	r7, [sp, #0]
 80044cc:	4633      	mov	r3, r6
 80044ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80044d0:	4621      	mov	r1, r4
 80044d2:	4628      	mov	r0, r5
 80044d4:	f000 f9e6 	bl	80048a4 <_printf_common>
 80044d8:	3001      	adds	r0, #1
 80044da:	f040 808d 	bne.w	80045f8 <_printf_float+0x1d4>
 80044de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044e2:	b00d      	add	sp, #52	; 0x34
 80044e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	4640      	mov	r0, r8
 80044ee:	4649      	mov	r1, r9
 80044f0:	f7fc fac8 	bl	8000a84 <__aeabi_dcmpun>
 80044f4:	b110      	cbz	r0, 80044fc <_printf_float+0xd8>
 80044f6:	4a8c      	ldr	r2, [pc, #560]	; (8004728 <_printf_float+0x304>)
 80044f8:	4b8c      	ldr	r3, [pc, #560]	; (800472c <_printf_float+0x308>)
 80044fa:	e7da      	b.n	80044b2 <_printf_float+0x8e>
 80044fc:	6861      	ldr	r1, [r4, #4]
 80044fe:	1c4b      	adds	r3, r1, #1
 8004500:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004504:	a80a      	add	r0, sp, #40	; 0x28
 8004506:	d13e      	bne.n	8004586 <_printf_float+0x162>
 8004508:	2306      	movs	r3, #6
 800450a:	6063      	str	r3, [r4, #4]
 800450c:	2300      	movs	r3, #0
 800450e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004512:	ab09      	add	r3, sp, #36	; 0x24
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	ec49 8b10 	vmov	d0, r8, r9
 800451a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800451e:	6022      	str	r2, [r4, #0]
 8004520:	f8cd a004 	str.w	sl, [sp, #4]
 8004524:	6861      	ldr	r1, [r4, #4]
 8004526:	4628      	mov	r0, r5
 8004528:	f7ff fee8 	bl	80042fc <__cvt>
 800452c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004530:	2b47      	cmp	r3, #71	; 0x47
 8004532:	4680      	mov	r8, r0
 8004534:	d109      	bne.n	800454a <_printf_float+0x126>
 8004536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004538:	1cd8      	adds	r0, r3, #3
 800453a:	db02      	blt.n	8004542 <_printf_float+0x11e>
 800453c:	6862      	ldr	r2, [r4, #4]
 800453e:	4293      	cmp	r3, r2
 8004540:	dd47      	ble.n	80045d2 <_printf_float+0x1ae>
 8004542:	f1aa 0a02 	sub.w	sl, sl, #2
 8004546:	fa5f fa8a 	uxtb.w	sl, sl
 800454a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800454e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004550:	d824      	bhi.n	800459c <_printf_float+0x178>
 8004552:	3901      	subs	r1, #1
 8004554:	4652      	mov	r2, sl
 8004556:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800455a:	9109      	str	r1, [sp, #36]	; 0x24
 800455c:	f7ff ff2f 	bl	80043be <__exponent>
 8004560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004562:	1813      	adds	r3, r2, r0
 8004564:	2a01      	cmp	r2, #1
 8004566:	4681      	mov	r9, r0
 8004568:	6123      	str	r3, [r4, #16]
 800456a:	dc02      	bgt.n	8004572 <_printf_float+0x14e>
 800456c:	6822      	ldr	r2, [r4, #0]
 800456e:	07d1      	lsls	r1, r2, #31
 8004570:	d501      	bpl.n	8004576 <_printf_float+0x152>
 8004572:	3301      	adds	r3, #1
 8004574:	6123      	str	r3, [r4, #16]
 8004576:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0a5      	beq.n	80044ca <_printf_float+0xa6>
 800457e:	232d      	movs	r3, #45	; 0x2d
 8004580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004584:	e7a1      	b.n	80044ca <_printf_float+0xa6>
 8004586:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800458a:	f000 8177 	beq.w	800487c <_printf_float+0x458>
 800458e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004592:	d1bb      	bne.n	800450c <_printf_float+0xe8>
 8004594:	2900      	cmp	r1, #0
 8004596:	d1b9      	bne.n	800450c <_printf_float+0xe8>
 8004598:	2301      	movs	r3, #1
 800459a:	e7b6      	b.n	800450a <_printf_float+0xe6>
 800459c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80045a0:	d119      	bne.n	80045d6 <_printf_float+0x1b2>
 80045a2:	2900      	cmp	r1, #0
 80045a4:	6863      	ldr	r3, [r4, #4]
 80045a6:	dd0c      	ble.n	80045c2 <_printf_float+0x19e>
 80045a8:	6121      	str	r1, [r4, #16]
 80045aa:	b913      	cbnz	r3, 80045b2 <_printf_float+0x18e>
 80045ac:	6822      	ldr	r2, [r4, #0]
 80045ae:	07d2      	lsls	r2, r2, #31
 80045b0:	d502      	bpl.n	80045b8 <_printf_float+0x194>
 80045b2:	3301      	adds	r3, #1
 80045b4:	440b      	add	r3, r1
 80045b6:	6123      	str	r3, [r4, #16]
 80045b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80045bc:	f04f 0900 	mov.w	r9, #0
 80045c0:	e7d9      	b.n	8004576 <_printf_float+0x152>
 80045c2:	b913      	cbnz	r3, 80045ca <_printf_float+0x1a6>
 80045c4:	6822      	ldr	r2, [r4, #0]
 80045c6:	07d0      	lsls	r0, r2, #31
 80045c8:	d501      	bpl.n	80045ce <_printf_float+0x1aa>
 80045ca:	3302      	adds	r3, #2
 80045cc:	e7f3      	b.n	80045b6 <_printf_float+0x192>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e7f1      	b.n	80045b6 <_printf_float+0x192>
 80045d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80045d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80045da:	4293      	cmp	r3, r2
 80045dc:	db05      	blt.n	80045ea <_printf_float+0x1c6>
 80045de:	6822      	ldr	r2, [r4, #0]
 80045e0:	6123      	str	r3, [r4, #16]
 80045e2:	07d1      	lsls	r1, r2, #31
 80045e4:	d5e8      	bpl.n	80045b8 <_printf_float+0x194>
 80045e6:	3301      	adds	r3, #1
 80045e8:	e7e5      	b.n	80045b6 <_printf_float+0x192>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bfd4      	ite	le
 80045ee:	f1c3 0302 	rsble	r3, r3, #2
 80045f2:	2301      	movgt	r3, #1
 80045f4:	4413      	add	r3, r2
 80045f6:	e7de      	b.n	80045b6 <_printf_float+0x192>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	055a      	lsls	r2, r3, #21
 80045fc:	d407      	bmi.n	800460e <_printf_float+0x1ea>
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	4642      	mov	r2, r8
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	d12b      	bne.n	8004664 <_printf_float+0x240>
 800460c:	e767      	b.n	80044de <_printf_float+0xba>
 800460e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004612:	f240 80dc 	bls.w	80047ce <_printf_float+0x3aa>
 8004616:	2200      	movs	r2, #0
 8004618:	2300      	movs	r3, #0
 800461a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800461e:	f7fc f9ff 	bl	8000a20 <__aeabi_dcmpeq>
 8004622:	2800      	cmp	r0, #0
 8004624:	d033      	beq.n	800468e <_printf_float+0x26a>
 8004626:	2301      	movs	r3, #1
 8004628:	4a41      	ldr	r2, [pc, #260]	; (8004730 <_printf_float+0x30c>)
 800462a:	4631      	mov	r1, r6
 800462c:	4628      	mov	r0, r5
 800462e:	47b8      	blx	r7
 8004630:	3001      	adds	r0, #1
 8004632:	f43f af54 	beq.w	80044de <_printf_float+0xba>
 8004636:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800463a:	429a      	cmp	r2, r3
 800463c:	db02      	blt.n	8004644 <_printf_float+0x220>
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	07d8      	lsls	r0, r3, #31
 8004642:	d50f      	bpl.n	8004664 <_printf_float+0x240>
 8004644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004648:	4631      	mov	r1, r6
 800464a:	4628      	mov	r0, r5
 800464c:	47b8      	blx	r7
 800464e:	3001      	adds	r0, #1
 8004650:	f43f af45 	beq.w	80044de <_printf_float+0xba>
 8004654:	f04f 0800 	mov.w	r8, #0
 8004658:	f104 091a 	add.w	r9, r4, #26
 800465c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800465e:	3b01      	subs	r3, #1
 8004660:	4543      	cmp	r3, r8
 8004662:	dc09      	bgt.n	8004678 <_printf_float+0x254>
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	079b      	lsls	r3, r3, #30
 8004668:	f100 8103 	bmi.w	8004872 <_printf_float+0x44e>
 800466c:	68e0      	ldr	r0, [r4, #12]
 800466e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004670:	4298      	cmp	r0, r3
 8004672:	bfb8      	it	lt
 8004674:	4618      	movlt	r0, r3
 8004676:	e734      	b.n	80044e2 <_printf_float+0xbe>
 8004678:	2301      	movs	r3, #1
 800467a:	464a      	mov	r2, r9
 800467c:	4631      	mov	r1, r6
 800467e:	4628      	mov	r0, r5
 8004680:	47b8      	blx	r7
 8004682:	3001      	adds	r0, #1
 8004684:	f43f af2b 	beq.w	80044de <_printf_float+0xba>
 8004688:	f108 0801 	add.w	r8, r8, #1
 800468c:	e7e6      	b.n	800465c <_printf_float+0x238>
 800468e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004690:	2b00      	cmp	r3, #0
 8004692:	dc2b      	bgt.n	80046ec <_printf_float+0x2c8>
 8004694:	2301      	movs	r3, #1
 8004696:	4a26      	ldr	r2, [pc, #152]	; (8004730 <_printf_float+0x30c>)
 8004698:	4631      	mov	r1, r6
 800469a:	4628      	mov	r0, r5
 800469c:	47b8      	blx	r7
 800469e:	3001      	adds	r0, #1
 80046a0:	f43f af1d 	beq.w	80044de <_printf_float+0xba>
 80046a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a6:	b923      	cbnz	r3, 80046b2 <_printf_float+0x28e>
 80046a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046aa:	b913      	cbnz	r3, 80046b2 <_printf_float+0x28e>
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	07d9      	lsls	r1, r3, #31
 80046b0:	d5d8      	bpl.n	8004664 <_printf_float+0x240>
 80046b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b6:	4631      	mov	r1, r6
 80046b8:	4628      	mov	r0, r5
 80046ba:	47b8      	blx	r7
 80046bc:	3001      	adds	r0, #1
 80046be:	f43f af0e 	beq.w	80044de <_printf_float+0xba>
 80046c2:	f04f 0900 	mov.w	r9, #0
 80046c6:	f104 0a1a 	add.w	sl, r4, #26
 80046ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046cc:	425b      	negs	r3, r3
 80046ce:	454b      	cmp	r3, r9
 80046d0:	dc01      	bgt.n	80046d6 <_printf_float+0x2b2>
 80046d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046d4:	e794      	b.n	8004600 <_printf_float+0x1dc>
 80046d6:	2301      	movs	r3, #1
 80046d8:	4652      	mov	r2, sl
 80046da:	4631      	mov	r1, r6
 80046dc:	4628      	mov	r0, r5
 80046de:	47b8      	blx	r7
 80046e0:	3001      	adds	r0, #1
 80046e2:	f43f aefc 	beq.w	80044de <_printf_float+0xba>
 80046e6:	f109 0901 	add.w	r9, r9, #1
 80046ea:	e7ee      	b.n	80046ca <_printf_float+0x2a6>
 80046ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046f0:	429a      	cmp	r2, r3
 80046f2:	bfa8      	it	ge
 80046f4:	461a      	movge	r2, r3
 80046f6:	2a00      	cmp	r2, #0
 80046f8:	4691      	mov	r9, r2
 80046fa:	dd07      	ble.n	800470c <_printf_float+0x2e8>
 80046fc:	4613      	mov	r3, r2
 80046fe:	4631      	mov	r1, r6
 8004700:	4642      	mov	r2, r8
 8004702:	4628      	mov	r0, r5
 8004704:	47b8      	blx	r7
 8004706:	3001      	adds	r0, #1
 8004708:	f43f aee9 	beq.w	80044de <_printf_float+0xba>
 800470c:	f104 031a 	add.w	r3, r4, #26
 8004710:	f04f 0b00 	mov.w	fp, #0
 8004714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004718:	9306      	str	r3, [sp, #24]
 800471a:	e015      	b.n	8004748 <_printf_float+0x324>
 800471c:	7fefffff 	.word	0x7fefffff
 8004720:	08005d94 	.word	0x08005d94
 8004724:	08005d90 	.word	0x08005d90
 8004728:	08005d9c 	.word	0x08005d9c
 800472c:	08005d98 	.word	0x08005d98
 8004730:	08005da0 	.word	0x08005da0
 8004734:	2301      	movs	r3, #1
 8004736:	9a06      	ldr	r2, [sp, #24]
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	f43f aecd 	beq.w	80044de <_printf_float+0xba>
 8004744:	f10b 0b01 	add.w	fp, fp, #1
 8004748:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800474c:	ebaa 0309 	sub.w	r3, sl, r9
 8004750:	455b      	cmp	r3, fp
 8004752:	dcef      	bgt.n	8004734 <_printf_float+0x310>
 8004754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004758:	429a      	cmp	r2, r3
 800475a:	44d0      	add	r8, sl
 800475c:	db15      	blt.n	800478a <_printf_float+0x366>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	07da      	lsls	r2, r3, #31
 8004762:	d412      	bmi.n	800478a <_printf_float+0x366>
 8004764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004766:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004768:	eba3 020a 	sub.w	r2, r3, sl
 800476c:	eba3 0a01 	sub.w	sl, r3, r1
 8004770:	4592      	cmp	sl, r2
 8004772:	bfa8      	it	ge
 8004774:	4692      	movge	sl, r2
 8004776:	f1ba 0f00 	cmp.w	sl, #0
 800477a:	dc0e      	bgt.n	800479a <_printf_float+0x376>
 800477c:	f04f 0800 	mov.w	r8, #0
 8004780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004784:	f104 091a 	add.w	r9, r4, #26
 8004788:	e019      	b.n	80047be <_printf_float+0x39a>
 800478a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800478e:	4631      	mov	r1, r6
 8004790:	4628      	mov	r0, r5
 8004792:	47b8      	blx	r7
 8004794:	3001      	adds	r0, #1
 8004796:	d1e5      	bne.n	8004764 <_printf_float+0x340>
 8004798:	e6a1      	b.n	80044de <_printf_float+0xba>
 800479a:	4653      	mov	r3, sl
 800479c:	4642      	mov	r2, r8
 800479e:	4631      	mov	r1, r6
 80047a0:	4628      	mov	r0, r5
 80047a2:	47b8      	blx	r7
 80047a4:	3001      	adds	r0, #1
 80047a6:	d1e9      	bne.n	800477c <_printf_float+0x358>
 80047a8:	e699      	b.n	80044de <_printf_float+0xba>
 80047aa:	2301      	movs	r3, #1
 80047ac:	464a      	mov	r2, r9
 80047ae:	4631      	mov	r1, r6
 80047b0:	4628      	mov	r0, r5
 80047b2:	47b8      	blx	r7
 80047b4:	3001      	adds	r0, #1
 80047b6:	f43f ae92 	beq.w	80044de <_printf_float+0xba>
 80047ba:	f108 0801 	add.w	r8, r8, #1
 80047be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	eba3 030a 	sub.w	r3, r3, sl
 80047c8:	4543      	cmp	r3, r8
 80047ca:	dcee      	bgt.n	80047aa <_printf_float+0x386>
 80047cc:	e74a      	b.n	8004664 <_printf_float+0x240>
 80047ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047d0:	2a01      	cmp	r2, #1
 80047d2:	dc01      	bgt.n	80047d8 <_printf_float+0x3b4>
 80047d4:	07db      	lsls	r3, r3, #31
 80047d6:	d53a      	bpl.n	800484e <_printf_float+0x42a>
 80047d8:	2301      	movs	r3, #1
 80047da:	4642      	mov	r2, r8
 80047dc:	4631      	mov	r1, r6
 80047de:	4628      	mov	r0, r5
 80047e0:	47b8      	blx	r7
 80047e2:	3001      	adds	r0, #1
 80047e4:	f43f ae7b 	beq.w	80044de <_printf_float+0xba>
 80047e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047ec:	4631      	mov	r1, r6
 80047ee:	4628      	mov	r0, r5
 80047f0:	47b8      	blx	r7
 80047f2:	3001      	adds	r0, #1
 80047f4:	f108 0801 	add.w	r8, r8, #1
 80047f8:	f43f ae71 	beq.w	80044de <_printf_float+0xba>
 80047fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047fe:	2200      	movs	r2, #0
 8004800:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8004804:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004808:	2300      	movs	r3, #0
 800480a:	f7fc f909 	bl	8000a20 <__aeabi_dcmpeq>
 800480e:	b9c8      	cbnz	r0, 8004844 <_printf_float+0x420>
 8004810:	4653      	mov	r3, sl
 8004812:	4642      	mov	r2, r8
 8004814:	4631      	mov	r1, r6
 8004816:	4628      	mov	r0, r5
 8004818:	47b8      	blx	r7
 800481a:	3001      	adds	r0, #1
 800481c:	d10e      	bne.n	800483c <_printf_float+0x418>
 800481e:	e65e      	b.n	80044de <_printf_float+0xba>
 8004820:	2301      	movs	r3, #1
 8004822:	4652      	mov	r2, sl
 8004824:	4631      	mov	r1, r6
 8004826:	4628      	mov	r0, r5
 8004828:	47b8      	blx	r7
 800482a:	3001      	adds	r0, #1
 800482c:	f43f ae57 	beq.w	80044de <_printf_float+0xba>
 8004830:	f108 0801 	add.w	r8, r8, #1
 8004834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004836:	3b01      	subs	r3, #1
 8004838:	4543      	cmp	r3, r8
 800483a:	dcf1      	bgt.n	8004820 <_printf_float+0x3fc>
 800483c:	464b      	mov	r3, r9
 800483e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004842:	e6de      	b.n	8004602 <_printf_float+0x1de>
 8004844:	f04f 0800 	mov.w	r8, #0
 8004848:	f104 0a1a 	add.w	sl, r4, #26
 800484c:	e7f2      	b.n	8004834 <_printf_float+0x410>
 800484e:	2301      	movs	r3, #1
 8004850:	e7df      	b.n	8004812 <_printf_float+0x3ee>
 8004852:	2301      	movs	r3, #1
 8004854:	464a      	mov	r2, r9
 8004856:	4631      	mov	r1, r6
 8004858:	4628      	mov	r0, r5
 800485a:	47b8      	blx	r7
 800485c:	3001      	adds	r0, #1
 800485e:	f43f ae3e 	beq.w	80044de <_printf_float+0xba>
 8004862:	f108 0801 	add.w	r8, r8, #1
 8004866:	68e3      	ldr	r3, [r4, #12]
 8004868:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800486a:	1a9b      	subs	r3, r3, r2
 800486c:	4543      	cmp	r3, r8
 800486e:	dcf0      	bgt.n	8004852 <_printf_float+0x42e>
 8004870:	e6fc      	b.n	800466c <_printf_float+0x248>
 8004872:	f04f 0800 	mov.w	r8, #0
 8004876:	f104 0919 	add.w	r9, r4, #25
 800487a:	e7f4      	b.n	8004866 <_printf_float+0x442>
 800487c:	2900      	cmp	r1, #0
 800487e:	f43f ae8b 	beq.w	8004598 <_printf_float+0x174>
 8004882:	2300      	movs	r3, #0
 8004884:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004888:	ab09      	add	r3, sp, #36	; 0x24
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	ec49 8b10 	vmov	d0, r8, r9
 8004890:	6022      	str	r2, [r4, #0]
 8004892:	f8cd a004 	str.w	sl, [sp, #4]
 8004896:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800489a:	4628      	mov	r0, r5
 800489c:	f7ff fd2e 	bl	80042fc <__cvt>
 80048a0:	4680      	mov	r8, r0
 80048a2:	e648      	b.n	8004536 <_printf_float+0x112>

080048a4 <_printf_common>:
 80048a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a8:	4691      	mov	r9, r2
 80048aa:	461f      	mov	r7, r3
 80048ac:	688a      	ldr	r2, [r1, #8]
 80048ae:	690b      	ldr	r3, [r1, #16]
 80048b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048b4:	4293      	cmp	r3, r2
 80048b6:	bfb8      	it	lt
 80048b8:	4613      	movlt	r3, r2
 80048ba:	f8c9 3000 	str.w	r3, [r9]
 80048be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048c2:	4606      	mov	r6, r0
 80048c4:	460c      	mov	r4, r1
 80048c6:	b112      	cbz	r2, 80048ce <_printf_common+0x2a>
 80048c8:	3301      	adds	r3, #1
 80048ca:	f8c9 3000 	str.w	r3, [r9]
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	0699      	lsls	r1, r3, #26
 80048d2:	bf42      	ittt	mi
 80048d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048d8:	3302      	addmi	r3, #2
 80048da:	f8c9 3000 	strmi.w	r3, [r9]
 80048de:	6825      	ldr	r5, [r4, #0]
 80048e0:	f015 0506 	ands.w	r5, r5, #6
 80048e4:	d107      	bne.n	80048f6 <_printf_common+0x52>
 80048e6:	f104 0a19 	add.w	sl, r4, #25
 80048ea:	68e3      	ldr	r3, [r4, #12]
 80048ec:	f8d9 2000 	ldr.w	r2, [r9]
 80048f0:	1a9b      	subs	r3, r3, r2
 80048f2:	42ab      	cmp	r3, r5
 80048f4:	dc28      	bgt.n	8004948 <_printf_common+0xa4>
 80048f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048fa:	6822      	ldr	r2, [r4, #0]
 80048fc:	3300      	adds	r3, #0
 80048fe:	bf18      	it	ne
 8004900:	2301      	movne	r3, #1
 8004902:	0692      	lsls	r2, r2, #26
 8004904:	d42d      	bmi.n	8004962 <_printf_common+0xbe>
 8004906:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800490a:	4639      	mov	r1, r7
 800490c:	4630      	mov	r0, r6
 800490e:	47c0      	blx	r8
 8004910:	3001      	adds	r0, #1
 8004912:	d020      	beq.n	8004956 <_printf_common+0xb2>
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	68e5      	ldr	r5, [r4, #12]
 8004918:	f8d9 2000 	ldr.w	r2, [r9]
 800491c:	f003 0306 	and.w	r3, r3, #6
 8004920:	2b04      	cmp	r3, #4
 8004922:	bf08      	it	eq
 8004924:	1aad      	subeq	r5, r5, r2
 8004926:	68a3      	ldr	r3, [r4, #8]
 8004928:	6922      	ldr	r2, [r4, #16]
 800492a:	bf0c      	ite	eq
 800492c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004930:	2500      	movne	r5, #0
 8004932:	4293      	cmp	r3, r2
 8004934:	bfc4      	itt	gt
 8004936:	1a9b      	subgt	r3, r3, r2
 8004938:	18ed      	addgt	r5, r5, r3
 800493a:	f04f 0900 	mov.w	r9, #0
 800493e:	341a      	adds	r4, #26
 8004940:	454d      	cmp	r5, r9
 8004942:	d11a      	bne.n	800497a <_printf_common+0xd6>
 8004944:	2000      	movs	r0, #0
 8004946:	e008      	b.n	800495a <_printf_common+0xb6>
 8004948:	2301      	movs	r3, #1
 800494a:	4652      	mov	r2, sl
 800494c:	4639      	mov	r1, r7
 800494e:	4630      	mov	r0, r6
 8004950:	47c0      	blx	r8
 8004952:	3001      	adds	r0, #1
 8004954:	d103      	bne.n	800495e <_printf_common+0xba>
 8004956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800495a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495e:	3501      	adds	r5, #1
 8004960:	e7c3      	b.n	80048ea <_printf_common+0x46>
 8004962:	18e1      	adds	r1, r4, r3
 8004964:	1c5a      	adds	r2, r3, #1
 8004966:	2030      	movs	r0, #48	; 0x30
 8004968:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800496c:	4422      	add	r2, r4
 800496e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004972:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004976:	3302      	adds	r3, #2
 8004978:	e7c5      	b.n	8004906 <_printf_common+0x62>
 800497a:	2301      	movs	r3, #1
 800497c:	4622      	mov	r2, r4
 800497e:	4639      	mov	r1, r7
 8004980:	4630      	mov	r0, r6
 8004982:	47c0      	blx	r8
 8004984:	3001      	adds	r0, #1
 8004986:	d0e6      	beq.n	8004956 <_printf_common+0xb2>
 8004988:	f109 0901 	add.w	r9, r9, #1
 800498c:	e7d8      	b.n	8004940 <_printf_common+0x9c>

0800498e <quorem>:
 800498e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004992:	6903      	ldr	r3, [r0, #16]
 8004994:	690c      	ldr	r4, [r1, #16]
 8004996:	42a3      	cmp	r3, r4
 8004998:	4680      	mov	r8, r0
 800499a:	f2c0 8082 	blt.w	8004aa2 <quorem+0x114>
 800499e:	3c01      	subs	r4, #1
 80049a0:	f101 0714 	add.w	r7, r1, #20
 80049a4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80049a8:	f100 0614 	add.w	r6, r0, #20
 80049ac:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80049b0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80049b4:	eb06 030c 	add.w	r3, r6, ip
 80049b8:	3501      	adds	r5, #1
 80049ba:	eb07 090c 	add.w	r9, r7, ip
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	fbb0 f5f5 	udiv	r5, r0, r5
 80049c4:	b395      	cbz	r5, 8004a2c <quorem+0x9e>
 80049c6:	f04f 0a00 	mov.w	sl, #0
 80049ca:	4638      	mov	r0, r7
 80049cc:	46b6      	mov	lr, r6
 80049ce:	46d3      	mov	fp, sl
 80049d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80049d4:	b293      	uxth	r3, r2
 80049d6:	fb05 a303 	mla	r3, r5, r3, sl
 80049da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049de:	b29b      	uxth	r3, r3
 80049e0:	ebab 0303 	sub.w	r3, fp, r3
 80049e4:	0c12      	lsrs	r2, r2, #16
 80049e6:	f8de b000 	ldr.w	fp, [lr]
 80049ea:	fb05 a202 	mla	r2, r5, r2, sl
 80049ee:	fa13 f38b 	uxtah	r3, r3, fp
 80049f2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80049f6:	fa1f fb82 	uxth.w	fp, r2
 80049fa:	f8de 2000 	ldr.w	r2, [lr]
 80049fe:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004a02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a0c:	4581      	cmp	r9, r0
 8004a0e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004a12:	f84e 3b04 	str.w	r3, [lr], #4
 8004a16:	d2db      	bcs.n	80049d0 <quorem+0x42>
 8004a18:	f856 300c 	ldr.w	r3, [r6, ip]
 8004a1c:	b933      	cbnz	r3, 8004a2c <quorem+0x9e>
 8004a1e:	9b01      	ldr	r3, [sp, #4]
 8004a20:	3b04      	subs	r3, #4
 8004a22:	429e      	cmp	r6, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	d330      	bcc.n	8004a8a <quorem+0xfc>
 8004a28:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	f001 f829 	bl	8005a84 <__mcmp>
 8004a32:	2800      	cmp	r0, #0
 8004a34:	db25      	blt.n	8004a82 <quorem+0xf4>
 8004a36:	3501      	adds	r5, #1
 8004a38:	4630      	mov	r0, r6
 8004a3a:	f04f 0c00 	mov.w	ip, #0
 8004a3e:	f857 2b04 	ldr.w	r2, [r7], #4
 8004a42:	f8d0 e000 	ldr.w	lr, [r0]
 8004a46:	b293      	uxth	r3, r2
 8004a48:	ebac 0303 	sub.w	r3, ip, r3
 8004a4c:	0c12      	lsrs	r2, r2, #16
 8004a4e:	fa13 f38e 	uxtah	r3, r3, lr
 8004a52:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a60:	45b9      	cmp	r9, r7
 8004a62:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a66:	f840 3b04 	str.w	r3, [r0], #4
 8004a6a:	d2e8      	bcs.n	8004a3e <quorem+0xb0>
 8004a6c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004a70:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004a74:	b92a      	cbnz	r2, 8004a82 <quorem+0xf4>
 8004a76:	3b04      	subs	r3, #4
 8004a78:	429e      	cmp	r6, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	d30b      	bcc.n	8004a96 <quorem+0x108>
 8004a7e:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a82:	4628      	mov	r0, r5
 8004a84:	b003      	add	sp, #12
 8004a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	3b04      	subs	r3, #4
 8004a8e:	2a00      	cmp	r2, #0
 8004a90:	d1ca      	bne.n	8004a28 <quorem+0x9a>
 8004a92:	3c01      	subs	r4, #1
 8004a94:	e7c5      	b.n	8004a22 <quorem+0x94>
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	3b04      	subs	r3, #4
 8004a9a:	2a00      	cmp	r2, #0
 8004a9c:	d1ef      	bne.n	8004a7e <quorem+0xf0>
 8004a9e:	3c01      	subs	r4, #1
 8004aa0:	e7ea      	b.n	8004a78 <quorem+0xea>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	e7ee      	b.n	8004a84 <quorem+0xf6>
	...

08004aa8 <_dtoa_r>:
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	ec57 6b10 	vmov	r6, r7, d0
 8004ab0:	b097      	sub	sp, #92	; 0x5c
 8004ab2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ab4:	9106      	str	r1, [sp, #24]
 8004ab6:	4604      	mov	r4, r0
 8004ab8:	920b      	str	r2, [sp, #44]	; 0x2c
 8004aba:	9312      	str	r3, [sp, #72]	; 0x48
 8004abc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ac0:	e9cd 6700 	strd	r6, r7, [sp]
 8004ac4:	b93d      	cbnz	r5, 8004ad6 <_dtoa_r+0x2e>
 8004ac6:	2010      	movs	r0, #16
 8004ac8:	f000 fdb4 	bl	8005634 <malloc>
 8004acc:	6260      	str	r0, [r4, #36]	; 0x24
 8004ace:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004ad2:	6005      	str	r5, [r0, #0]
 8004ad4:	60c5      	str	r5, [r0, #12]
 8004ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	b151      	cbz	r1, 8004af2 <_dtoa_r+0x4a>
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	604a      	str	r2, [r1, #4]
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4093      	lsls	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
 8004ae6:	4620      	mov	r0, r4
 8004ae8:	f000 fdeb 	bl	80056c2 <_Bfree>
 8004aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	1e3b      	subs	r3, r7, #0
 8004af4:	bfbb      	ittet	lt
 8004af6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004afa:	9301      	strlt	r3, [sp, #4]
 8004afc:	2300      	movge	r3, #0
 8004afe:	2201      	movlt	r2, #1
 8004b00:	bfac      	ite	ge
 8004b02:	f8c8 3000 	strge.w	r3, [r8]
 8004b06:	f8c8 2000 	strlt.w	r2, [r8]
 8004b0a:	4baf      	ldr	r3, [pc, #700]	; (8004dc8 <_dtoa_r+0x320>)
 8004b0c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004b10:	ea33 0308 	bics.w	r3, r3, r8
 8004b14:	d114      	bne.n	8004b40 <_dtoa_r+0x98>
 8004b16:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b18:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	9b00      	ldr	r3, [sp, #0]
 8004b20:	b923      	cbnz	r3, 8004b2c <_dtoa_r+0x84>
 8004b22:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004b26:	2800      	cmp	r0, #0
 8004b28:	f000 8542 	beq.w	80055b0 <_dtoa_r+0xb08>
 8004b2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b2e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004ddc <_dtoa_r+0x334>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8544 	beq.w	80055c0 <_dtoa_r+0xb18>
 8004b38:	f10b 0303 	add.w	r3, fp, #3
 8004b3c:	f000 bd3e 	b.w	80055bc <_dtoa_r+0xb14>
 8004b40:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004b44:	2200      	movs	r2, #0
 8004b46:	2300      	movs	r3, #0
 8004b48:	4630      	mov	r0, r6
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	f7fb ff68 	bl	8000a20 <__aeabi_dcmpeq>
 8004b50:	4681      	mov	r9, r0
 8004b52:	b168      	cbz	r0, 8004b70 <_dtoa_r+0xc8>
 8004b54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b56:	2301      	movs	r3, #1
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 8524 	beq.w	80055aa <_dtoa_r+0xb02>
 8004b62:	4b9a      	ldr	r3, [pc, #616]	; (8004dcc <_dtoa_r+0x324>)
 8004b64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b66:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	f000 bd28 	b.w	80055c0 <_dtoa_r+0xb18>
 8004b70:	aa14      	add	r2, sp, #80	; 0x50
 8004b72:	a915      	add	r1, sp, #84	; 0x54
 8004b74:	ec47 6b10 	vmov	d0, r6, r7
 8004b78:	4620      	mov	r0, r4
 8004b7a:	f000 fffa 	bl	8005b72 <__d2b>
 8004b7e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004b82:	9004      	str	r0, [sp, #16]
 8004b84:	2d00      	cmp	r5, #0
 8004b86:	d07c      	beq.n	8004c82 <_dtoa_r+0x1da>
 8004b88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b8c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004b90:	46b2      	mov	sl, r6
 8004b92:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004b96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b9a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4b8b      	ldr	r3, [pc, #556]	; (8004dd0 <_dtoa_r+0x328>)
 8004ba2:	4650      	mov	r0, sl
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	f7fb fb1b 	bl	80001e0 <__aeabi_dsub>
 8004baa:	a381      	add	r3, pc, #516	; (adr r3, 8004db0 <_dtoa_r+0x308>)
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f7fb fcce 	bl	8000550 <__aeabi_dmul>
 8004bb4:	a380      	add	r3, pc, #512	; (adr r3, 8004db8 <_dtoa_r+0x310>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f7fb fb13 	bl	80001e4 <__adddf3>
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	4628      	mov	r0, r5
 8004bc2:	460f      	mov	r7, r1
 8004bc4:	f7fb fc5a 	bl	800047c <__aeabi_i2d>
 8004bc8:	a37d      	add	r3, pc, #500	; (adr r3, 8004dc0 <_dtoa_r+0x318>)
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f7fb fcbf 	bl	8000550 <__aeabi_dmul>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	4639      	mov	r1, r7
 8004bda:	f7fb fb03 	bl	80001e4 <__adddf3>
 8004bde:	4606      	mov	r6, r0
 8004be0:	460f      	mov	r7, r1
 8004be2:	f7fb ff65 	bl	8000ab0 <__aeabi_d2iz>
 8004be6:	2200      	movs	r2, #0
 8004be8:	4682      	mov	sl, r0
 8004bea:	2300      	movs	r3, #0
 8004bec:	4630      	mov	r0, r6
 8004bee:	4639      	mov	r1, r7
 8004bf0:	f7fb ff20 	bl	8000a34 <__aeabi_dcmplt>
 8004bf4:	b148      	cbz	r0, 8004c0a <_dtoa_r+0x162>
 8004bf6:	4650      	mov	r0, sl
 8004bf8:	f7fb fc40 	bl	800047c <__aeabi_i2d>
 8004bfc:	4632      	mov	r2, r6
 8004bfe:	463b      	mov	r3, r7
 8004c00:	f7fb ff0e 	bl	8000a20 <__aeabi_dcmpeq>
 8004c04:	b908      	cbnz	r0, 8004c0a <_dtoa_r+0x162>
 8004c06:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c0a:	f1ba 0f16 	cmp.w	sl, #22
 8004c0e:	d859      	bhi.n	8004cc4 <_dtoa_r+0x21c>
 8004c10:	4970      	ldr	r1, [pc, #448]	; (8004dd4 <_dtoa_r+0x32c>)
 8004c12:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c1e:	f7fb ff27 	bl	8000a70 <__aeabi_dcmpgt>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	d050      	beq.n	8004cc8 <_dtoa_r+0x220>
 8004c26:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c30:	1b5d      	subs	r5, r3, r5
 8004c32:	f1b5 0801 	subs.w	r8, r5, #1
 8004c36:	bf49      	itett	mi
 8004c38:	f1c5 0301 	rsbmi	r3, r5, #1
 8004c3c:	2300      	movpl	r3, #0
 8004c3e:	9305      	strmi	r3, [sp, #20]
 8004c40:	f04f 0800 	movmi.w	r8, #0
 8004c44:	bf58      	it	pl
 8004c46:	9305      	strpl	r3, [sp, #20]
 8004c48:	f1ba 0f00 	cmp.w	sl, #0
 8004c4c:	db3e      	blt.n	8004ccc <_dtoa_r+0x224>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	44d0      	add	r8, sl
 8004c52:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004c56:	9307      	str	r3, [sp, #28]
 8004c58:	9b06      	ldr	r3, [sp, #24]
 8004c5a:	2b09      	cmp	r3, #9
 8004c5c:	f200 8090 	bhi.w	8004d80 <_dtoa_r+0x2d8>
 8004c60:	2b05      	cmp	r3, #5
 8004c62:	bfc4      	itt	gt
 8004c64:	3b04      	subgt	r3, #4
 8004c66:	9306      	strgt	r3, [sp, #24]
 8004c68:	9b06      	ldr	r3, [sp, #24]
 8004c6a:	f1a3 0302 	sub.w	r3, r3, #2
 8004c6e:	bfcc      	ite	gt
 8004c70:	2500      	movgt	r5, #0
 8004c72:	2501      	movle	r5, #1
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	f200 808f 	bhi.w	8004d98 <_dtoa_r+0x2f0>
 8004c7a:	e8df f003 	tbb	[pc, r3]
 8004c7e:	7f7d      	.short	0x7f7d
 8004c80:	7131      	.short	0x7131
 8004c82:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004c86:	441d      	add	r5, r3
 8004c88:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004c8c:	2820      	cmp	r0, #32
 8004c8e:	dd13      	ble.n	8004cb8 <_dtoa_r+0x210>
 8004c90:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004c94:	9b00      	ldr	r3, [sp, #0]
 8004c96:	fa08 f800 	lsl.w	r8, r8, r0
 8004c9a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004c9e:	fa23 f000 	lsr.w	r0, r3, r0
 8004ca2:	ea48 0000 	orr.w	r0, r8, r0
 8004ca6:	f7fb fbd9 	bl	800045c <__aeabi_ui2d>
 8004caa:	2301      	movs	r3, #1
 8004cac:	4682      	mov	sl, r0
 8004cae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004cb2:	3d01      	subs	r5, #1
 8004cb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004cb6:	e772      	b.n	8004b9e <_dtoa_r+0xf6>
 8004cb8:	9b00      	ldr	r3, [sp, #0]
 8004cba:	f1c0 0020 	rsb	r0, r0, #32
 8004cbe:	fa03 f000 	lsl.w	r0, r3, r0
 8004cc2:	e7f0      	b.n	8004ca6 <_dtoa_r+0x1fe>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e7b1      	b.n	8004c2c <_dtoa_r+0x184>
 8004cc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004cca:	e7b0      	b.n	8004c2e <_dtoa_r+0x186>
 8004ccc:	9b05      	ldr	r3, [sp, #20]
 8004cce:	eba3 030a 	sub.w	r3, r3, sl
 8004cd2:	9305      	str	r3, [sp, #20]
 8004cd4:	f1ca 0300 	rsb	r3, sl, #0
 8004cd8:	9307      	str	r3, [sp, #28]
 8004cda:	2300      	movs	r3, #0
 8004cdc:	930e      	str	r3, [sp, #56]	; 0x38
 8004cde:	e7bb      	b.n	8004c58 <_dtoa_r+0x1b0>
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	dd59      	ble.n	8004d9e <_dtoa_r+0x2f6>
 8004cea:	9302      	str	r3, [sp, #8]
 8004cec:	4699      	mov	r9, r3
 8004cee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	6072      	str	r2, [r6, #4]
 8004cf4:	2204      	movs	r2, #4
 8004cf6:	f102 0014 	add.w	r0, r2, #20
 8004cfa:	4298      	cmp	r0, r3
 8004cfc:	6871      	ldr	r1, [r6, #4]
 8004cfe:	d953      	bls.n	8004da8 <_dtoa_r+0x300>
 8004d00:	4620      	mov	r0, r4
 8004d02:	f000 fcaa 	bl	800565a <_Balloc>
 8004d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d08:	6030      	str	r0, [r6, #0]
 8004d0a:	f1b9 0f0e 	cmp.w	r9, #14
 8004d0e:	f8d3 b000 	ldr.w	fp, [r3]
 8004d12:	f200 80e6 	bhi.w	8004ee2 <_dtoa_r+0x43a>
 8004d16:	2d00      	cmp	r5, #0
 8004d18:	f000 80e3 	beq.w	8004ee2 <_dtoa_r+0x43a>
 8004d1c:	ed9d 7b00 	vldr	d7, [sp]
 8004d20:	f1ba 0f00 	cmp.w	sl, #0
 8004d24:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004d28:	dd74      	ble.n	8004e14 <_dtoa_r+0x36c>
 8004d2a:	4a2a      	ldr	r2, [pc, #168]	; (8004dd4 <_dtoa_r+0x32c>)
 8004d2c:	f00a 030f 	and.w	r3, sl, #15
 8004d30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d34:	ed93 7b00 	vldr	d7, [r3]
 8004d38:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004d3c:	06f0      	lsls	r0, r6, #27
 8004d3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004d42:	d565      	bpl.n	8004e10 <_dtoa_r+0x368>
 8004d44:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <_dtoa_r+0x330>)
 8004d46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d4e:	f7fb fd29 	bl	80007a4 <__aeabi_ddiv>
 8004d52:	e9cd 0100 	strd	r0, r1, [sp]
 8004d56:	f006 060f 	and.w	r6, r6, #15
 8004d5a:	2503      	movs	r5, #3
 8004d5c:	4f1e      	ldr	r7, [pc, #120]	; (8004dd8 <_dtoa_r+0x330>)
 8004d5e:	e04c      	b.n	8004dfa <_dtoa_r+0x352>
 8004d60:	2301      	movs	r3, #1
 8004d62:	930a      	str	r3, [sp, #40]	; 0x28
 8004d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d66:	4453      	add	r3, sl
 8004d68:	f103 0901 	add.w	r9, r3, #1
 8004d6c:	9302      	str	r3, [sp, #8]
 8004d6e:	464b      	mov	r3, r9
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	bfb8      	it	lt
 8004d74:	2301      	movlt	r3, #1
 8004d76:	e7ba      	b.n	8004cee <_dtoa_r+0x246>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e7b2      	b.n	8004ce2 <_dtoa_r+0x23a>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e7f0      	b.n	8004d62 <_dtoa_r+0x2ba>
 8004d80:	2501      	movs	r5, #1
 8004d82:	2300      	movs	r3, #0
 8004d84:	9306      	str	r3, [sp, #24]
 8004d86:	950a      	str	r5, [sp, #40]	; 0x28
 8004d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d8c:	9302      	str	r3, [sp, #8]
 8004d8e:	4699      	mov	r9, r3
 8004d90:	2200      	movs	r2, #0
 8004d92:	2312      	movs	r3, #18
 8004d94:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d96:	e7aa      	b.n	8004cee <_dtoa_r+0x246>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8004d9c:	e7f4      	b.n	8004d88 <_dtoa_r+0x2e0>
 8004d9e:	2301      	movs	r3, #1
 8004da0:	9302      	str	r3, [sp, #8]
 8004da2:	4699      	mov	r9, r3
 8004da4:	461a      	mov	r2, r3
 8004da6:	e7f5      	b.n	8004d94 <_dtoa_r+0x2ec>
 8004da8:	3101      	adds	r1, #1
 8004daa:	6071      	str	r1, [r6, #4]
 8004dac:	0052      	lsls	r2, r2, #1
 8004dae:	e7a2      	b.n	8004cf6 <_dtoa_r+0x24e>
 8004db0:	636f4361 	.word	0x636f4361
 8004db4:	3fd287a7 	.word	0x3fd287a7
 8004db8:	8b60c8b3 	.word	0x8b60c8b3
 8004dbc:	3fc68a28 	.word	0x3fc68a28
 8004dc0:	509f79fb 	.word	0x509f79fb
 8004dc4:	3fd34413 	.word	0x3fd34413
 8004dc8:	7ff00000 	.word	0x7ff00000
 8004dcc:	08005da1 	.word	0x08005da1
 8004dd0:	3ff80000 	.word	0x3ff80000
 8004dd4:	08005dd8 	.word	0x08005dd8
 8004dd8:	08005db0 	.word	0x08005db0
 8004ddc:	08005dab 	.word	0x08005dab
 8004de0:	07f1      	lsls	r1, r6, #31
 8004de2:	d508      	bpl.n	8004df6 <_dtoa_r+0x34e>
 8004de4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dec:	f7fb fbb0 	bl	8000550 <__aeabi_dmul>
 8004df0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004df4:	3501      	adds	r5, #1
 8004df6:	1076      	asrs	r6, r6, #1
 8004df8:	3708      	adds	r7, #8
 8004dfa:	2e00      	cmp	r6, #0
 8004dfc:	d1f0      	bne.n	8004de0 <_dtoa_r+0x338>
 8004dfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e06:	f7fb fccd 	bl	80007a4 <__aeabi_ddiv>
 8004e0a:	e9cd 0100 	strd	r0, r1, [sp]
 8004e0e:	e01a      	b.n	8004e46 <_dtoa_r+0x39e>
 8004e10:	2502      	movs	r5, #2
 8004e12:	e7a3      	b.n	8004d5c <_dtoa_r+0x2b4>
 8004e14:	f000 80a0 	beq.w	8004f58 <_dtoa_r+0x4b0>
 8004e18:	f1ca 0600 	rsb	r6, sl, #0
 8004e1c:	4b9f      	ldr	r3, [pc, #636]	; (800509c <_dtoa_r+0x5f4>)
 8004e1e:	4fa0      	ldr	r7, [pc, #640]	; (80050a0 <_dtoa_r+0x5f8>)
 8004e20:	f006 020f 	and.w	r2, r6, #15
 8004e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e30:	f7fb fb8e 	bl	8000550 <__aeabi_dmul>
 8004e34:	e9cd 0100 	strd	r0, r1, [sp]
 8004e38:	1136      	asrs	r6, r6, #4
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2502      	movs	r5, #2
 8004e3e:	2e00      	cmp	r6, #0
 8004e40:	d17f      	bne.n	8004f42 <_dtoa_r+0x49a>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e1      	bne.n	8004e0a <_dtoa_r+0x362>
 8004e46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8087 	beq.w	8004f5c <_dtoa_r+0x4b4>
 8004e4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004e52:	2200      	movs	r2, #0
 8004e54:	4b93      	ldr	r3, [pc, #588]	; (80050a4 <_dtoa_r+0x5fc>)
 8004e56:	4630      	mov	r0, r6
 8004e58:	4639      	mov	r1, r7
 8004e5a:	f7fb fdeb 	bl	8000a34 <__aeabi_dcmplt>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d07c      	beq.n	8004f5c <_dtoa_r+0x4b4>
 8004e62:	f1b9 0f00 	cmp.w	r9, #0
 8004e66:	d079      	beq.n	8004f5c <_dtoa_r+0x4b4>
 8004e68:	9b02      	ldr	r3, [sp, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dd35      	ble.n	8004eda <_dtoa_r+0x432>
 8004e6e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8004e72:	9308      	str	r3, [sp, #32]
 8004e74:	4639      	mov	r1, r7
 8004e76:	2200      	movs	r2, #0
 8004e78:	4b8b      	ldr	r3, [pc, #556]	; (80050a8 <_dtoa_r+0x600>)
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	f7fb fb68 	bl	8000550 <__aeabi_dmul>
 8004e80:	e9cd 0100 	strd	r0, r1, [sp]
 8004e84:	9f02      	ldr	r7, [sp, #8]
 8004e86:	3501      	adds	r5, #1
 8004e88:	4628      	mov	r0, r5
 8004e8a:	f7fb faf7 	bl	800047c <__aeabi_i2d>
 8004e8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e92:	f7fb fb5d 	bl	8000550 <__aeabi_dmul>
 8004e96:	2200      	movs	r2, #0
 8004e98:	4b84      	ldr	r3, [pc, #528]	; (80050ac <_dtoa_r+0x604>)
 8004e9a:	f7fb f9a3 	bl	80001e4 <__adddf3>
 8004e9e:	4605      	mov	r5, r0
 8004ea0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004ea4:	2f00      	cmp	r7, #0
 8004ea6:	d15d      	bne.n	8004f64 <_dtoa_r+0x4bc>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4b81      	ldr	r3, [pc, #516]	; (80050b0 <_dtoa_r+0x608>)
 8004eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eb0:	f7fb f996 	bl	80001e0 <__aeabi_dsub>
 8004eb4:	462a      	mov	r2, r5
 8004eb6:	4633      	mov	r3, r6
 8004eb8:	e9cd 0100 	strd	r0, r1, [sp]
 8004ebc:	f7fb fdd8 	bl	8000a70 <__aeabi_dcmpgt>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	f040 8288 	bne.w	80053d6 <_dtoa_r+0x92e>
 8004ec6:	462a      	mov	r2, r5
 8004ec8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed0:	f7fb fdb0 	bl	8000a34 <__aeabi_dcmplt>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	f040 827c 	bne.w	80053d2 <_dtoa_r+0x92a>
 8004eda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ede:	e9cd 2300 	strd	r2, r3, [sp]
 8004ee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f2c0 8150 	blt.w	800518a <_dtoa_r+0x6e2>
 8004eea:	f1ba 0f0e 	cmp.w	sl, #14
 8004eee:	f300 814c 	bgt.w	800518a <_dtoa_r+0x6e2>
 8004ef2:	4b6a      	ldr	r3, [pc, #424]	; (800509c <_dtoa_r+0x5f4>)
 8004ef4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004ef8:	ed93 7b00 	vldr	d7, [r3]
 8004efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f04:	f280 80d8 	bge.w	80050b8 <_dtoa_r+0x610>
 8004f08:	f1b9 0f00 	cmp.w	r9, #0
 8004f0c:	f300 80d4 	bgt.w	80050b8 <_dtoa_r+0x610>
 8004f10:	f040 825e 	bne.w	80053d0 <_dtoa_r+0x928>
 8004f14:	2200      	movs	r2, #0
 8004f16:	4b66      	ldr	r3, [pc, #408]	; (80050b0 <_dtoa_r+0x608>)
 8004f18:	ec51 0b17 	vmov	r0, r1, d7
 8004f1c:	f7fb fb18 	bl	8000550 <__aeabi_dmul>
 8004f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f24:	f7fb fd9a 	bl	8000a5c <__aeabi_dcmpge>
 8004f28:	464f      	mov	r7, r9
 8004f2a:	464e      	mov	r6, r9
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	f040 8234 	bne.w	800539a <_dtoa_r+0x8f2>
 8004f32:	2331      	movs	r3, #49	; 0x31
 8004f34:	f10b 0501 	add.w	r5, fp, #1
 8004f38:	f88b 3000 	strb.w	r3, [fp]
 8004f3c:	f10a 0a01 	add.w	sl, sl, #1
 8004f40:	e22f      	b.n	80053a2 <_dtoa_r+0x8fa>
 8004f42:	07f2      	lsls	r2, r6, #31
 8004f44:	d505      	bpl.n	8004f52 <_dtoa_r+0x4aa>
 8004f46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f4a:	f7fb fb01 	bl	8000550 <__aeabi_dmul>
 8004f4e:	3501      	adds	r5, #1
 8004f50:	2301      	movs	r3, #1
 8004f52:	1076      	asrs	r6, r6, #1
 8004f54:	3708      	adds	r7, #8
 8004f56:	e772      	b.n	8004e3e <_dtoa_r+0x396>
 8004f58:	2502      	movs	r5, #2
 8004f5a:	e774      	b.n	8004e46 <_dtoa_r+0x39e>
 8004f5c:	f8cd a020 	str.w	sl, [sp, #32]
 8004f60:	464f      	mov	r7, r9
 8004f62:	e791      	b.n	8004e88 <_dtoa_r+0x3e0>
 8004f64:	4b4d      	ldr	r3, [pc, #308]	; (800509c <_dtoa_r+0x5f4>)
 8004f66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d047      	beq.n	8005004 <_dtoa_r+0x55c>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	2000      	movs	r0, #0
 8004f7a:	494e      	ldr	r1, [pc, #312]	; (80050b4 <_dtoa_r+0x60c>)
 8004f7c:	f7fb fc12 	bl	80007a4 <__aeabi_ddiv>
 8004f80:	462a      	mov	r2, r5
 8004f82:	4633      	mov	r3, r6
 8004f84:	f7fb f92c 	bl	80001e0 <__aeabi_dsub>
 8004f88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004f8c:	465d      	mov	r5, fp
 8004f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f92:	f7fb fd8d 	bl	8000ab0 <__aeabi_d2iz>
 8004f96:	4606      	mov	r6, r0
 8004f98:	f7fb fa70 	bl	800047c <__aeabi_i2d>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fa4:	f7fb f91c 	bl	80001e0 <__aeabi_dsub>
 8004fa8:	3630      	adds	r6, #48	; 0x30
 8004faa:	f805 6b01 	strb.w	r6, [r5], #1
 8004fae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004fb2:	e9cd 0100 	strd	r0, r1, [sp]
 8004fb6:	f7fb fd3d 	bl	8000a34 <__aeabi_dcmplt>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d163      	bne.n	8005086 <_dtoa_r+0x5de>
 8004fbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	4937      	ldr	r1, [pc, #220]	; (80050a4 <_dtoa_r+0x5fc>)
 8004fc6:	f7fb f90b 	bl	80001e0 <__aeabi_dsub>
 8004fca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004fce:	f7fb fd31 	bl	8000a34 <__aeabi_dcmplt>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	f040 80b7 	bne.w	8005146 <_dtoa_r+0x69e>
 8004fd8:	eba5 030b 	sub.w	r3, r5, fp
 8004fdc:	429f      	cmp	r7, r3
 8004fde:	f77f af7c 	ble.w	8004eda <_dtoa_r+0x432>
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4b30      	ldr	r3, [pc, #192]	; (80050a8 <_dtoa_r+0x600>)
 8004fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fea:	f7fb fab1 	bl	8000550 <__aeabi_dmul>
 8004fee:	2200      	movs	r2, #0
 8004ff0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004ff4:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <_dtoa_r+0x600>)
 8004ff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ffa:	f7fb faa9 	bl	8000550 <__aeabi_dmul>
 8004ffe:	e9cd 0100 	strd	r0, r1, [sp]
 8005002:	e7c4      	b.n	8004f8e <_dtoa_r+0x4e6>
 8005004:	462a      	mov	r2, r5
 8005006:	4633      	mov	r3, r6
 8005008:	f7fb faa2 	bl	8000550 <__aeabi_dmul>
 800500c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005010:	eb0b 0507 	add.w	r5, fp, r7
 8005014:	465e      	mov	r6, fp
 8005016:	e9dd 0100 	ldrd	r0, r1, [sp]
 800501a:	f7fb fd49 	bl	8000ab0 <__aeabi_d2iz>
 800501e:	4607      	mov	r7, r0
 8005020:	f7fb fa2c 	bl	800047c <__aeabi_i2d>
 8005024:	3730      	adds	r7, #48	; 0x30
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800502e:	f7fb f8d7 	bl	80001e0 <__aeabi_dsub>
 8005032:	f806 7b01 	strb.w	r7, [r6], #1
 8005036:	42ae      	cmp	r6, r5
 8005038:	e9cd 0100 	strd	r0, r1, [sp]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	d126      	bne.n	8005090 <_dtoa_r+0x5e8>
 8005042:	4b1c      	ldr	r3, [pc, #112]	; (80050b4 <_dtoa_r+0x60c>)
 8005044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005048:	f7fb f8cc 	bl	80001e4 <__adddf3>
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005054:	f7fb fd0c 	bl	8000a70 <__aeabi_dcmpgt>
 8005058:	2800      	cmp	r0, #0
 800505a:	d174      	bne.n	8005146 <_dtoa_r+0x69e>
 800505c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005060:	2000      	movs	r0, #0
 8005062:	4914      	ldr	r1, [pc, #80]	; (80050b4 <_dtoa_r+0x60c>)
 8005064:	f7fb f8bc 	bl	80001e0 <__aeabi_dsub>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005070:	f7fb fce0 	bl	8000a34 <__aeabi_dcmplt>
 8005074:	2800      	cmp	r0, #0
 8005076:	f43f af30 	beq.w	8004eda <_dtoa_r+0x432>
 800507a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800507e:	2b30      	cmp	r3, #48	; 0x30
 8005080:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005084:	d002      	beq.n	800508c <_dtoa_r+0x5e4>
 8005086:	f8dd a020 	ldr.w	sl, [sp, #32]
 800508a:	e04a      	b.n	8005122 <_dtoa_r+0x67a>
 800508c:	4615      	mov	r5, r2
 800508e:	e7f4      	b.n	800507a <_dtoa_r+0x5d2>
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <_dtoa_r+0x600>)
 8005092:	f7fb fa5d 	bl	8000550 <__aeabi_dmul>
 8005096:	e9cd 0100 	strd	r0, r1, [sp]
 800509a:	e7bc      	b.n	8005016 <_dtoa_r+0x56e>
 800509c:	08005dd8 	.word	0x08005dd8
 80050a0:	08005db0 	.word	0x08005db0
 80050a4:	3ff00000 	.word	0x3ff00000
 80050a8:	40240000 	.word	0x40240000
 80050ac:	401c0000 	.word	0x401c0000
 80050b0:	40140000 	.word	0x40140000
 80050b4:	3fe00000 	.word	0x3fe00000
 80050b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80050bc:	465d      	mov	r5, fp
 80050be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050c2:	4630      	mov	r0, r6
 80050c4:	4639      	mov	r1, r7
 80050c6:	f7fb fb6d 	bl	80007a4 <__aeabi_ddiv>
 80050ca:	f7fb fcf1 	bl	8000ab0 <__aeabi_d2iz>
 80050ce:	4680      	mov	r8, r0
 80050d0:	f7fb f9d4 	bl	800047c <__aeabi_i2d>
 80050d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050d8:	f7fb fa3a 	bl	8000550 <__aeabi_dmul>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4630      	mov	r0, r6
 80050e2:	4639      	mov	r1, r7
 80050e4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80050e8:	f7fb f87a 	bl	80001e0 <__aeabi_dsub>
 80050ec:	f805 6b01 	strb.w	r6, [r5], #1
 80050f0:	eba5 060b 	sub.w	r6, r5, fp
 80050f4:	45b1      	cmp	r9, r6
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	d139      	bne.n	8005170 <_dtoa_r+0x6c8>
 80050fc:	f7fb f872 	bl	80001e4 <__adddf3>
 8005100:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005104:	4606      	mov	r6, r0
 8005106:	460f      	mov	r7, r1
 8005108:	f7fb fcb2 	bl	8000a70 <__aeabi_dcmpgt>
 800510c:	b9c8      	cbnz	r0, 8005142 <_dtoa_r+0x69a>
 800510e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005112:	4630      	mov	r0, r6
 8005114:	4639      	mov	r1, r7
 8005116:	f7fb fc83 	bl	8000a20 <__aeabi_dcmpeq>
 800511a:	b110      	cbz	r0, 8005122 <_dtoa_r+0x67a>
 800511c:	f018 0f01 	tst.w	r8, #1
 8005120:	d10f      	bne.n	8005142 <_dtoa_r+0x69a>
 8005122:	9904      	ldr	r1, [sp, #16]
 8005124:	4620      	mov	r0, r4
 8005126:	f000 facc 	bl	80056c2 <_Bfree>
 800512a:	2300      	movs	r3, #0
 800512c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800512e:	702b      	strb	r3, [r5, #0]
 8005130:	f10a 0301 	add.w	r3, sl, #1
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8241 	beq.w	80055c0 <_dtoa_r+0xb18>
 800513e:	601d      	str	r5, [r3, #0]
 8005140:	e23e      	b.n	80055c0 <_dtoa_r+0xb18>
 8005142:	f8cd a020 	str.w	sl, [sp, #32]
 8005146:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800514a:	2a39      	cmp	r2, #57	; 0x39
 800514c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005150:	d108      	bne.n	8005164 <_dtoa_r+0x6bc>
 8005152:	459b      	cmp	fp, r3
 8005154:	d10a      	bne.n	800516c <_dtoa_r+0x6c4>
 8005156:	9b08      	ldr	r3, [sp, #32]
 8005158:	3301      	adds	r3, #1
 800515a:	9308      	str	r3, [sp, #32]
 800515c:	2330      	movs	r3, #48	; 0x30
 800515e:	f88b 3000 	strb.w	r3, [fp]
 8005162:	465b      	mov	r3, fp
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	3201      	adds	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	e78c      	b.n	8005086 <_dtoa_r+0x5de>
 800516c:	461d      	mov	r5, r3
 800516e:	e7ea      	b.n	8005146 <_dtoa_r+0x69e>
 8005170:	2200      	movs	r2, #0
 8005172:	4b9b      	ldr	r3, [pc, #620]	; (80053e0 <_dtoa_r+0x938>)
 8005174:	f7fb f9ec 	bl	8000550 <__aeabi_dmul>
 8005178:	2200      	movs	r2, #0
 800517a:	2300      	movs	r3, #0
 800517c:	4606      	mov	r6, r0
 800517e:	460f      	mov	r7, r1
 8005180:	f7fb fc4e 	bl	8000a20 <__aeabi_dcmpeq>
 8005184:	2800      	cmp	r0, #0
 8005186:	d09a      	beq.n	80050be <_dtoa_r+0x616>
 8005188:	e7cb      	b.n	8005122 <_dtoa_r+0x67a>
 800518a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800518c:	2a00      	cmp	r2, #0
 800518e:	f000 808b 	beq.w	80052a8 <_dtoa_r+0x800>
 8005192:	9a06      	ldr	r2, [sp, #24]
 8005194:	2a01      	cmp	r2, #1
 8005196:	dc6e      	bgt.n	8005276 <_dtoa_r+0x7ce>
 8005198:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800519a:	2a00      	cmp	r2, #0
 800519c:	d067      	beq.n	800526e <_dtoa_r+0x7c6>
 800519e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051a2:	9f07      	ldr	r7, [sp, #28]
 80051a4:	9d05      	ldr	r5, [sp, #20]
 80051a6:	9a05      	ldr	r2, [sp, #20]
 80051a8:	2101      	movs	r1, #1
 80051aa:	441a      	add	r2, r3
 80051ac:	4620      	mov	r0, r4
 80051ae:	9205      	str	r2, [sp, #20]
 80051b0:	4498      	add	r8, r3
 80051b2:	f000 fb26 	bl	8005802 <__i2b>
 80051b6:	4606      	mov	r6, r0
 80051b8:	2d00      	cmp	r5, #0
 80051ba:	dd0c      	ble.n	80051d6 <_dtoa_r+0x72e>
 80051bc:	f1b8 0f00 	cmp.w	r8, #0
 80051c0:	dd09      	ble.n	80051d6 <_dtoa_r+0x72e>
 80051c2:	4545      	cmp	r5, r8
 80051c4:	9a05      	ldr	r2, [sp, #20]
 80051c6:	462b      	mov	r3, r5
 80051c8:	bfa8      	it	ge
 80051ca:	4643      	movge	r3, r8
 80051cc:	1ad2      	subs	r2, r2, r3
 80051ce:	9205      	str	r2, [sp, #20]
 80051d0:	1aed      	subs	r5, r5, r3
 80051d2:	eba8 0803 	sub.w	r8, r8, r3
 80051d6:	9b07      	ldr	r3, [sp, #28]
 80051d8:	b1eb      	cbz	r3, 8005216 <_dtoa_r+0x76e>
 80051da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d067      	beq.n	80052b0 <_dtoa_r+0x808>
 80051e0:	b18f      	cbz	r7, 8005206 <_dtoa_r+0x75e>
 80051e2:	4631      	mov	r1, r6
 80051e4:	463a      	mov	r2, r7
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 fbaa 	bl	8005940 <__pow5mult>
 80051ec:	9a04      	ldr	r2, [sp, #16]
 80051ee:	4601      	mov	r1, r0
 80051f0:	4606      	mov	r6, r0
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 fb0e 	bl	8005814 <__multiply>
 80051f8:	9904      	ldr	r1, [sp, #16]
 80051fa:	9008      	str	r0, [sp, #32]
 80051fc:	4620      	mov	r0, r4
 80051fe:	f000 fa60 	bl	80056c2 <_Bfree>
 8005202:	9b08      	ldr	r3, [sp, #32]
 8005204:	9304      	str	r3, [sp, #16]
 8005206:	9b07      	ldr	r3, [sp, #28]
 8005208:	1bda      	subs	r2, r3, r7
 800520a:	d004      	beq.n	8005216 <_dtoa_r+0x76e>
 800520c:	9904      	ldr	r1, [sp, #16]
 800520e:	4620      	mov	r0, r4
 8005210:	f000 fb96 	bl	8005940 <__pow5mult>
 8005214:	9004      	str	r0, [sp, #16]
 8005216:	2101      	movs	r1, #1
 8005218:	4620      	mov	r0, r4
 800521a:	f000 faf2 	bl	8005802 <__i2b>
 800521e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005220:	4607      	mov	r7, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 81d0 	beq.w	80055c8 <_dtoa_r+0xb20>
 8005228:	461a      	mov	r2, r3
 800522a:	4601      	mov	r1, r0
 800522c:	4620      	mov	r0, r4
 800522e:	f000 fb87 	bl	8005940 <__pow5mult>
 8005232:	9b06      	ldr	r3, [sp, #24]
 8005234:	2b01      	cmp	r3, #1
 8005236:	4607      	mov	r7, r0
 8005238:	dc40      	bgt.n	80052bc <_dtoa_r+0x814>
 800523a:	9b00      	ldr	r3, [sp, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d139      	bne.n	80052b4 <_dtoa_r+0x80c>
 8005240:	9b01      	ldr	r3, [sp, #4]
 8005242:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005246:	2b00      	cmp	r3, #0
 8005248:	d136      	bne.n	80052b8 <_dtoa_r+0x810>
 800524a:	9b01      	ldr	r3, [sp, #4]
 800524c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005250:	0d1b      	lsrs	r3, r3, #20
 8005252:	051b      	lsls	r3, r3, #20
 8005254:	b12b      	cbz	r3, 8005262 <_dtoa_r+0x7ba>
 8005256:	9b05      	ldr	r3, [sp, #20]
 8005258:	3301      	adds	r3, #1
 800525a:	9305      	str	r3, [sp, #20]
 800525c:	f108 0801 	add.w	r8, r8, #1
 8005260:	2301      	movs	r3, #1
 8005262:	9307      	str	r3, [sp, #28]
 8005264:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005266:	2b00      	cmp	r3, #0
 8005268:	d12a      	bne.n	80052c0 <_dtoa_r+0x818>
 800526a:	2001      	movs	r0, #1
 800526c:	e030      	b.n	80052d0 <_dtoa_r+0x828>
 800526e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005270:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005274:	e795      	b.n	80051a2 <_dtoa_r+0x6fa>
 8005276:	9b07      	ldr	r3, [sp, #28]
 8005278:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800527c:	42bb      	cmp	r3, r7
 800527e:	bfbf      	itttt	lt
 8005280:	9b07      	ldrlt	r3, [sp, #28]
 8005282:	9707      	strlt	r7, [sp, #28]
 8005284:	1afa      	sublt	r2, r7, r3
 8005286:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005288:	bfbb      	ittet	lt
 800528a:	189b      	addlt	r3, r3, r2
 800528c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800528e:	1bdf      	subge	r7, r3, r7
 8005290:	2700      	movlt	r7, #0
 8005292:	f1b9 0f00 	cmp.w	r9, #0
 8005296:	bfb5      	itete	lt
 8005298:	9b05      	ldrlt	r3, [sp, #20]
 800529a:	9d05      	ldrge	r5, [sp, #20]
 800529c:	eba3 0509 	sublt.w	r5, r3, r9
 80052a0:	464b      	movge	r3, r9
 80052a2:	bfb8      	it	lt
 80052a4:	2300      	movlt	r3, #0
 80052a6:	e77e      	b.n	80051a6 <_dtoa_r+0x6fe>
 80052a8:	9f07      	ldr	r7, [sp, #28]
 80052aa:	9d05      	ldr	r5, [sp, #20]
 80052ac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80052ae:	e783      	b.n	80051b8 <_dtoa_r+0x710>
 80052b0:	9a07      	ldr	r2, [sp, #28]
 80052b2:	e7ab      	b.n	800520c <_dtoa_r+0x764>
 80052b4:	2300      	movs	r3, #0
 80052b6:	e7d4      	b.n	8005262 <_dtoa_r+0x7ba>
 80052b8:	9b00      	ldr	r3, [sp, #0]
 80052ba:	e7d2      	b.n	8005262 <_dtoa_r+0x7ba>
 80052bc:	2300      	movs	r3, #0
 80052be:	9307      	str	r3, [sp, #28]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80052c6:	6918      	ldr	r0, [r3, #16]
 80052c8:	f000 fa4d 	bl	8005766 <__hi0bits>
 80052cc:	f1c0 0020 	rsb	r0, r0, #32
 80052d0:	4440      	add	r0, r8
 80052d2:	f010 001f 	ands.w	r0, r0, #31
 80052d6:	d047      	beq.n	8005368 <_dtoa_r+0x8c0>
 80052d8:	f1c0 0320 	rsb	r3, r0, #32
 80052dc:	2b04      	cmp	r3, #4
 80052de:	dd3b      	ble.n	8005358 <_dtoa_r+0x8b0>
 80052e0:	9b05      	ldr	r3, [sp, #20]
 80052e2:	f1c0 001c 	rsb	r0, r0, #28
 80052e6:	4403      	add	r3, r0
 80052e8:	9305      	str	r3, [sp, #20]
 80052ea:	4405      	add	r5, r0
 80052ec:	4480      	add	r8, r0
 80052ee:	9b05      	ldr	r3, [sp, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	dd05      	ble.n	8005300 <_dtoa_r+0x858>
 80052f4:	461a      	mov	r2, r3
 80052f6:	9904      	ldr	r1, [sp, #16]
 80052f8:	4620      	mov	r0, r4
 80052fa:	f000 fb6f 	bl	80059dc <__lshift>
 80052fe:	9004      	str	r0, [sp, #16]
 8005300:	f1b8 0f00 	cmp.w	r8, #0
 8005304:	dd05      	ble.n	8005312 <_dtoa_r+0x86a>
 8005306:	4639      	mov	r1, r7
 8005308:	4642      	mov	r2, r8
 800530a:	4620      	mov	r0, r4
 800530c:	f000 fb66 	bl	80059dc <__lshift>
 8005310:	4607      	mov	r7, r0
 8005312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005314:	b353      	cbz	r3, 800536c <_dtoa_r+0x8c4>
 8005316:	4639      	mov	r1, r7
 8005318:	9804      	ldr	r0, [sp, #16]
 800531a:	f000 fbb3 	bl	8005a84 <__mcmp>
 800531e:	2800      	cmp	r0, #0
 8005320:	da24      	bge.n	800536c <_dtoa_r+0x8c4>
 8005322:	2300      	movs	r3, #0
 8005324:	220a      	movs	r2, #10
 8005326:	9904      	ldr	r1, [sp, #16]
 8005328:	4620      	mov	r0, r4
 800532a:	f000 f9e1 	bl	80056f0 <__multadd>
 800532e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005330:	9004      	str	r0, [sp, #16]
 8005332:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 814d 	beq.w	80055d6 <_dtoa_r+0xb2e>
 800533c:	2300      	movs	r3, #0
 800533e:	4631      	mov	r1, r6
 8005340:	220a      	movs	r2, #10
 8005342:	4620      	mov	r0, r4
 8005344:	f000 f9d4 	bl	80056f0 <__multadd>
 8005348:	9b02      	ldr	r3, [sp, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	4606      	mov	r6, r0
 800534e:	dc4f      	bgt.n	80053f0 <_dtoa_r+0x948>
 8005350:	9b06      	ldr	r3, [sp, #24]
 8005352:	2b02      	cmp	r3, #2
 8005354:	dd4c      	ble.n	80053f0 <_dtoa_r+0x948>
 8005356:	e011      	b.n	800537c <_dtoa_r+0x8d4>
 8005358:	d0c9      	beq.n	80052ee <_dtoa_r+0x846>
 800535a:	9a05      	ldr	r2, [sp, #20]
 800535c:	331c      	adds	r3, #28
 800535e:	441a      	add	r2, r3
 8005360:	9205      	str	r2, [sp, #20]
 8005362:	441d      	add	r5, r3
 8005364:	4498      	add	r8, r3
 8005366:	e7c2      	b.n	80052ee <_dtoa_r+0x846>
 8005368:	4603      	mov	r3, r0
 800536a:	e7f6      	b.n	800535a <_dtoa_r+0x8b2>
 800536c:	f1b9 0f00 	cmp.w	r9, #0
 8005370:	dc38      	bgt.n	80053e4 <_dtoa_r+0x93c>
 8005372:	9b06      	ldr	r3, [sp, #24]
 8005374:	2b02      	cmp	r3, #2
 8005376:	dd35      	ble.n	80053e4 <_dtoa_r+0x93c>
 8005378:	f8cd 9008 	str.w	r9, [sp, #8]
 800537c:	9b02      	ldr	r3, [sp, #8]
 800537e:	b963      	cbnz	r3, 800539a <_dtoa_r+0x8f2>
 8005380:	4639      	mov	r1, r7
 8005382:	2205      	movs	r2, #5
 8005384:	4620      	mov	r0, r4
 8005386:	f000 f9b3 	bl	80056f0 <__multadd>
 800538a:	4601      	mov	r1, r0
 800538c:	4607      	mov	r7, r0
 800538e:	9804      	ldr	r0, [sp, #16]
 8005390:	f000 fb78 	bl	8005a84 <__mcmp>
 8005394:	2800      	cmp	r0, #0
 8005396:	f73f adcc 	bgt.w	8004f32 <_dtoa_r+0x48a>
 800539a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800539c:	465d      	mov	r5, fp
 800539e:	ea6f 0a03 	mvn.w	sl, r3
 80053a2:	f04f 0900 	mov.w	r9, #0
 80053a6:	4639      	mov	r1, r7
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 f98a 	bl	80056c2 <_Bfree>
 80053ae:	2e00      	cmp	r6, #0
 80053b0:	f43f aeb7 	beq.w	8005122 <_dtoa_r+0x67a>
 80053b4:	f1b9 0f00 	cmp.w	r9, #0
 80053b8:	d005      	beq.n	80053c6 <_dtoa_r+0x91e>
 80053ba:	45b1      	cmp	r9, r6
 80053bc:	d003      	beq.n	80053c6 <_dtoa_r+0x91e>
 80053be:	4649      	mov	r1, r9
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 f97e 	bl	80056c2 <_Bfree>
 80053c6:	4631      	mov	r1, r6
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 f97a 	bl	80056c2 <_Bfree>
 80053ce:	e6a8      	b.n	8005122 <_dtoa_r+0x67a>
 80053d0:	2700      	movs	r7, #0
 80053d2:	463e      	mov	r6, r7
 80053d4:	e7e1      	b.n	800539a <_dtoa_r+0x8f2>
 80053d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80053da:	463e      	mov	r6, r7
 80053dc:	e5a9      	b.n	8004f32 <_dtoa_r+0x48a>
 80053de:	bf00      	nop
 80053e0:	40240000 	.word	0x40240000
 80053e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053e6:	f8cd 9008 	str.w	r9, [sp, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 80fa 	beq.w	80055e4 <_dtoa_r+0xb3c>
 80053f0:	2d00      	cmp	r5, #0
 80053f2:	dd05      	ble.n	8005400 <_dtoa_r+0x958>
 80053f4:	4631      	mov	r1, r6
 80053f6:	462a      	mov	r2, r5
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 faef 	bl	80059dc <__lshift>
 80053fe:	4606      	mov	r6, r0
 8005400:	9b07      	ldr	r3, [sp, #28]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d04c      	beq.n	80054a0 <_dtoa_r+0x9f8>
 8005406:	6871      	ldr	r1, [r6, #4]
 8005408:	4620      	mov	r0, r4
 800540a:	f000 f926 	bl	800565a <_Balloc>
 800540e:	6932      	ldr	r2, [r6, #16]
 8005410:	3202      	adds	r2, #2
 8005412:	4605      	mov	r5, r0
 8005414:	0092      	lsls	r2, r2, #2
 8005416:	f106 010c 	add.w	r1, r6, #12
 800541a:	300c      	adds	r0, #12
 800541c:	f000 f912 	bl	8005644 <memcpy>
 8005420:	2201      	movs	r2, #1
 8005422:	4629      	mov	r1, r5
 8005424:	4620      	mov	r0, r4
 8005426:	f000 fad9 	bl	80059dc <__lshift>
 800542a:	9b00      	ldr	r3, [sp, #0]
 800542c:	f8cd b014 	str.w	fp, [sp, #20]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	46b1      	mov	r9, r6
 8005436:	9307      	str	r3, [sp, #28]
 8005438:	4606      	mov	r6, r0
 800543a:	4639      	mov	r1, r7
 800543c:	9804      	ldr	r0, [sp, #16]
 800543e:	f7ff faa6 	bl	800498e <quorem>
 8005442:	4649      	mov	r1, r9
 8005444:	4605      	mov	r5, r0
 8005446:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800544a:	9804      	ldr	r0, [sp, #16]
 800544c:	f000 fb1a 	bl	8005a84 <__mcmp>
 8005450:	4632      	mov	r2, r6
 8005452:	9000      	str	r0, [sp, #0]
 8005454:	4639      	mov	r1, r7
 8005456:	4620      	mov	r0, r4
 8005458:	f000 fb2e 	bl	8005ab8 <__mdiff>
 800545c:	68c3      	ldr	r3, [r0, #12]
 800545e:	4602      	mov	r2, r0
 8005460:	bb03      	cbnz	r3, 80054a4 <_dtoa_r+0x9fc>
 8005462:	4601      	mov	r1, r0
 8005464:	9008      	str	r0, [sp, #32]
 8005466:	9804      	ldr	r0, [sp, #16]
 8005468:	f000 fb0c 	bl	8005a84 <__mcmp>
 800546c:	9a08      	ldr	r2, [sp, #32]
 800546e:	4603      	mov	r3, r0
 8005470:	4611      	mov	r1, r2
 8005472:	4620      	mov	r0, r4
 8005474:	9308      	str	r3, [sp, #32]
 8005476:	f000 f924 	bl	80056c2 <_Bfree>
 800547a:	9b08      	ldr	r3, [sp, #32]
 800547c:	b9a3      	cbnz	r3, 80054a8 <_dtoa_r+0xa00>
 800547e:	9a06      	ldr	r2, [sp, #24]
 8005480:	b992      	cbnz	r2, 80054a8 <_dtoa_r+0xa00>
 8005482:	9a07      	ldr	r2, [sp, #28]
 8005484:	b982      	cbnz	r2, 80054a8 <_dtoa_r+0xa00>
 8005486:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800548a:	d029      	beq.n	80054e0 <_dtoa_r+0xa38>
 800548c:	9b00      	ldr	r3, [sp, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	dd01      	ble.n	8005496 <_dtoa_r+0x9ee>
 8005492:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005496:	9b05      	ldr	r3, [sp, #20]
 8005498:	1c5d      	adds	r5, r3, #1
 800549a:	f883 8000 	strb.w	r8, [r3]
 800549e:	e782      	b.n	80053a6 <_dtoa_r+0x8fe>
 80054a0:	4630      	mov	r0, r6
 80054a2:	e7c2      	b.n	800542a <_dtoa_r+0x982>
 80054a4:	2301      	movs	r3, #1
 80054a6:	e7e3      	b.n	8005470 <_dtoa_r+0x9c8>
 80054a8:	9a00      	ldr	r2, [sp, #0]
 80054aa:	2a00      	cmp	r2, #0
 80054ac:	db04      	blt.n	80054b8 <_dtoa_r+0xa10>
 80054ae:	d125      	bne.n	80054fc <_dtoa_r+0xa54>
 80054b0:	9a06      	ldr	r2, [sp, #24]
 80054b2:	bb1a      	cbnz	r2, 80054fc <_dtoa_r+0xa54>
 80054b4:	9a07      	ldr	r2, [sp, #28]
 80054b6:	bb0a      	cbnz	r2, 80054fc <_dtoa_r+0xa54>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	ddec      	ble.n	8005496 <_dtoa_r+0x9ee>
 80054bc:	2201      	movs	r2, #1
 80054be:	9904      	ldr	r1, [sp, #16]
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 fa8b 	bl	80059dc <__lshift>
 80054c6:	4639      	mov	r1, r7
 80054c8:	9004      	str	r0, [sp, #16]
 80054ca:	f000 fadb 	bl	8005a84 <__mcmp>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	dc03      	bgt.n	80054da <_dtoa_r+0xa32>
 80054d2:	d1e0      	bne.n	8005496 <_dtoa_r+0x9ee>
 80054d4:	f018 0f01 	tst.w	r8, #1
 80054d8:	d0dd      	beq.n	8005496 <_dtoa_r+0x9ee>
 80054da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80054de:	d1d8      	bne.n	8005492 <_dtoa_r+0x9ea>
 80054e0:	9b05      	ldr	r3, [sp, #20]
 80054e2:	9a05      	ldr	r2, [sp, #20]
 80054e4:	1c5d      	adds	r5, r3, #1
 80054e6:	2339      	movs	r3, #57	; 0x39
 80054e8:	7013      	strb	r3, [r2, #0]
 80054ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054ee:	2b39      	cmp	r3, #57	; 0x39
 80054f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80054f4:	d04f      	beq.n	8005596 <_dtoa_r+0xaee>
 80054f6:	3301      	adds	r3, #1
 80054f8:	7013      	strb	r3, [r2, #0]
 80054fa:	e754      	b.n	80053a6 <_dtoa_r+0x8fe>
 80054fc:	9a05      	ldr	r2, [sp, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f102 0501 	add.w	r5, r2, #1
 8005504:	dd06      	ble.n	8005514 <_dtoa_r+0xa6c>
 8005506:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800550a:	d0e9      	beq.n	80054e0 <_dtoa_r+0xa38>
 800550c:	f108 0801 	add.w	r8, r8, #1
 8005510:	9b05      	ldr	r3, [sp, #20]
 8005512:	e7c2      	b.n	800549a <_dtoa_r+0x9f2>
 8005514:	9a02      	ldr	r2, [sp, #8]
 8005516:	f805 8c01 	strb.w	r8, [r5, #-1]
 800551a:	eba5 030b 	sub.w	r3, r5, fp
 800551e:	4293      	cmp	r3, r2
 8005520:	d021      	beq.n	8005566 <_dtoa_r+0xabe>
 8005522:	2300      	movs	r3, #0
 8005524:	220a      	movs	r2, #10
 8005526:	9904      	ldr	r1, [sp, #16]
 8005528:	4620      	mov	r0, r4
 800552a:	f000 f8e1 	bl	80056f0 <__multadd>
 800552e:	45b1      	cmp	r9, r6
 8005530:	9004      	str	r0, [sp, #16]
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	f04f 020a 	mov.w	r2, #10
 800553a:	4649      	mov	r1, r9
 800553c:	4620      	mov	r0, r4
 800553e:	d105      	bne.n	800554c <_dtoa_r+0xaa4>
 8005540:	f000 f8d6 	bl	80056f0 <__multadd>
 8005544:	4681      	mov	r9, r0
 8005546:	4606      	mov	r6, r0
 8005548:	9505      	str	r5, [sp, #20]
 800554a:	e776      	b.n	800543a <_dtoa_r+0x992>
 800554c:	f000 f8d0 	bl	80056f0 <__multadd>
 8005550:	4631      	mov	r1, r6
 8005552:	4681      	mov	r9, r0
 8005554:	2300      	movs	r3, #0
 8005556:	220a      	movs	r2, #10
 8005558:	4620      	mov	r0, r4
 800555a:	f000 f8c9 	bl	80056f0 <__multadd>
 800555e:	4606      	mov	r6, r0
 8005560:	e7f2      	b.n	8005548 <_dtoa_r+0xaa0>
 8005562:	f04f 0900 	mov.w	r9, #0
 8005566:	2201      	movs	r2, #1
 8005568:	9904      	ldr	r1, [sp, #16]
 800556a:	4620      	mov	r0, r4
 800556c:	f000 fa36 	bl	80059dc <__lshift>
 8005570:	4639      	mov	r1, r7
 8005572:	9004      	str	r0, [sp, #16]
 8005574:	f000 fa86 	bl	8005a84 <__mcmp>
 8005578:	2800      	cmp	r0, #0
 800557a:	dcb6      	bgt.n	80054ea <_dtoa_r+0xa42>
 800557c:	d102      	bne.n	8005584 <_dtoa_r+0xadc>
 800557e:	f018 0f01 	tst.w	r8, #1
 8005582:	d1b2      	bne.n	80054ea <_dtoa_r+0xa42>
 8005584:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005588:	2b30      	cmp	r3, #48	; 0x30
 800558a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800558e:	f47f af0a 	bne.w	80053a6 <_dtoa_r+0x8fe>
 8005592:	4615      	mov	r5, r2
 8005594:	e7f6      	b.n	8005584 <_dtoa_r+0xadc>
 8005596:	4593      	cmp	fp, r2
 8005598:	d105      	bne.n	80055a6 <_dtoa_r+0xafe>
 800559a:	2331      	movs	r3, #49	; 0x31
 800559c:	f10a 0a01 	add.w	sl, sl, #1
 80055a0:	f88b 3000 	strb.w	r3, [fp]
 80055a4:	e6ff      	b.n	80053a6 <_dtoa_r+0x8fe>
 80055a6:	4615      	mov	r5, r2
 80055a8:	e79f      	b.n	80054ea <_dtoa_r+0xa42>
 80055aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005610 <_dtoa_r+0xb68>
 80055ae:	e007      	b.n	80055c0 <_dtoa_r+0xb18>
 80055b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005614 <_dtoa_r+0xb6c>
 80055b6:	b11b      	cbz	r3, 80055c0 <_dtoa_r+0xb18>
 80055b8:	f10b 0308 	add.w	r3, fp, #8
 80055bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	4658      	mov	r0, fp
 80055c2:	b017      	add	sp, #92	; 0x5c
 80055c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c8:	9b06      	ldr	r3, [sp, #24]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	f77f ae35 	ble.w	800523a <_dtoa_r+0x792>
 80055d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055d2:	9307      	str	r3, [sp, #28]
 80055d4:	e649      	b.n	800526a <_dtoa_r+0x7c2>
 80055d6:	9b02      	ldr	r3, [sp, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dc03      	bgt.n	80055e4 <_dtoa_r+0xb3c>
 80055dc:	9b06      	ldr	r3, [sp, #24]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	f73f aecc 	bgt.w	800537c <_dtoa_r+0x8d4>
 80055e4:	465d      	mov	r5, fp
 80055e6:	4639      	mov	r1, r7
 80055e8:	9804      	ldr	r0, [sp, #16]
 80055ea:	f7ff f9d0 	bl	800498e <quorem>
 80055ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80055f2:	f805 8b01 	strb.w	r8, [r5], #1
 80055f6:	9a02      	ldr	r2, [sp, #8]
 80055f8:	eba5 030b 	sub.w	r3, r5, fp
 80055fc:	429a      	cmp	r2, r3
 80055fe:	ddb0      	ble.n	8005562 <_dtoa_r+0xaba>
 8005600:	2300      	movs	r3, #0
 8005602:	220a      	movs	r2, #10
 8005604:	9904      	ldr	r1, [sp, #16]
 8005606:	4620      	mov	r0, r4
 8005608:	f000 f872 	bl	80056f0 <__multadd>
 800560c:	9004      	str	r0, [sp, #16]
 800560e:	e7ea      	b.n	80055e6 <_dtoa_r+0xb3e>
 8005610:	08005da0 	.word	0x08005da0
 8005614:	08005da2 	.word	0x08005da2

08005618 <_localeconv_r>:
 8005618:	4b04      	ldr	r3, [pc, #16]	; (800562c <_localeconv_r+0x14>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6a18      	ldr	r0, [r3, #32]
 800561e:	4b04      	ldr	r3, [pc, #16]	; (8005630 <_localeconv_r+0x18>)
 8005620:	2800      	cmp	r0, #0
 8005622:	bf08      	it	eq
 8005624:	4618      	moveq	r0, r3
 8005626:	30f0      	adds	r0, #240	; 0xf0
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	2000000c 	.word	0x2000000c
 8005630:	20000070 	.word	0x20000070

08005634 <malloc>:
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <malloc+0xc>)
 8005636:	4601      	mov	r1, r0
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f000 baf7 	b.w	8005c2c <_malloc_r>
 800563e:	bf00      	nop
 8005640:	2000000c 	.word	0x2000000c

08005644 <memcpy>:
 8005644:	b510      	push	{r4, lr}
 8005646:	1e43      	subs	r3, r0, #1
 8005648:	440a      	add	r2, r1
 800564a:	4291      	cmp	r1, r2
 800564c:	d100      	bne.n	8005650 <memcpy+0xc>
 800564e:	bd10      	pop	{r4, pc}
 8005650:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005654:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005658:	e7f7      	b.n	800564a <memcpy+0x6>

0800565a <_Balloc>:
 800565a:	b570      	push	{r4, r5, r6, lr}
 800565c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800565e:	4604      	mov	r4, r0
 8005660:	460e      	mov	r6, r1
 8005662:	b93d      	cbnz	r5, 8005674 <_Balloc+0x1a>
 8005664:	2010      	movs	r0, #16
 8005666:	f7ff ffe5 	bl	8005634 <malloc>
 800566a:	6260      	str	r0, [r4, #36]	; 0x24
 800566c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005670:	6005      	str	r5, [r0, #0]
 8005672:	60c5      	str	r5, [r0, #12]
 8005674:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005676:	68eb      	ldr	r3, [r5, #12]
 8005678:	b183      	cbz	r3, 800569c <_Balloc+0x42>
 800567a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005682:	b9b8      	cbnz	r0, 80056b4 <_Balloc+0x5a>
 8005684:	2101      	movs	r1, #1
 8005686:	fa01 f506 	lsl.w	r5, r1, r6
 800568a:	1d6a      	adds	r2, r5, #5
 800568c:	0092      	lsls	r2, r2, #2
 800568e:	4620      	mov	r0, r4
 8005690:	f000 fabe 	bl	8005c10 <_calloc_r>
 8005694:	b160      	cbz	r0, 80056b0 <_Balloc+0x56>
 8005696:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800569a:	e00e      	b.n	80056ba <_Balloc+0x60>
 800569c:	2221      	movs	r2, #33	; 0x21
 800569e:	2104      	movs	r1, #4
 80056a0:	4620      	mov	r0, r4
 80056a2:	f000 fab5 	bl	8005c10 <_calloc_r>
 80056a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056a8:	60e8      	str	r0, [r5, #12]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e4      	bne.n	800567a <_Balloc+0x20>
 80056b0:	2000      	movs	r0, #0
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	6802      	ldr	r2, [r0, #0]
 80056b6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80056ba:	2300      	movs	r3, #0
 80056bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80056c0:	e7f7      	b.n	80056b2 <_Balloc+0x58>

080056c2 <_Bfree>:
 80056c2:	b570      	push	{r4, r5, r6, lr}
 80056c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80056c6:	4606      	mov	r6, r0
 80056c8:	460d      	mov	r5, r1
 80056ca:	b93c      	cbnz	r4, 80056dc <_Bfree+0x1a>
 80056cc:	2010      	movs	r0, #16
 80056ce:	f7ff ffb1 	bl	8005634 <malloc>
 80056d2:	6270      	str	r0, [r6, #36]	; 0x24
 80056d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80056d8:	6004      	str	r4, [r0, #0]
 80056da:	60c4      	str	r4, [r0, #12]
 80056dc:	b13d      	cbz	r5, 80056ee <_Bfree+0x2c>
 80056de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80056e0:	686a      	ldr	r2, [r5, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056e8:	6029      	str	r1, [r5, #0]
 80056ea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80056ee:	bd70      	pop	{r4, r5, r6, pc}

080056f0 <__multadd>:
 80056f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056f4:	690d      	ldr	r5, [r1, #16]
 80056f6:	461f      	mov	r7, r3
 80056f8:	4606      	mov	r6, r0
 80056fa:	460c      	mov	r4, r1
 80056fc:	f101 0c14 	add.w	ip, r1, #20
 8005700:	2300      	movs	r3, #0
 8005702:	f8dc 0000 	ldr.w	r0, [ip]
 8005706:	b281      	uxth	r1, r0
 8005708:	fb02 7101 	mla	r1, r2, r1, r7
 800570c:	0c0f      	lsrs	r7, r1, #16
 800570e:	0c00      	lsrs	r0, r0, #16
 8005710:	fb02 7000 	mla	r0, r2, r0, r7
 8005714:	b289      	uxth	r1, r1
 8005716:	3301      	adds	r3, #1
 8005718:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800571c:	429d      	cmp	r5, r3
 800571e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005722:	f84c 1b04 	str.w	r1, [ip], #4
 8005726:	dcec      	bgt.n	8005702 <__multadd+0x12>
 8005728:	b1d7      	cbz	r7, 8005760 <__multadd+0x70>
 800572a:	68a3      	ldr	r3, [r4, #8]
 800572c:	42ab      	cmp	r3, r5
 800572e:	dc12      	bgt.n	8005756 <__multadd+0x66>
 8005730:	6861      	ldr	r1, [r4, #4]
 8005732:	4630      	mov	r0, r6
 8005734:	3101      	adds	r1, #1
 8005736:	f7ff ff90 	bl	800565a <_Balloc>
 800573a:	6922      	ldr	r2, [r4, #16]
 800573c:	3202      	adds	r2, #2
 800573e:	f104 010c 	add.w	r1, r4, #12
 8005742:	4680      	mov	r8, r0
 8005744:	0092      	lsls	r2, r2, #2
 8005746:	300c      	adds	r0, #12
 8005748:	f7ff ff7c 	bl	8005644 <memcpy>
 800574c:	4621      	mov	r1, r4
 800574e:	4630      	mov	r0, r6
 8005750:	f7ff ffb7 	bl	80056c2 <_Bfree>
 8005754:	4644      	mov	r4, r8
 8005756:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800575a:	3501      	adds	r5, #1
 800575c:	615f      	str	r7, [r3, #20]
 800575e:	6125      	str	r5, [r4, #16]
 8005760:	4620      	mov	r0, r4
 8005762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005766 <__hi0bits>:
 8005766:	0c02      	lsrs	r2, r0, #16
 8005768:	0412      	lsls	r2, r2, #16
 800576a:	4603      	mov	r3, r0
 800576c:	b9b2      	cbnz	r2, 800579c <__hi0bits+0x36>
 800576e:	0403      	lsls	r3, r0, #16
 8005770:	2010      	movs	r0, #16
 8005772:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005776:	bf04      	itt	eq
 8005778:	021b      	lsleq	r3, r3, #8
 800577a:	3008      	addeq	r0, #8
 800577c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005780:	bf04      	itt	eq
 8005782:	011b      	lsleq	r3, r3, #4
 8005784:	3004      	addeq	r0, #4
 8005786:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800578a:	bf04      	itt	eq
 800578c:	009b      	lsleq	r3, r3, #2
 800578e:	3002      	addeq	r0, #2
 8005790:	2b00      	cmp	r3, #0
 8005792:	db06      	blt.n	80057a2 <__hi0bits+0x3c>
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	d503      	bpl.n	80057a0 <__hi0bits+0x3a>
 8005798:	3001      	adds	r0, #1
 800579a:	4770      	bx	lr
 800579c:	2000      	movs	r0, #0
 800579e:	e7e8      	b.n	8005772 <__hi0bits+0xc>
 80057a0:	2020      	movs	r0, #32
 80057a2:	4770      	bx	lr

080057a4 <__lo0bits>:
 80057a4:	6803      	ldr	r3, [r0, #0]
 80057a6:	f013 0207 	ands.w	r2, r3, #7
 80057aa:	4601      	mov	r1, r0
 80057ac:	d00b      	beq.n	80057c6 <__lo0bits+0x22>
 80057ae:	07da      	lsls	r2, r3, #31
 80057b0:	d423      	bmi.n	80057fa <__lo0bits+0x56>
 80057b2:	0798      	lsls	r0, r3, #30
 80057b4:	bf49      	itett	mi
 80057b6:	085b      	lsrmi	r3, r3, #1
 80057b8:	089b      	lsrpl	r3, r3, #2
 80057ba:	2001      	movmi	r0, #1
 80057bc:	600b      	strmi	r3, [r1, #0]
 80057be:	bf5c      	itt	pl
 80057c0:	600b      	strpl	r3, [r1, #0]
 80057c2:	2002      	movpl	r0, #2
 80057c4:	4770      	bx	lr
 80057c6:	b298      	uxth	r0, r3
 80057c8:	b9a8      	cbnz	r0, 80057f6 <__lo0bits+0x52>
 80057ca:	0c1b      	lsrs	r3, r3, #16
 80057cc:	2010      	movs	r0, #16
 80057ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80057d2:	bf04      	itt	eq
 80057d4:	0a1b      	lsreq	r3, r3, #8
 80057d6:	3008      	addeq	r0, #8
 80057d8:	071a      	lsls	r2, r3, #28
 80057da:	bf04      	itt	eq
 80057dc:	091b      	lsreq	r3, r3, #4
 80057de:	3004      	addeq	r0, #4
 80057e0:	079a      	lsls	r2, r3, #30
 80057e2:	bf04      	itt	eq
 80057e4:	089b      	lsreq	r3, r3, #2
 80057e6:	3002      	addeq	r0, #2
 80057e8:	07da      	lsls	r2, r3, #31
 80057ea:	d402      	bmi.n	80057f2 <__lo0bits+0x4e>
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	d006      	beq.n	80057fe <__lo0bits+0x5a>
 80057f0:	3001      	adds	r0, #1
 80057f2:	600b      	str	r3, [r1, #0]
 80057f4:	4770      	bx	lr
 80057f6:	4610      	mov	r0, r2
 80057f8:	e7e9      	b.n	80057ce <__lo0bits+0x2a>
 80057fa:	2000      	movs	r0, #0
 80057fc:	4770      	bx	lr
 80057fe:	2020      	movs	r0, #32
 8005800:	4770      	bx	lr

08005802 <__i2b>:
 8005802:	b510      	push	{r4, lr}
 8005804:	460c      	mov	r4, r1
 8005806:	2101      	movs	r1, #1
 8005808:	f7ff ff27 	bl	800565a <_Balloc>
 800580c:	2201      	movs	r2, #1
 800580e:	6144      	str	r4, [r0, #20]
 8005810:	6102      	str	r2, [r0, #16]
 8005812:	bd10      	pop	{r4, pc}

08005814 <__multiply>:
 8005814:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	4614      	mov	r4, r2
 800581a:	690a      	ldr	r2, [r1, #16]
 800581c:	6923      	ldr	r3, [r4, #16]
 800581e:	429a      	cmp	r2, r3
 8005820:	bfb8      	it	lt
 8005822:	460b      	movlt	r3, r1
 8005824:	4688      	mov	r8, r1
 8005826:	bfbc      	itt	lt
 8005828:	46a0      	movlt	r8, r4
 800582a:	461c      	movlt	r4, r3
 800582c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005830:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005834:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005838:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800583c:	eb07 0609 	add.w	r6, r7, r9
 8005840:	42b3      	cmp	r3, r6
 8005842:	bfb8      	it	lt
 8005844:	3101      	addlt	r1, #1
 8005846:	f7ff ff08 	bl	800565a <_Balloc>
 800584a:	f100 0514 	add.w	r5, r0, #20
 800584e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005852:	462b      	mov	r3, r5
 8005854:	2200      	movs	r2, #0
 8005856:	4573      	cmp	r3, lr
 8005858:	d316      	bcc.n	8005888 <__multiply+0x74>
 800585a:	f104 0214 	add.w	r2, r4, #20
 800585e:	f108 0114 	add.w	r1, r8, #20
 8005862:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005866:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	9b00      	ldr	r3, [sp, #0]
 800586e:	9201      	str	r2, [sp, #4]
 8005870:	4293      	cmp	r3, r2
 8005872:	d80c      	bhi.n	800588e <__multiply+0x7a>
 8005874:	2e00      	cmp	r6, #0
 8005876:	dd03      	ble.n	8005880 <__multiply+0x6c>
 8005878:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800587c:	2b00      	cmp	r3, #0
 800587e:	d05d      	beq.n	800593c <__multiply+0x128>
 8005880:	6106      	str	r6, [r0, #16]
 8005882:	b003      	add	sp, #12
 8005884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005888:	f843 2b04 	str.w	r2, [r3], #4
 800588c:	e7e3      	b.n	8005856 <__multiply+0x42>
 800588e:	f8b2 b000 	ldrh.w	fp, [r2]
 8005892:	f1bb 0f00 	cmp.w	fp, #0
 8005896:	d023      	beq.n	80058e0 <__multiply+0xcc>
 8005898:	4689      	mov	r9, r1
 800589a:	46ac      	mov	ip, r5
 800589c:	f04f 0800 	mov.w	r8, #0
 80058a0:	f859 4b04 	ldr.w	r4, [r9], #4
 80058a4:	f8dc a000 	ldr.w	sl, [ip]
 80058a8:	b2a3      	uxth	r3, r4
 80058aa:	fa1f fa8a 	uxth.w	sl, sl
 80058ae:	fb0b a303 	mla	r3, fp, r3, sl
 80058b2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80058b6:	f8dc 4000 	ldr.w	r4, [ip]
 80058ba:	4443      	add	r3, r8
 80058bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058c0:	fb0b 840a 	mla	r4, fp, sl, r8
 80058c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80058c8:	46e2      	mov	sl, ip
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80058d0:	454f      	cmp	r7, r9
 80058d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80058d6:	f84a 3b04 	str.w	r3, [sl], #4
 80058da:	d82b      	bhi.n	8005934 <__multiply+0x120>
 80058dc:	f8cc 8004 	str.w	r8, [ip, #4]
 80058e0:	9b01      	ldr	r3, [sp, #4]
 80058e2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80058e6:	3204      	adds	r2, #4
 80058e8:	f1ba 0f00 	cmp.w	sl, #0
 80058ec:	d020      	beq.n	8005930 <__multiply+0x11c>
 80058ee:	682b      	ldr	r3, [r5, #0]
 80058f0:	4689      	mov	r9, r1
 80058f2:	46a8      	mov	r8, r5
 80058f4:	f04f 0b00 	mov.w	fp, #0
 80058f8:	f8b9 c000 	ldrh.w	ip, [r9]
 80058fc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005900:	fb0a 440c 	mla	r4, sl, ip, r4
 8005904:	445c      	add	r4, fp
 8005906:	46c4      	mov	ip, r8
 8005908:	b29b      	uxth	r3, r3
 800590a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800590e:	f84c 3b04 	str.w	r3, [ip], #4
 8005912:	f859 3b04 	ldr.w	r3, [r9], #4
 8005916:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800591a:	0c1b      	lsrs	r3, r3, #16
 800591c:	fb0a b303 	mla	r3, sl, r3, fp
 8005920:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005924:	454f      	cmp	r7, r9
 8005926:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800592a:	d805      	bhi.n	8005938 <__multiply+0x124>
 800592c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005930:	3504      	adds	r5, #4
 8005932:	e79b      	b.n	800586c <__multiply+0x58>
 8005934:	46d4      	mov	ip, sl
 8005936:	e7b3      	b.n	80058a0 <__multiply+0x8c>
 8005938:	46e0      	mov	r8, ip
 800593a:	e7dd      	b.n	80058f8 <__multiply+0xe4>
 800593c:	3e01      	subs	r6, #1
 800593e:	e799      	b.n	8005874 <__multiply+0x60>

08005940 <__pow5mult>:
 8005940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005944:	4615      	mov	r5, r2
 8005946:	f012 0203 	ands.w	r2, r2, #3
 800594a:	4606      	mov	r6, r0
 800594c:	460f      	mov	r7, r1
 800594e:	d007      	beq.n	8005960 <__pow5mult+0x20>
 8005950:	3a01      	subs	r2, #1
 8005952:	4c21      	ldr	r4, [pc, #132]	; (80059d8 <__pow5mult+0x98>)
 8005954:	2300      	movs	r3, #0
 8005956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800595a:	f7ff fec9 	bl	80056f0 <__multadd>
 800595e:	4607      	mov	r7, r0
 8005960:	10ad      	asrs	r5, r5, #2
 8005962:	d035      	beq.n	80059d0 <__pow5mult+0x90>
 8005964:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005966:	b93c      	cbnz	r4, 8005978 <__pow5mult+0x38>
 8005968:	2010      	movs	r0, #16
 800596a:	f7ff fe63 	bl	8005634 <malloc>
 800596e:	6270      	str	r0, [r6, #36]	; 0x24
 8005970:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005974:	6004      	str	r4, [r0, #0]
 8005976:	60c4      	str	r4, [r0, #12]
 8005978:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800597c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005980:	b94c      	cbnz	r4, 8005996 <__pow5mult+0x56>
 8005982:	f240 2171 	movw	r1, #625	; 0x271
 8005986:	4630      	mov	r0, r6
 8005988:	f7ff ff3b 	bl	8005802 <__i2b>
 800598c:	2300      	movs	r3, #0
 800598e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005992:	4604      	mov	r4, r0
 8005994:	6003      	str	r3, [r0, #0]
 8005996:	f04f 0800 	mov.w	r8, #0
 800599a:	07eb      	lsls	r3, r5, #31
 800599c:	d50a      	bpl.n	80059b4 <__pow5mult+0x74>
 800599e:	4639      	mov	r1, r7
 80059a0:	4622      	mov	r2, r4
 80059a2:	4630      	mov	r0, r6
 80059a4:	f7ff ff36 	bl	8005814 <__multiply>
 80059a8:	4639      	mov	r1, r7
 80059aa:	4681      	mov	r9, r0
 80059ac:	4630      	mov	r0, r6
 80059ae:	f7ff fe88 	bl	80056c2 <_Bfree>
 80059b2:	464f      	mov	r7, r9
 80059b4:	106d      	asrs	r5, r5, #1
 80059b6:	d00b      	beq.n	80059d0 <__pow5mult+0x90>
 80059b8:	6820      	ldr	r0, [r4, #0]
 80059ba:	b938      	cbnz	r0, 80059cc <__pow5mult+0x8c>
 80059bc:	4622      	mov	r2, r4
 80059be:	4621      	mov	r1, r4
 80059c0:	4630      	mov	r0, r6
 80059c2:	f7ff ff27 	bl	8005814 <__multiply>
 80059c6:	6020      	str	r0, [r4, #0]
 80059c8:	f8c0 8000 	str.w	r8, [r0]
 80059cc:	4604      	mov	r4, r0
 80059ce:	e7e4      	b.n	800599a <__pow5mult+0x5a>
 80059d0:	4638      	mov	r0, r7
 80059d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059d6:	bf00      	nop
 80059d8:	08005ea0 	.word	0x08005ea0

080059dc <__lshift>:
 80059dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e0:	460c      	mov	r4, r1
 80059e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059e6:	6923      	ldr	r3, [r4, #16]
 80059e8:	6849      	ldr	r1, [r1, #4]
 80059ea:	eb0a 0903 	add.w	r9, sl, r3
 80059ee:	68a3      	ldr	r3, [r4, #8]
 80059f0:	4607      	mov	r7, r0
 80059f2:	4616      	mov	r6, r2
 80059f4:	f109 0501 	add.w	r5, r9, #1
 80059f8:	42ab      	cmp	r3, r5
 80059fa:	db32      	blt.n	8005a62 <__lshift+0x86>
 80059fc:	4638      	mov	r0, r7
 80059fe:	f7ff fe2c 	bl	800565a <_Balloc>
 8005a02:	2300      	movs	r3, #0
 8005a04:	4680      	mov	r8, r0
 8005a06:	f100 0114 	add.w	r1, r0, #20
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	4553      	cmp	r3, sl
 8005a0e:	db2b      	blt.n	8005a68 <__lshift+0x8c>
 8005a10:	6920      	ldr	r0, [r4, #16]
 8005a12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a16:	f104 0314 	add.w	r3, r4, #20
 8005a1a:	f016 021f 	ands.w	r2, r6, #31
 8005a1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a26:	d025      	beq.n	8005a74 <__lshift+0x98>
 8005a28:	f1c2 0e20 	rsb	lr, r2, #32
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	681e      	ldr	r6, [r3, #0]
 8005a30:	468a      	mov	sl, r1
 8005a32:	4096      	lsls	r6, r2
 8005a34:	4330      	orrs	r0, r6
 8005a36:	f84a 0b04 	str.w	r0, [sl], #4
 8005a3a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005a3e:	459c      	cmp	ip, r3
 8005a40:	fa20 f00e 	lsr.w	r0, r0, lr
 8005a44:	d814      	bhi.n	8005a70 <__lshift+0x94>
 8005a46:	6048      	str	r0, [r1, #4]
 8005a48:	b108      	cbz	r0, 8005a4e <__lshift+0x72>
 8005a4a:	f109 0502 	add.w	r5, r9, #2
 8005a4e:	3d01      	subs	r5, #1
 8005a50:	4638      	mov	r0, r7
 8005a52:	f8c8 5010 	str.w	r5, [r8, #16]
 8005a56:	4621      	mov	r1, r4
 8005a58:	f7ff fe33 	bl	80056c2 <_Bfree>
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a62:	3101      	adds	r1, #1
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	e7c7      	b.n	80059f8 <__lshift+0x1c>
 8005a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	e7cd      	b.n	8005a0c <__lshift+0x30>
 8005a70:	4651      	mov	r1, sl
 8005a72:	e7dc      	b.n	8005a2e <__lshift+0x52>
 8005a74:	3904      	subs	r1, #4
 8005a76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a7e:	459c      	cmp	ip, r3
 8005a80:	d8f9      	bhi.n	8005a76 <__lshift+0x9a>
 8005a82:	e7e4      	b.n	8005a4e <__lshift+0x72>

08005a84 <__mcmp>:
 8005a84:	6903      	ldr	r3, [r0, #16]
 8005a86:	690a      	ldr	r2, [r1, #16]
 8005a88:	1a9b      	subs	r3, r3, r2
 8005a8a:	b530      	push	{r4, r5, lr}
 8005a8c:	d10c      	bne.n	8005aa8 <__mcmp+0x24>
 8005a8e:	0092      	lsls	r2, r2, #2
 8005a90:	3014      	adds	r0, #20
 8005a92:	3114      	adds	r1, #20
 8005a94:	1884      	adds	r4, r0, r2
 8005a96:	4411      	add	r1, r2
 8005a98:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a9c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005aa0:	4295      	cmp	r5, r2
 8005aa2:	d003      	beq.n	8005aac <__mcmp+0x28>
 8005aa4:	d305      	bcc.n	8005ab2 <__mcmp+0x2e>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bd30      	pop	{r4, r5, pc}
 8005aac:	42a0      	cmp	r0, r4
 8005aae:	d3f3      	bcc.n	8005a98 <__mcmp+0x14>
 8005ab0:	e7fa      	b.n	8005aa8 <__mcmp+0x24>
 8005ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ab6:	e7f7      	b.n	8005aa8 <__mcmp+0x24>

08005ab8 <__mdiff>:
 8005ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005abc:	460d      	mov	r5, r1
 8005abe:	4607      	mov	r7, r0
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	4614      	mov	r4, r2
 8005ac6:	f7ff ffdd 	bl	8005a84 <__mcmp>
 8005aca:	1e06      	subs	r6, r0, #0
 8005acc:	d108      	bne.n	8005ae0 <__mdiff+0x28>
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	f7ff fdc2 	bl	800565a <_Balloc>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae0:	bfa4      	itt	ge
 8005ae2:	4623      	movge	r3, r4
 8005ae4:	462c      	movge	r4, r5
 8005ae6:	4638      	mov	r0, r7
 8005ae8:	6861      	ldr	r1, [r4, #4]
 8005aea:	bfa6      	itte	ge
 8005aec:	461d      	movge	r5, r3
 8005aee:	2600      	movge	r6, #0
 8005af0:	2601      	movlt	r6, #1
 8005af2:	f7ff fdb2 	bl	800565a <_Balloc>
 8005af6:	692b      	ldr	r3, [r5, #16]
 8005af8:	60c6      	str	r6, [r0, #12]
 8005afa:	6926      	ldr	r6, [r4, #16]
 8005afc:	f105 0914 	add.w	r9, r5, #20
 8005b00:	f104 0214 	add.w	r2, r4, #20
 8005b04:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005b08:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005b0c:	f100 0514 	add.w	r5, r0, #20
 8005b10:	f04f 0e00 	mov.w	lr, #0
 8005b14:	f852 ab04 	ldr.w	sl, [r2], #4
 8005b18:	f859 4b04 	ldr.w	r4, [r9], #4
 8005b1c:	fa1e f18a 	uxtah	r1, lr, sl
 8005b20:	b2a3      	uxth	r3, r4
 8005b22:	1ac9      	subs	r1, r1, r3
 8005b24:	0c23      	lsrs	r3, r4, #16
 8005b26:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005b2a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005b2e:	b289      	uxth	r1, r1
 8005b30:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005b34:	45c8      	cmp	r8, r9
 8005b36:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005b3a:	4694      	mov	ip, r2
 8005b3c:	f845 3b04 	str.w	r3, [r5], #4
 8005b40:	d8e8      	bhi.n	8005b14 <__mdiff+0x5c>
 8005b42:	45bc      	cmp	ip, r7
 8005b44:	d304      	bcc.n	8005b50 <__mdiff+0x98>
 8005b46:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005b4a:	b183      	cbz	r3, 8005b6e <__mdiff+0xb6>
 8005b4c:	6106      	str	r6, [r0, #16]
 8005b4e:	e7c5      	b.n	8005adc <__mdiff+0x24>
 8005b50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005b54:	fa1e f381 	uxtah	r3, lr, r1
 8005b58:	141a      	asrs	r2, r3, #16
 8005b5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b64:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005b68:	f845 3b04 	str.w	r3, [r5], #4
 8005b6c:	e7e9      	b.n	8005b42 <__mdiff+0x8a>
 8005b6e:	3e01      	subs	r6, #1
 8005b70:	e7e9      	b.n	8005b46 <__mdiff+0x8e>

08005b72 <__d2b>:
 8005b72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b76:	460e      	mov	r6, r1
 8005b78:	2101      	movs	r1, #1
 8005b7a:	ec59 8b10 	vmov	r8, r9, d0
 8005b7e:	4615      	mov	r5, r2
 8005b80:	f7ff fd6b 	bl	800565a <_Balloc>
 8005b84:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005b88:	4607      	mov	r7, r0
 8005b8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b8e:	bb34      	cbnz	r4, 8005bde <__d2b+0x6c>
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	f1b8 0300 	subs.w	r3, r8, #0
 8005b96:	d027      	beq.n	8005be8 <__d2b+0x76>
 8005b98:	a802      	add	r0, sp, #8
 8005b9a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005b9e:	f7ff fe01 	bl	80057a4 <__lo0bits>
 8005ba2:	9900      	ldr	r1, [sp, #0]
 8005ba4:	b1f0      	cbz	r0, 8005be4 <__d2b+0x72>
 8005ba6:	9a01      	ldr	r2, [sp, #4]
 8005ba8:	f1c0 0320 	rsb	r3, r0, #32
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	40c2      	lsrs	r2, r0
 8005bb4:	617b      	str	r3, [r7, #20]
 8005bb6:	9201      	str	r2, [sp, #4]
 8005bb8:	9b01      	ldr	r3, [sp, #4]
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	bf14      	ite	ne
 8005bc0:	2102      	movne	r1, #2
 8005bc2:	2101      	moveq	r1, #1
 8005bc4:	6139      	str	r1, [r7, #16]
 8005bc6:	b1c4      	cbz	r4, 8005bfa <__d2b+0x88>
 8005bc8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005bcc:	4404      	add	r4, r0
 8005bce:	6034      	str	r4, [r6, #0]
 8005bd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005bd4:	6028      	str	r0, [r5, #0]
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	b003      	add	sp, #12
 8005bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005be2:	e7d5      	b.n	8005b90 <__d2b+0x1e>
 8005be4:	6179      	str	r1, [r7, #20]
 8005be6:	e7e7      	b.n	8005bb8 <__d2b+0x46>
 8005be8:	a801      	add	r0, sp, #4
 8005bea:	f7ff fddb 	bl	80057a4 <__lo0bits>
 8005bee:	9b01      	ldr	r3, [sp, #4]
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	6139      	str	r1, [r7, #16]
 8005bf6:	3020      	adds	r0, #32
 8005bf8:	e7e5      	b.n	8005bc6 <__d2b+0x54>
 8005bfa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005bfe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c02:	6030      	str	r0, [r6, #0]
 8005c04:	6918      	ldr	r0, [r3, #16]
 8005c06:	f7ff fdae 	bl	8005766 <__hi0bits>
 8005c0a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005c0e:	e7e1      	b.n	8005bd4 <__d2b+0x62>

08005c10 <_calloc_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	fb02 f401 	mul.w	r4, r2, r1
 8005c16:	4621      	mov	r1, r4
 8005c18:	f000 f808 	bl	8005c2c <_malloc_r>
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	b118      	cbz	r0, 8005c28 <_calloc_r+0x18>
 8005c20:	4622      	mov	r2, r4
 8005c22:	2100      	movs	r1, #0
 8005c24:	f7fe fb62 	bl	80042ec <memset>
 8005c28:	4628      	mov	r0, r5
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}

08005c2c <_malloc_r>:
 8005c2c:	b570      	push	{r4, r5, r6, lr}
 8005c2e:	1ccd      	adds	r5, r1, #3
 8005c30:	f025 0503 	bic.w	r5, r5, #3
 8005c34:	3508      	adds	r5, #8
 8005c36:	2d0c      	cmp	r5, #12
 8005c38:	bf38      	it	cc
 8005c3a:	250c      	movcc	r5, #12
 8005c3c:	2d00      	cmp	r5, #0
 8005c3e:	4606      	mov	r6, r0
 8005c40:	db01      	blt.n	8005c46 <_malloc_r+0x1a>
 8005c42:	42a9      	cmp	r1, r5
 8005c44:	d903      	bls.n	8005c4e <_malloc_r+0x22>
 8005c46:	230c      	movs	r3, #12
 8005c48:	6033      	str	r3, [r6, #0]
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	bd70      	pop	{r4, r5, r6, pc}
 8005c4e:	f000 f869 	bl	8005d24 <__malloc_lock>
 8005c52:	4a21      	ldr	r2, [pc, #132]	; (8005cd8 <_malloc_r+0xac>)
 8005c54:	6814      	ldr	r4, [r2, #0]
 8005c56:	4621      	mov	r1, r4
 8005c58:	b991      	cbnz	r1, 8005c80 <_malloc_r+0x54>
 8005c5a:	4c20      	ldr	r4, [pc, #128]	; (8005cdc <_malloc_r+0xb0>)
 8005c5c:	6823      	ldr	r3, [r4, #0]
 8005c5e:	b91b      	cbnz	r3, 8005c68 <_malloc_r+0x3c>
 8005c60:	4630      	mov	r0, r6
 8005c62:	f000 f83d 	bl	8005ce0 <_sbrk_r>
 8005c66:	6020      	str	r0, [r4, #0]
 8005c68:	4629      	mov	r1, r5
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	f000 f838 	bl	8005ce0 <_sbrk_r>
 8005c70:	1c43      	adds	r3, r0, #1
 8005c72:	d124      	bne.n	8005cbe <_malloc_r+0x92>
 8005c74:	230c      	movs	r3, #12
 8005c76:	6033      	str	r3, [r6, #0]
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f000 f854 	bl	8005d26 <__malloc_unlock>
 8005c7e:	e7e4      	b.n	8005c4a <_malloc_r+0x1e>
 8005c80:	680b      	ldr	r3, [r1, #0]
 8005c82:	1b5b      	subs	r3, r3, r5
 8005c84:	d418      	bmi.n	8005cb8 <_malloc_r+0x8c>
 8005c86:	2b0b      	cmp	r3, #11
 8005c88:	d90f      	bls.n	8005caa <_malloc_r+0x7e>
 8005c8a:	600b      	str	r3, [r1, #0]
 8005c8c:	50cd      	str	r5, [r1, r3]
 8005c8e:	18cc      	adds	r4, r1, r3
 8005c90:	4630      	mov	r0, r6
 8005c92:	f000 f848 	bl	8005d26 <__malloc_unlock>
 8005c96:	f104 000b 	add.w	r0, r4, #11
 8005c9a:	1d23      	adds	r3, r4, #4
 8005c9c:	f020 0007 	bic.w	r0, r0, #7
 8005ca0:	1ac3      	subs	r3, r0, r3
 8005ca2:	d0d3      	beq.n	8005c4c <_malloc_r+0x20>
 8005ca4:	425a      	negs	r2, r3
 8005ca6:	50e2      	str	r2, [r4, r3]
 8005ca8:	e7d0      	b.n	8005c4c <_malloc_r+0x20>
 8005caa:	428c      	cmp	r4, r1
 8005cac:	684b      	ldr	r3, [r1, #4]
 8005cae:	bf16      	itet	ne
 8005cb0:	6063      	strne	r3, [r4, #4]
 8005cb2:	6013      	streq	r3, [r2, #0]
 8005cb4:	460c      	movne	r4, r1
 8005cb6:	e7eb      	b.n	8005c90 <_malloc_r+0x64>
 8005cb8:	460c      	mov	r4, r1
 8005cba:	6849      	ldr	r1, [r1, #4]
 8005cbc:	e7cc      	b.n	8005c58 <_malloc_r+0x2c>
 8005cbe:	1cc4      	adds	r4, r0, #3
 8005cc0:	f024 0403 	bic.w	r4, r4, #3
 8005cc4:	42a0      	cmp	r0, r4
 8005cc6:	d005      	beq.n	8005cd4 <_malloc_r+0xa8>
 8005cc8:	1a21      	subs	r1, r4, r0
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f000 f808 	bl	8005ce0 <_sbrk_r>
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	d0cf      	beq.n	8005c74 <_malloc_r+0x48>
 8005cd4:	6025      	str	r5, [r4, #0]
 8005cd6:	e7db      	b.n	8005c90 <_malloc_r+0x64>
 8005cd8:	20000204 	.word	0x20000204
 8005cdc:	20000208 	.word	0x20000208

08005ce0 <_sbrk_r>:
 8005ce0:	b538      	push	{r3, r4, r5, lr}
 8005ce2:	4c06      	ldr	r4, [pc, #24]	; (8005cfc <_sbrk_r+0x1c>)
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	4608      	mov	r0, r1
 8005cea:	6023      	str	r3, [r4, #0]
 8005cec:	f7fe fa68 	bl	80041c0 <_sbrk>
 8005cf0:	1c43      	adds	r3, r0, #1
 8005cf2:	d102      	bne.n	8005cfa <_sbrk_r+0x1a>
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	b103      	cbz	r3, 8005cfa <_sbrk_r+0x1a>
 8005cf8:	602b      	str	r3, [r5, #0]
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	2000026c 	.word	0x2000026c

08005d00 <__ascii_mbtowc>:
 8005d00:	b082      	sub	sp, #8
 8005d02:	b901      	cbnz	r1, 8005d06 <__ascii_mbtowc+0x6>
 8005d04:	a901      	add	r1, sp, #4
 8005d06:	b142      	cbz	r2, 8005d1a <__ascii_mbtowc+0x1a>
 8005d08:	b14b      	cbz	r3, 8005d1e <__ascii_mbtowc+0x1e>
 8005d0a:	7813      	ldrb	r3, [r2, #0]
 8005d0c:	600b      	str	r3, [r1, #0]
 8005d0e:	7812      	ldrb	r2, [r2, #0]
 8005d10:	1c10      	adds	r0, r2, #0
 8005d12:	bf18      	it	ne
 8005d14:	2001      	movne	r0, #1
 8005d16:	b002      	add	sp, #8
 8005d18:	4770      	bx	lr
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	e7fb      	b.n	8005d16 <__ascii_mbtowc+0x16>
 8005d1e:	f06f 0001 	mvn.w	r0, #1
 8005d22:	e7f8      	b.n	8005d16 <__ascii_mbtowc+0x16>

08005d24 <__malloc_lock>:
 8005d24:	4770      	bx	lr

08005d26 <__malloc_unlock>:
 8005d26:	4770      	bx	lr

08005d28 <__ascii_wctomb>:
 8005d28:	b149      	cbz	r1, 8005d3e <__ascii_wctomb+0x16>
 8005d2a:	2aff      	cmp	r2, #255	; 0xff
 8005d2c:	bf85      	ittet	hi
 8005d2e:	238a      	movhi	r3, #138	; 0x8a
 8005d30:	6003      	strhi	r3, [r0, #0]
 8005d32:	700a      	strbls	r2, [r1, #0]
 8005d34:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005d38:	bf98      	it	ls
 8005d3a:	2001      	movls	r0, #1
 8005d3c:	4770      	bx	lr
 8005d3e:	4608      	mov	r0, r1
 8005d40:	4770      	bx	lr
	...

08005d44 <_init>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	bf00      	nop
 8005d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d4a:	bc08      	pop	{r3}
 8005d4c:	469e      	mov	lr, r3
 8005d4e:	4770      	bx	lr

08005d50 <_fini>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	bf00      	nop
 8005d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d56:	bc08      	pop	{r3}
 8005d58:	469e      	mov	lr, r3
 8005d5a:	4770      	bx	lr
