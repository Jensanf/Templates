
I2C_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000471c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080048a8  080048a8  000148a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b00  08004b00  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08004b00  08004b00  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004b00  08004b00  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b04  08004b04  00014b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  200001dc  08004ce4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08004ce4  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c65  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001328  00000000  00000000  00027e71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005f0  00000000  00000000  000291a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000548  00000000  00000000  00029790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019627  00000000  00000000  00029cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005b90  00000000  00000000  000432ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000913ff  00000000  00000000  00048e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da28e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f00  00000000  00000000  000da30c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001dc 	.word	0x200001dc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800488c 	.word	0x0800488c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e0 	.word	0x200001e0
 80001c4:	0800488c 	.word	0x0800488c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x28>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f90d 	bl	8000d30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f002 f840 	bl	8002ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f917 	bl	8000d7e <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b68:	f000 f8ed 	bl	8000d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000008 	.word	0x20000008
 8000b84:	20000004 	.word	0x20000004
 8000b88:	20000000 	.word	0x20000000

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000004 	.word	0x20000004
 8000bb0:	20000208 	.word	0x20000208

08000bb4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000208 	.word	0x20000208

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfe:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	60d3      	str	r3, [r2, #12]
}
 8000c04:	bf00      	nop
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	6039      	str	r1, [r7, #0]
 8000c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db0a      	blt.n	8000c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	490c      	ldr	r1, [pc, #48]	; (8000c7c <__NVIC_SetPriority+0x4c>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	b2d2      	uxtb	r2, r2
 8000c52:	440b      	add	r3, r1
 8000c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c58:	e00a      	b.n	8000c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	4908      	ldr	r1, [pc, #32]	; (8000c80 <__NVIC_SetPriority+0x50>)
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	3b04      	subs	r3, #4
 8000c68:	0112      	lsls	r2, r2, #4
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	761a      	strb	r2, [r3, #24]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000e100 	.word	0xe000e100
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	f1c3 0307 	rsb	r3, r3, #7
 8000c9e:	2b04      	cmp	r3, #4
 8000ca0:	bf28      	it	cs
 8000ca2:	2304      	movcs	r3, #4
 8000ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3304      	adds	r3, #4
 8000caa:	2b06      	cmp	r3, #6
 8000cac:	d902      	bls.n	8000cb4 <NVIC_EncodePriority+0x30>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3b03      	subs	r3, #3
 8000cb2:	e000      	b.n	8000cb6 <NVIC_EncodePriority+0x32>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	401a      	ands	r2, r3
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	43d9      	mvns	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	4313      	orrs	r3, r2
         );
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cfc:	d301      	bcc.n	8000d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e00f      	b.n	8000d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <SysTick_Config+0x40>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d10:	f7ff ff8e 	bl	8000c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <SysTick_Config+0x40>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <SysTick_Config+0x40>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff47 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b086      	sub	sp, #24
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d58:	f7ff ff5c 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	6978      	ldr	r0, [r7, #20]
 8000d64:	f7ff ff8e 	bl	8000c84 <NVIC_EncodePriority>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff5d 	bl	8000c30 <__NVIC_SetPriority>
}
 8000d76:	bf00      	nop
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffb0 	bl	8000cec <SysTick_Config>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b087      	sub	sp, #28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da6:	e154      	b.n	8001052 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 8146 	beq.w	800104c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d003      	beq.n	8000dd0 <HAL_GPIO_Init+0x38>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2b12      	cmp	r3, #18
 8000dce:	d123      	bne.n	8000e18 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	08da      	lsrs	r2, r3, #3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3208      	adds	r2, #8
 8000dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	08da      	lsrs	r2, r3, #3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	3208      	adds	r2, #8
 8000e12:	6939      	ldr	r1, [r7, #16]
 8000e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0203 	and.w	r2, r3, #3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d00b      	beq.n	8000e6c <HAL_GPIO_Init+0xd4>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e60:	2b11      	cmp	r3, #17
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	2b12      	cmp	r3, #18
 8000e6a:	d130      	bne.n	8000ece <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	091b      	lsrs	r3, r3, #4
 8000eb8:	f003 0201 	and.w	r2, r3, #1
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 80a0 	beq.w	800104c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0c:	4b58      	ldr	r3, [pc, #352]	; (8001070 <HAL_GPIO_Init+0x2d8>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a57      	ldr	r2, [pc, #348]	; (8001070 <HAL_GPIO_Init+0x2d8>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b55      	ldr	r3, [pc, #340]	; (8001070 <HAL_GPIO_Init+0x2d8>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f24:	4a53      	ldr	r2, [pc, #332]	; (8001074 <HAL_GPIO_Init+0x2dc>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	220f      	movs	r2, #15
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	43db      	mvns	r3, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f4e:	d019      	beq.n	8000f84 <HAL_GPIO_Init+0x1ec>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a49      	ldr	r2, [pc, #292]	; (8001078 <HAL_GPIO_Init+0x2e0>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d013      	beq.n	8000f80 <HAL_GPIO_Init+0x1e8>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a48      	ldr	r2, [pc, #288]	; (800107c <HAL_GPIO_Init+0x2e4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d00d      	beq.n	8000f7c <HAL_GPIO_Init+0x1e4>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a47      	ldr	r2, [pc, #284]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d007      	beq.n	8000f78 <HAL_GPIO_Init+0x1e0>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a46      	ldr	r2, [pc, #280]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d101      	bne.n	8000f74 <HAL_GPIO_Init+0x1dc>
 8000f70:	2304      	movs	r3, #4
 8000f72:	e008      	b.n	8000f86 <HAL_GPIO_Init+0x1ee>
 8000f74:	2305      	movs	r3, #5
 8000f76:	e006      	b.n	8000f86 <HAL_GPIO_Init+0x1ee>
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e004      	b.n	8000f86 <HAL_GPIO_Init+0x1ee>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x1ee>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_GPIO_Init+0x1ee>
 8000f84:	2300      	movs	r3, #0
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	f002 0203 	and.w	r2, r2, #3
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	4093      	lsls	r3, r2
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f96:	4937      	ldr	r1, [pc, #220]	; (8001074 <HAL_GPIO_Init+0x2dc>)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fa4:	4b38      	ldr	r3, [pc, #224]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fc8:	4a2f      	ldr	r2, [pc, #188]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fce:	4b2e      	ldr	r3, [pc, #184]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ff2:	4a25      	ldr	r2, [pc, #148]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001022:	4b19      	ldr	r3, [pc, #100]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	fa22 f303 	lsr.w	r3, r2, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	f47f aea3 	bne.w	8000da8 <HAL_GPIO_Init+0x10>
  }
}
 8001062:	bf00      	nop
 8001064:	371c      	adds	r7, #28
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000
 8001074:	40010000 	.word	0x40010000
 8001078:	48000400 	.word	0x48000400
 800107c:	48000800 	.word	0x48000800
 8001080:	48000c00 	.word	0x48000c00
 8001084:	48001000 	.word	0x48001000
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001092:	af00      	add	r7, sp, #0
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	f000 bef4 	b.w	8001e8e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a6:	1d3b      	adds	r3, r7, #4
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 816a 	beq.w	800138a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010b6:	4bb3      	ldr	r3, [pc, #716]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d00c      	beq.n	80010dc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010c2:	4bb0      	ldr	r3, [pc, #704]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d159      	bne.n	8001182 <HAL_RCC_OscConfig+0xf6>
 80010ce:	4bad      	ldr	r3, [pc, #692]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010da:	d152      	bne.n	8001182 <HAL_RCC_OscConfig+0xf6>
 80010dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80010f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	fab3 f383 	clz	r3, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b01      	cmp	r3, #1
 8001106:	d102      	bne.n	800110e <HAL_RCC_OscConfig+0x82>
 8001108:	4b9e      	ldr	r3, [pc, #632]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	e015      	b.n	800113a <HAL_RCC_OscConfig+0xae>
 800110e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001112:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001116:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800111a:	fa93 f3a3 	rbit	r3, r3
 800111e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001126:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800112a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001136:	4b93      	ldr	r3, [pc, #588]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800113e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001142:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001146:	fa92 f2a2 	rbit	r2, r2
 800114a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800114e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001152:	fab2 f282 	clz	r2, r2
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	f042 0220 	orr.w	r2, r2, #32
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	f002 021f 	and.w	r2, r2, #31
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f202 	lsl.w	r2, r1, r2
 8001168:	4013      	ands	r3, r2
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 810c 	beq.w	8001388 <HAL_RCC_OscConfig+0x2fc>
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	f040 8106 	bne.w	8001388 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	f000 be86 	b.w	8001e8e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118c:	d106      	bne.n	800119c <HAL_RCC_OscConfig+0x110>
 800118e:	4b7d      	ldr	r3, [pc, #500]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a7c      	ldr	r2, [pc, #496]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e030      	b.n	80011fe <HAL_RCC_OscConfig+0x172>
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x134>
 80011a6:	4b77      	ldr	r3, [pc, #476]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a76      	ldr	r2, [pc, #472]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b74      	ldr	r3, [pc, #464]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a73      	ldr	r2, [pc, #460]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e01e      	b.n	80011fe <HAL_RCC_OscConfig+0x172>
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ca:	d10c      	bne.n	80011e6 <HAL_RCC_OscConfig+0x15a>
 80011cc:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a6c      	ldr	r2, [pc, #432]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a69      	ldr	r2, [pc, #420]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	e00b      	b.n	80011fe <HAL_RCC_OscConfig+0x172>
 80011e6:	4b67      	ldr	r3, [pc, #412]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a66      	ldr	r2, [pc, #408]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b64      	ldr	r3, [pc, #400]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a63      	ldr	r2, [pc, #396]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 80011f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011fe:	4b61      	ldr	r3, [pc, #388]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 8001200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001202:	f023 020f 	bic.w	r2, r3, #15
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	495d      	ldr	r1, [pc, #372]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 800120e:	4313      	orrs	r3, r2
 8001210:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d059      	beq.n	80012d0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121c:	f7ff fcca 	bl	8000bb4 <HAL_GetTick>
 8001220:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001226:	f7ff fcc5 	bl	8000bb4 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2b64      	cmp	r3, #100	; 0x64
 8001234:	d902      	bls.n	800123c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001236:	2303      	movs	r3, #3
 8001238:	f000 be29 	b.w	8001e8e <HAL_RCC_OscConfig+0xe02>
 800123c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001240:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001244:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001248:	fa93 f3a3 	rbit	r3, r3
 800124c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001250:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001254:	fab3 f383 	clz	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d102      	bne.n	800126e <HAL_RCC_OscConfig+0x1e2>
 8001268:	4b46      	ldr	r3, [pc, #280]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	e015      	b.n	800129a <HAL_RCC_OscConfig+0x20e>
 800126e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001272:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001286:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800128a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001296:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800129e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012a6:	fa92 f2a2 	rbit	r2, r2
 80012aa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80012ae:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80012b2:	fab2 f282 	clz	r2, r2
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	f042 0220 	orr.w	r2, r2, #32
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	f002 021f 	and.w	r2, r2, #31
 80012c2:	2101      	movs	r1, #1
 80012c4:	fa01 f202 	lsl.w	r2, r1, r2
 80012c8:	4013      	ands	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0ab      	beq.n	8001226 <HAL_RCC_OscConfig+0x19a>
 80012ce:	e05c      	b.n	800138a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc70 	bl	8000bb4 <HAL_GetTick>
 80012d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012da:	f7ff fc6b 	bl	8000bb4 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d902      	bls.n	80012f0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	f000 bdcf 	b.w	8001e8e <HAL_RCC_OscConfig+0xe02>
 80012f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80012fc:	fa93 f3a3 	rbit	r3, r3
 8001300:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001304:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001308:	fab3 f383 	clz	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b01      	cmp	r3, #1
 800131a:	d102      	bne.n	8001322 <HAL_RCC_OscConfig+0x296>
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	e015      	b.n	800134e <HAL_RCC_OscConfig+0x2c2>
 8001322:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001326:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800133e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_RCC_OscConfig+0x2f8>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001352:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001356:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800135a:	fa92 f2a2 	rbit	r2, r2
 800135e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001362:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001366:	fab2 f282 	clz	r2, r2
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	f042 0220 	orr.w	r2, r2, #32
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	f002 021f 	and.w	r2, r2, #31
 8001376:	2101      	movs	r1, #1
 8001378:	fa01 f202 	lsl.w	r2, r1, r2
 800137c:	4013      	ands	r3, r2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1ab      	bne.n	80012da <HAL_RCC_OscConfig+0x24e>
 8001382:	e002      	b.n	800138a <HAL_RCC_OscConfig+0x2fe>
 8001384:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 816f 	beq.w	8001678 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800139a:	4bd0      	ldr	r3, [pc, #832]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013a6:	4bcd      	ldr	r3, [pc, #820]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d16c      	bne.n	800148c <HAL_RCC_OscConfig+0x400>
 80013b2:	4bca      	ldr	r3, [pc, #808]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d166      	bne.n	800148c <HAL_RCC_OscConfig+0x400>
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013c8:	fa93 f3a3 	rbit	r3, r3
 80013cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80013d0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d4:	fab3 f383 	clz	r3, r3
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	095b      	lsrs	r3, r3, #5
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d102      	bne.n	80013ee <HAL_RCC_OscConfig+0x362>
 80013e8:	4bbc      	ldr	r3, [pc, #752]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	e013      	b.n	8001416 <HAL_RCC_OscConfig+0x38a>
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80013f8:	fa93 f3a3 	rbit	r3, r3
 80013fc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001400:	2302      	movs	r3, #2
 8001402:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001406:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001412:	4bb2      	ldr	r3, [pc, #712]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 8001414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001416:	2202      	movs	r2, #2
 8001418:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800141c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001420:	fa92 f2a2 	rbit	r2, r2
 8001424:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001428:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800142c:	fab2 f282 	clz	r2, r2
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	f042 0220 	orr.w	r2, r2, #32
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	f002 021f 	and.w	r2, r2, #31
 800143c:	2101      	movs	r1, #1
 800143e:	fa01 f202 	lsl.w	r2, r1, r2
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d007      	beq.n	8001458 <HAL_RCC_OscConfig+0x3cc>
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d002      	beq.n	8001458 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	f000 bd1b 	b.w	8001e8e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4ba0      	ldr	r3, [pc, #640]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	21f8      	movs	r1, #248	; 0xf8
 8001468:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001470:	fa91 f1a1 	rbit	r1, r1
 8001474:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001478:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800147c:	fab1 f181 	clz	r1, r1
 8001480:	b2c9      	uxtb	r1, r1
 8001482:	408b      	lsls	r3, r1
 8001484:	4995      	ldr	r1, [pc, #596]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148a:	e0f5      	b.n	8001678 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8085 	beq.w	80015a2 <HAL_RCC_OscConfig+0x516>
 8001498:	2301      	movs	r3, #1
 800149a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80014a2:	fa93 f3a3 	rbit	r3, r3
 80014a6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80014aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ae:	fab3 f383 	clz	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	461a      	mov	r2, r3
 80014c0:	2301      	movs	r3, #1
 80014c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fb76 	bl	8000bb4 <HAL_GetTick>
 80014c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	e00a      	b.n	80014e4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ce:	f7ff fb71 	bl	8000bb4 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d902      	bls.n	80014e4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	f000 bcd5 	b.w	8001e8e <HAL_RCC_OscConfig+0xe02>
 80014e4:	2302      	movs	r3, #2
 80014e6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80014f6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	095b      	lsrs	r3, r3, #5
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d102      	bne.n	8001514 <HAL_RCC_OscConfig+0x488>
 800150e:	4b73      	ldr	r3, [pc, #460]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	e013      	b.n	800153c <HAL_RCC_OscConfig+0x4b0>
 8001514:	2302      	movs	r3, #2
 8001516:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001526:	2302      	movs	r3, #2
 8001528:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800152c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001530:	fa93 f3a3 	rbit	r3, r3
 8001534:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	2202      	movs	r2, #2
 800153e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001542:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001546:	fa92 f2a2 	rbit	r2, r2
 800154a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800154e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001552:	fab2 f282 	clz	r2, r2
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	f042 0220 	orr.w	r2, r2, #32
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	f002 021f 	and.w	r2, r2, #31
 8001562:	2101      	movs	r1, #1
 8001564:	fa01 f202 	lsl.w	r2, r1, r2
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0af      	beq.n	80014ce <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b5b      	ldr	r3, [pc, #364]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	21f8      	movs	r1, #248	; 0xf8
 800157e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001586:	fa91 f1a1 	rbit	r1, r1
 800158a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800158e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001592:	fab1 f181 	clz	r1, r1
 8001596:	b2c9      	uxtb	r1, r1
 8001598:	408b      	lsls	r3, r1
 800159a:	4950      	ldr	r1, [pc, #320]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
 80015a0:	e06a      	b.n	8001678 <HAL_RCC_OscConfig+0x5ec>
 80015a2:	2301      	movs	r3, #1
 80015a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80015b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b8:	fab3 f383 	clz	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	461a      	mov	r2, r3
 80015ca:	2300      	movs	r3, #0
 80015cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff faf1 	bl	8000bb4 <HAL_GetTick>
 80015d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff faec 	bl	8000bb4 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d902      	bls.n	80015ee <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	f000 bc50 	b.w	8001e8e <HAL_RCC_OscConfig+0xe02>
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80015f8:	fa93 f3a3 	rbit	r3, r3
 80015fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	b2db      	uxtb	r3, r3
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b01      	cmp	r3, #1
 8001616:	d102      	bne.n	800161e <HAL_RCC_OscConfig+0x592>
 8001618:	4b30      	ldr	r3, [pc, #192]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e013      	b.n	8001646 <HAL_RCC_OscConfig+0x5ba>
 800161e:	2302      	movs	r3, #2
 8001620:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001630:	2302      	movs	r3, #2
 8001632:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001636:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800163a:	fa93 f3a3 	rbit	r3, r3
 800163e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_RCC_OscConfig+0x650>)
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	2202      	movs	r2, #2
 8001648:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800164c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001650:	fa92 f2a2 	rbit	r2, r2
 8001654:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001658:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800165c:	fab2 f282 	clz	r2, r2
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	f042 0220 	orr.w	r2, r2, #32
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	f002 021f 	and.w	r2, r2, #31
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	4013      	ands	r3, r2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1af      	bne.n	80015d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80da 	beq.w	800183c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d069      	beq.n	8001766 <HAL_RCC_OscConfig+0x6da>
 8001692:	2301      	movs	r3, #1
 8001694:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001698:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800169c:	fa93 f3a3 	rbit	r3, r3
 80016a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80016a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_RCC_OscConfig+0x654>)
 80016b2:	4413      	add	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	461a      	mov	r2, r3
 80016b8:	2301      	movs	r3, #1
 80016ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016bc:	f7ff fa7a 	bl	8000bb4 <HAL_GetTick>
 80016c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c4:	e00e      	b.n	80016e4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c6:	f7ff fa75 	bl	8000bb4 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d906      	bls.n	80016e4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e3d9      	b.n	8001e8e <HAL_RCC_OscConfig+0xe02>
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	10908120 	.word	0x10908120
 80016e4:	2302      	movs	r3, #2
 80016e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80016f6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80016fa:	2202      	movs	r2, #2
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	fa93 f2a3 	rbit	r2, r3
 8001708:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001712:	2202      	movs	r2, #2
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	fa93 f2a3 	rbit	r2, r3
 8001720:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001724:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	4ba5      	ldr	r3, [pc, #660]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 8001728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800172e:	2102      	movs	r1, #2
 8001730:	6019      	str	r1, [r3, #0]
 8001732:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	fa93 f1a3 	rbit	r1, r3
 800173c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001740:	6019      	str	r1, [r3, #0]
  return result;
 8001742:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	fab3 f383 	clz	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 031f 	and.w	r3, r3, #31
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0b0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x63a>
 8001764:	e06a      	b.n	800183c <HAL_RCC_OscConfig+0x7b0>
 8001766:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fa93 f2a3 	rbit	r2, r3
 8001778:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800177c:	601a      	str	r2, [r3, #0]
  return result;
 800177e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001782:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
 800178c:	4b8c      	ldr	r3, [pc, #560]	; (80019c0 <HAL_RCC_OscConfig+0x934>)
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	461a      	mov	r2, r3
 8001794:	2300      	movs	r3, #0
 8001796:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7ff fa0c 	bl	8000bb4 <HAL_GetTick>
 800179c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	e009      	b.n	80017b6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff fa07 	bl	8000bb4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e36b      	b.n	8001e8e <HAL_RCC_OscConfig+0xe02>
 80017b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017ba:	2202      	movs	r2, #2
 80017bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	fa93 f2a3 	rbit	r2, r3
 80017c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017d2:	2202      	movs	r2, #2
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	fa93 f2a3 	rbit	r2, r3
 80017e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017ea:	2202      	movs	r2, #2
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	fa93 f2a3 	rbit	r2, r3
 80017f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fe:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 8001800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001802:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001806:	2102      	movs	r1, #2
 8001808:	6019      	str	r1, [r3, #0]
 800180a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	fa93 f1a3 	rbit	r1, r3
 8001814:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001818:	6019      	str	r1, [r3, #0]
  return result;
 800181a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	fab3 f383 	clz	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1b2      	bne.n	80017a2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8158 	beq.w	8001afc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001852:	4b5a      	ldr	r3, [pc, #360]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d112      	bne.n	8001884 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185e:	4b57      	ldr	r3, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	4a56      	ldr	r2, [pc, #344]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	61d3      	str	r3, [r2, #28]
 800186a:	4b54      	ldr	r3, [pc, #336]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800187e:	2301      	movs	r3, #1
 8001880:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	4b4f      	ldr	r3, [pc, #316]	; (80019c4 <HAL_RCC_OscConfig+0x938>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d11a      	bne.n	80018c6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001890:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <HAL_RCC_OscConfig+0x938>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a4b      	ldr	r2, [pc, #300]	; (80019c4 <HAL_RCC_OscConfig+0x938>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189c:	f7ff f98a 	bl	8000bb4 <HAL_GetTick>
 80018a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a4:	e009      	b.n	80018ba <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a6:	f7ff f985 	bl	8000bb4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e2e9      	b.n	8001e8e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	4b42      	ldr	r3, [pc, #264]	; (80019c4 <HAL_RCC_OscConfig+0x938>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0ef      	beq.n	80018a6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x852>
 80018d0:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a39      	ldr	r2, [pc, #228]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	e02f      	b.n	800193e <HAL_RCC_OscConfig+0x8b2>
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10c      	bne.n	8001902 <HAL_RCC_OscConfig+0x876>
 80018e8:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4a33      	ldr	r2, [pc, #204]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6213      	str	r3, [r2, #32]
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	4a30      	ldr	r2, [pc, #192]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 80018fa:	f023 0304 	bic.w	r3, r3, #4
 80018fe:	6213      	str	r3, [r2, #32]
 8001900:	e01d      	b.n	800193e <HAL_RCC_OscConfig+0x8b2>
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d10c      	bne.n	8001926 <HAL_RCC_OscConfig+0x89a>
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a2a      	ldr	r2, [pc, #168]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4a27      	ldr	r2, [pc, #156]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	e00b      	b.n	800193e <HAL_RCC_OscConfig+0x8b2>
 8001926:	4b25      	ldr	r3, [pc, #148]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a24      	ldr	r2, [pc, #144]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a21      	ldr	r2, [pc, #132]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d06b      	beq.n	8001a20 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7ff f934 	bl	8000bb4 <HAL_GetTick>
 800194c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	e00b      	b.n	800196a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff f92f 	bl	8000bb4 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e291      	b.n	8001e8e <HAL_RCC_OscConfig+0xe02>
 800196a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800196e:	2202      	movs	r2, #2
 8001970:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	fa93 f2a3 	rbit	r2, r3
 800197c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001986:	2202      	movs	r2, #2
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001998:	601a      	str	r2, [r3, #0]
  return result;
 800199a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800199e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f043 0302 	orr.w	r3, r3, #2
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d109      	bne.n	80019c8 <HAL_RCC_OscConfig+0x93c>
 80019b4:	4b01      	ldr	r3, [pc, #4]	; (80019bc <HAL_RCC_OscConfig+0x930>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	e014      	b.n	80019e4 <HAL_RCC_OscConfig+0x958>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	10908120 	.word	0x10908120
 80019c4:	40007000 	.word	0x40007000
 80019c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019cc:	2202      	movs	r2, #2
 80019ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	fa93 f2a3 	rbit	r2, r3
 80019da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	4bbb      	ldr	r3, [pc, #748]	; (8001cd0 <HAL_RCC_OscConfig+0xc44>)
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019e8:	2102      	movs	r1, #2
 80019ea:	6011      	str	r1, [r2, #0]
 80019ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019f0:	6812      	ldr	r2, [r2, #0]
 80019f2:	fa92 f1a2 	rbit	r1, r2
 80019f6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80019fa:	6011      	str	r1, [r2, #0]
  return result;
 80019fc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	fab2 f282 	clz	r2, r2
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	f002 021f 	and.w	r2, r2, #31
 8001a12:	2101      	movs	r1, #1
 8001a14:	fa01 f202 	lsl.w	r2, r1, r2
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d099      	beq.n	8001952 <HAL_RCC_OscConfig+0x8c6>
 8001a1e:	e063      	b.n	8001ae8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff f8c8 	bl	8000bb4 <HAL_GetTick>
 8001a24:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f8c3 	bl	8000bb4 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e225      	b.n	8001e8e <HAL_RCC_OscConfig+0xe02>
 8001a42:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a46:	2202      	movs	r2, #2
 8001a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fa93 f2a3 	rbit	r2, r3
 8001a54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a5e:	2202      	movs	r2, #2
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	fa93 f2a3 	rbit	r2, r3
 8001a6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a70:	601a      	str	r2, [r3, #0]
  return result;
 8001a72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	fab3 f383 	clz	r3, r3
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f043 0302 	orr.w	r3, r3, #2
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d102      	bne.n	8001a92 <HAL_RCC_OscConfig+0xa06>
 8001a8c:	4b90      	ldr	r3, [pc, #576]	; (8001cd0 <HAL_RCC_OscConfig+0xc44>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	e00d      	b.n	8001aae <HAL_RCC_OscConfig+0xa22>
 8001a92:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a96:	2202      	movs	r2, #2
 8001a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fa93 f2a3 	rbit	r2, r3
 8001aa4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_OscConfig+0xc44>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ab2:	2102      	movs	r1, #2
 8001ab4:	6011      	str	r1, [r2, #0]
 8001ab6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	fa92 f1a2 	rbit	r1, r2
 8001ac0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ac4:	6011      	str	r1, [r2, #0]
  return result;
 8001ac6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	fab2 f282 	clz	r2, r2
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	f002 021f 	and.w	r2, r2, #31
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f202 	lsl.w	r2, r1, r2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1a0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ae8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d105      	bne.n	8001afc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af0:	4b77      	ldr	r3, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0xc44>)
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	4a76      	ldr	r2, [pc, #472]	; (8001cd0 <HAL_RCC_OscConfig+0xc44>)
 8001af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 81c2 	beq.w	8001e8c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b08:	4b71      	ldr	r3, [pc, #452]	; (8001cd0 <HAL_RCC_OscConfig+0xc44>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	f000 819c 	beq.w	8001e4e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	f040 8114 	bne.w	8001d4a <HAL_RCC_OscConfig+0xcbe>
 8001b22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b3a:	601a      	str	r2, [r3, #0]
  return result;
 8001b3c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	fab3 f383 	clz	r3, r3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	461a      	mov	r2, r3
 8001b54:	2300      	movs	r3, #0
 8001b56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff f82c 	bl	8000bb4 <HAL_GetTick>
 8001b5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b60:	e009      	b.n	8001b76 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff f827 	bl	8000bb4 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e18b      	b.n	8001e8e <HAL_RCC_OscConfig+0xe02>
 8001b76:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fa93 f2a3 	rbit	r2, r3
 8001b8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b8e:	601a      	str	r2, [r3, #0]
  return result;
 8001b90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b96:	fab3 f383 	clz	r3, r3
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	095b      	lsrs	r3, r3, #5
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d102      	bne.n	8001bb0 <HAL_RCC_OscConfig+0xb24>
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0xc44>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	e01b      	b.n	8001be8 <HAL_RCC_OscConfig+0xb5c>
 8001bb0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	fa93 f2a3 	rbit	r2, r3
 8001bc4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	fa93 f2a3 	rbit	r2, r3
 8001bde:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	4b3a      	ldr	r3, [pc, #232]	; (8001cd0 <HAL_RCC_OscConfig+0xc44>)
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bf0:	6011      	str	r1, [r2, #0]
 8001bf2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	fa92 f1a2 	rbit	r1, r2
 8001bfc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c00:	6011      	str	r1, [r2, #0]
  return result;
 8001c02:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	fab2 f282 	clz	r2, r2
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	f042 0220 	orr.w	r2, r2, #32
 8001c12:	b2d2      	uxtb	r2, r2
 8001c14:	f002 021f 	and.w	r2, r2, #31
 8001c18:	2101      	movs	r1, #1
 8001c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d19e      	bne.n	8001b62 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0xc44>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	4925      	ldr	r1, [pc, #148]	; (8001cd0 <HAL_RCC_OscConfig+0xc44>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]
 8001c40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fa93 f2a3 	rbit	r2, r3
 8001c54:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c58:	601a      	str	r2, [r3, #0]
  return result;
 8001c5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c5e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	461a      	mov	r2, r3
 8001c72:	2301      	movs	r3, #1
 8001c74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7fe ff9d 	bl	8000bb4 <HAL_GetTick>
 8001c7a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7e:	e009      	b.n	8001c94 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c80:	f7fe ff98 	bl	8000bb4 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0fc      	b.n	8001e8e <HAL_RCC_OscConfig+0xe02>
 8001c94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fa93 f2a3 	rbit	r2, r3
 8001ca8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cac:	601a      	str	r2, [r3, #0]
  return result;
 8001cae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cb2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb4:	fab3 f383 	clz	r3, r3
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	095b      	lsrs	r3, r3, #5
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d105      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xc48>
 8001cc8:	4b01      	ldr	r3, [pc, #4]	; (8001cd0 <HAL_RCC_OscConfig+0xc44>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	e01e      	b.n	8001d0c <HAL_RCC_OscConfig+0xc80>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cdc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	fa93 f2a3 	rbit	r2, r3
 8001ce8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	fa93 f2a3 	rbit	r2, r3
 8001d02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <HAL_RCC_OscConfig+0xe0c>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d14:	6011      	str	r1, [r2, #0]
 8001d16:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	fa92 f1a2 	rbit	r1, r2
 8001d20:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d24:	6011      	str	r1, [r2, #0]
  return result;
 8001d26:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	fab2 f282 	clz	r2, r2
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	f002 021f 	and.w	r2, r2, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d09b      	beq.n	8001c80 <HAL_RCC_OscConfig+0xbf4>
 8001d48:	e0a0      	b.n	8001e8c <HAL_RCC_OscConfig+0xe00>
 8001d4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d4e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d62:	601a      	str	r2, [r3, #0]
  return result;
 8001d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d68:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d74:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d80:	f7fe ff18 	bl	8000bb4 <HAL_GetTick>
 8001d84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d88:	e009      	b.n	8001d9e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7fe ff13 	bl	8000bb4 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e077      	b.n	8001e8e <HAL_RCC_OscConfig+0xe02>
 8001d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001da2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	fa93 f2a3 	rbit	r2, r3
 8001db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db6:	601a      	str	r2, [r3, #0]
  return result;
 8001db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	095b      	lsrs	r3, r3, #5
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d102      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xd4c>
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <HAL_RCC_OscConfig+0xe0c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	e01b      	b.n	8001e10 <HAL_RCC_OscConfig+0xd84>
 8001dd8:	f107 0320 	add.w	r3, r7, #32
 8001ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	f107 0320 	add.w	r3, r7, #32
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	fa93 f2a3 	rbit	r2, r3
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	f107 0318 	add.w	r3, r7, #24
 8001df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	f107 0318 	add.w	r3, r7, #24
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	fa93 f2a3 	rbit	r2, r3
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <HAL_RCC_OscConfig+0xe0c>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	f107 0210 	add.w	r2, r7, #16
 8001e14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e18:	6011      	str	r1, [r2, #0]
 8001e1a:	f107 0210 	add.w	r2, r7, #16
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	fa92 f1a2 	rbit	r1, r2
 8001e24:	f107 020c 	add.w	r2, r7, #12
 8001e28:	6011      	str	r1, [r2, #0]
  return result;
 8001e2a:	f107 020c 	add.w	r2, r7, #12
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	fab2 f282 	clz	r2, r2
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	b2d2      	uxtb	r2, r2
 8001e3c:	f002 021f 	and.w	r2, r2, #31
 8001e40:	2101      	movs	r1, #1
 8001e42:	fa01 f202 	lsl.w	r2, r1, r2
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d19e      	bne.n	8001d8a <HAL_RCC_OscConfig+0xcfe>
 8001e4c:	e01e      	b.n	8001e8c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e018      	b.n	8001e8e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_RCC_OscConfig+0xe0c>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e64:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d108      	bne.n	8001e88 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000

08001e9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b09e      	sub	sp, #120	; 0x78
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e162      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b90      	ldr	r3, [pc, #576]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d910      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b8d      	ldr	r3, [pc, #564]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 0207 	bic.w	r2, r3, #7
 8001eca:	498b      	ldr	r1, [pc, #556]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b89      	ldr	r3, [pc, #548]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e14a      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef0:	4b82      	ldr	r3, [pc, #520]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	497f      	ldr	r1, [pc, #508]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80dc 	beq.w	80020c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d13c      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xf6>
 8001f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f1c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	095b      	lsrs	r3, r3, #5
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xa6>
 8001f3c:	4b6f      	ldr	r3, [pc, #444]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	e00f      	b.n	8001f62 <HAL_RCC_ClockConfig+0xc6>
 8001f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f46:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f54:	663b      	str	r3, [r7, #96]	; 0x60
 8001f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f58:	fa93 f3a3 	rbit	r3, r3
 8001f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f66:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f6a:	fa92 f2a2 	rbit	r2, r2
 8001f6e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f72:	fab2 f282 	clz	r2, r2
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	f042 0220 	orr.w	r2, r2, #32
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	f002 021f 	and.w	r2, r2, #31
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f202 	lsl.w	r2, r1, r2
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d17b      	bne.n	8002086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e0f3      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d13c      	bne.n	8002014 <HAL_RCC_ClockConfig+0x178>
 8001f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x128>
 8001fbe:	4b4f      	ldr	r3, [pc, #316]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	e00f      	b.n	8001fe4 <HAL_RCC_ClockConfig+0x148>
 8001fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8001fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8001fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fe0:	4b46      	ldr	r3, [pc, #280]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fec:	fa92 f2a2 	rbit	r2, r2
 8001ff0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ff4:	fab2 f282 	clz	r2, r2
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	f042 0220 	orr.w	r2, r2, #32
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f002 021f 	and.w	r2, r2, #31
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f202 	lsl.w	r2, r1, r2
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d13a      	bne.n	8002086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0b2      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
 8002014:	2302      	movs	r3, #2
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002022:	fab3 f383 	clz	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	095b      	lsrs	r3, r3, #5
 800202a:	b2db      	uxtb	r3, r3
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b01      	cmp	r3, #1
 8002034:	d102      	bne.n	800203c <HAL_RCC_ClockConfig+0x1a0>
 8002036:	4b31      	ldr	r3, [pc, #196]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	e00d      	b.n	8002058 <HAL_RCC_ClockConfig+0x1bc>
 800203c:	2302      	movs	r3, #2
 800203e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
 8002048:	2302      	movs	r3, #2
 800204a:	623b      	str	r3, [r7, #32]
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	fa93 f3a3 	rbit	r3, r3
 8002052:	61fb      	str	r3, [r7, #28]
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2202      	movs	r2, #2
 800205a:	61ba      	str	r2, [r7, #24]
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	fa92 f2a2 	rbit	r2, r2
 8002062:	617a      	str	r2, [r7, #20]
  return result;
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	fab2 f282 	clz	r2, r2
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	f042 0220 	orr.w	r2, r2, #32
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	f002 021f 	and.w	r2, r2, #31
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f202 	lsl.w	r2, r1, r2
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e079      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	491a      	ldr	r1, [pc, #104]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002098:	f7fe fd8c 	bl	8000bb4 <HAL_GetTick>
 800209c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800209e:	e00a      	b.n	80020b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a0:	f7fe fd88 	bl	8000bb4 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e061      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_RCC_ClockConfig+0x260>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 020c 	and.w	r2, r3, #12
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d1eb      	bne.n	80020a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d214      	bcs.n	8002100 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 0207 	bic.w	r2, r3, #7
 80020de:	4906      	ldr	r1, [pc, #24]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <HAL_RCC_ClockConfig+0x25c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d005      	beq.n	8002100 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e040      	b.n	800217a <HAL_RCC_ClockConfig+0x2de>
 80020f8:	40022000 	.word	0x40022000
 80020fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCC_ClockConfig+0x2e8>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	491a      	ldr	r1, [pc, #104]	; (8002184 <HAL_RCC_ClockConfig+0x2e8>)
 800211a:	4313      	orrs	r3, r2
 800211c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	2b00      	cmp	r3, #0
 8002128:	d009      	beq.n	800213e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800212a:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_RCC_ClockConfig+0x2e8>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4912      	ldr	r1, [pc, #72]	; (8002184 <HAL_RCC_ClockConfig+0x2e8>)
 800213a:	4313      	orrs	r3, r2
 800213c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800213e:	f000 f829 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002142:	4601      	mov	r1, r0
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <HAL_RCC_ClockConfig+0x2e8>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800214c:	22f0      	movs	r2, #240	; 0xf0
 800214e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	fa92 f2a2 	rbit	r2, r2
 8002156:	60fa      	str	r2, [r7, #12]
  return result;
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	fab2 f282 	clz	r2, r2
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	40d3      	lsrs	r3, r2
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x2ec>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	fa21 f303 	lsr.w	r3, r1, r3
 800216a:	4a08      	ldr	r2, [pc, #32]	; (800218c <HAL_RCC_ClockConfig+0x2f0>)
 800216c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_RCC_ClockConfig+0x2f4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fcda 	bl	8000b2c <HAL_InitTick>
  
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3778      	adds	r7, #120	; 0x78
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	080048c8 	.word	0x080048c8
 800218c:	20000008 	.word	0x20000008
 8002190:	20000000 	.word	0x20000000

08002194 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	b480      	push	{r7}
 8002196:	b08b      	sub	sp, #44	; 0x2c
 8002198:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d002      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x30>
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d003      	beq.n	80021ca <HAL_RCC_GetSysClockFreq+0x36>
 80021c2:	e03c      	b.n	800223e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021c4:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021c6:	623b      	str	r3, [r7, #32]
      break;
 80021c8:	e03c      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	fa92 f2a2 	rbit	r2, r2
 80021dc:	607a      	str	r2, [r7, #4]
  return result;
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	fab2 f282 	clz	r2, r2
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	40d3      	lsrs	r3, r2
 80021e8:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_RCC_GetSysClockFreq+0xc8>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80021ee:	4b19      	ldr	r3, [pc, #100]	; (8002254 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	220f      	movs	r2, #15
 80021f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	fa92 f2a2 	rbit	r2, r2
 8002200:	60fa      	str	r2, [r7, #12]
  return result;
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	fab2 f282 	clz	r2, r2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	40d3      	lsrs	r3, r2
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <HAL_RCC_GetSysClockFreq+0xcc>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <HAL_RCC_GetSysClockFreq+0xc4>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	fbb2 f2f3 	udiv	r2, r2, r3
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	fb02 f303 	mul.w	r3, r2, r3
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
 800222c:	e004      	b.n	8002238 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	4a0c      	ldr	r2, [pc, #48]	; (8002264 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	623b      	str	r3, [r7, #32]
      break;
 800223c:	e002      	b.n	8002244 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002240:	623b      	str	r3, [r7, #32]
      break;
 8002242:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002244:	6a3b      	ldr	r3, [r7, #32]
}
 8002246:	4618      	mov	r0, r3
 8002248:	372c      	adds	r7, #44	; 0x2c
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	007a1200 	.word	0x007a1200
 800225c:	080048a8 	.word	0x080048a8
 8002260:	080048b8 	.word	0x080048b8
 8002264:	003d0900 	.word	0x003d0900

08002268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e084      	b.n	8002384 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d106      	bne.n	800229a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 fca7 	bl	8002be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022ba:	d902      	bls.n	80022c2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	e002      	b.n	80022c8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80022c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80022d0:	d007      	beq.n	80022e2 <HAL_SPI_Init+0x7a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022da:	d002      	beq.n	80022e2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10b      	bne.n	8002302 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80022f2:	d903      	bls.n	80022fc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
 80022fa:	e002      	b.n	8002302 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	ea42 0103 	orr.w	r1, r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	0c1b      	lsrs	r3, r3, #16
 8002342:	f003 0204 	and.w	r2, r3, #4
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	ea42 0103 	orr.w	r1, r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	430a      	orrs	r2, r1
 8002362:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002372:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800239a:	2301      	movs	r3, #1
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d101      	bne.n	80023b2 <HAL_SPI_TransmitReceive+0x26>
 80023ae:	2302      	movs	r3, #2
 80023b0:	e1fb      	b.n	80027aa <HAL_SPI_TransmitReceive+0x41e>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023ba:	f7fe fbfb 	bl	8000bb4 <HAL_GetTick>
 80023be:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80023c6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80023ce:	887b      	ldrh	r3, [r7, #2]
 80023d0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023d6:	7efb      	ldrb	r3, [r7, #27]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d00e      	beq.n	80023fa <HAL_SPI_TransmitReceive+0x6e>
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023e2:	d106      	bne.n	80023f2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <HAL_SPI_TransmitReceive+0x66>
 80023ec:	7efb      	ldrb	r3, [r7, #27]
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d003      	beq.n	80023fa <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
 80023f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80023f8:	e1cd      	b.n	8002796 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d005      	beq.n	800240c <HAL_SPI_TransmitReceive+0x80>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_SPI_TransmitReceive+0x80>
 8002406:	887b      	ldrh	r3, [r7, #2]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d103      	bne.n	8002414 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002412:	e1c0      	b.n	8002796 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b04      	cmp	r3, #4
 800241e:	d003      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2205      	movs	r2, #5
 8002424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	887a      	ldrh	r2, [r7, #2]
 800244e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	887a      	ldrh	r2, [r7, #2]
 8002454:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800246a:	d802      	bhi.n	8002472 <HAL_SPI_TransmitReceive+0xe6>
 800246c:	8a3b      	ldrh	r3, [r7, #16]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d908      	bls.n	8002484 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	e007      	b.n	8002494 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002492:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d007      	beq.n	80024b2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80024ba:	d97c      	bls.n	80025b6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_SPI_TransmitReceive+0x13e>
 80024c4:	8a7b      	ldrh	r3, [r7, #18]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d169      	bne.n	800259e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	881a      	ldrh	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	1c9a      	adds	r2, r3, #2
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ee:	e056      	b.n	800259e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d11b      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x1aa>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002502:	b29b      	uxth	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d016      	beq.n	8002536 <HAL_SPI_TransmitReceive+0x1aa>
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	2b01      	cmp	r3, #1
 800250c:	d113      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	1c9a      	adds	r2, r3, #2
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d11c      	bne.n	800257e <HAL_SPI_TransmitReceive+0x1f2>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d016      	beq.n	800257e <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	b292      	uxth	r2, r2
 800255c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	1c9a      	adds	r2, r3, #2
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800257a:	2301      	movs	r3, #1
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800257e:	f7fe fb19 	bl	8000bb4 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800258a:	429a      	cmp	r2, r3
 800258c:	d807      	bhi.n	800259e <HAL_SPI_TransmitReceive+0x212>
 800258e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002594:	d003      	beq.n	800259e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800259c:	e0fb      	b.n	8002796 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1a3      	bne.n	80024f0 <HAL_SPI_TransmitReceive+0x164>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d19d      	bne.n	80024f0 <HAL_SPI_TransmitReceive+0x164>
 80025b4:	e0df      	b.n	8002776 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_SPI_TransmitReceive+0x23a>
 80025be:	8a7b      	ldrh	r3, [r7, #18]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	f040 80cb 	bne.w	800275c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d912      	bls.n	80025f6 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	881a      	ldrh	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	1c9a      	adds	r2, r3, #2
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b02      	subs	r3, #2
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025f4:	e0b2      	b.n	800275c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	330c      	adds	r3, #12
 8002600:	7812      	ldrb	r2, [r2, #0]
 8002602:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002612:	b29b      	uxth	r3, r3
 8002614:	3b01      	subs	r3, #1
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800261c:	e09e      	b.n	800275c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b02      	cmp	r3, #2
 800262a:	d134      	bne.n	8002696 <HAL_SPI_TransmitReceive+0x30a>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002630:	b29b      	uxth	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d02f      	beq.n	8002696 <HAL_SPI_TransmitReceive+0x30a>
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	2b01      	cmp	r3, #1
 800263a:	d12c      	bne.n	8002696 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d912      	bls.n	800266c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	881a      	ldrh	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	1c9a      	adds	r2, r3, #2
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b02      	subs	r3, #2
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	87da      	strh	r2, [r3, #62]	; 0x3e
 800266a:	e012      	b.n	8002692 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	7812      	ldrb	r2, [r2, #0]
 8002678:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002688:	b29b      	uxth	r3, r3
 800268a:	3b01      	subs	r3, #1
 800268c:	b29a      	uxth	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d148      	bne.n	8002736 <HAL_SPI_TransmitReceive+0x3aa>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d042      	beq.n	8002736 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d923      	bls.n	8002704 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	b292      	uxth	r2, r2
 80026c8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	1c9a      	adds	r2, r3, #2
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b02      	subs	r3, #2
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d81f      	bhi.n	8002732 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002700:	605a      	str	r2, [r3, #4]
 8002702:	e016      	b.n	8002732 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f103 020c 	add.w	r2, r3, #12
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002726:	b29b      	uxth	r3, r3
 8002728:	3b01      	subs	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002732:	2301      	movs	r3, #1
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002736:	f7fe fa3d 	bl	8000bb4 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002742:	429a      	cmp	r2, r3
 8002744:	d803      	bhi.n	800274e <HAL_SPI_TransmitReceive+0x3c2>
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800274c:	d102      	bne.n	8002754 <HAL_SPI_TransmitReceive+0x3c8>
 800274e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002750:	2b00      	cmp	r3, #0
 8002752:	d103      	bne.n	800275c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800275a:	e01c      	b.n	8002796 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	f47f af5b 	bne.w	800261e <HAL_SPI_TransmitReceive+0x292>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	f47f af54 	bne.w	800261e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f8f0 	bl	8002960 <SPI_EndRxTxTransaction>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2220      	movs	r2, #32
 8002790:	661a      	str	r2, [r3, #96]	; 0x60
 8002792:	e000      	b.n	8002796 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002794:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80027a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3728      	adds	r7, #40	; 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027c2:	e04c      	b.n	800285e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ca:	d048      	beq.n	800285e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80027cc:	f7fe f9f2 	bl	8000bb4 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d902      	bls.n	80027e2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d13d      	bne.n	800285e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027fa:	d111      	bne.n	8002820 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002804:	d004      	beq.n	8002810 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280e:	d107      	bne.n	8002820 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800281e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002828:	d10f      	bne.n	800284a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002848:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e00f      	b.n	800287e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4013      	ands	r3, r2
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	429a      	cmp	r2, r3
 800286c:	bf0c      	ite	eq
 800286e:	2301      	moveq	r3, #1
 8002870:	2300      	movne	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	429a      	cmp	r2, r3
 800287a:	d1a3      	bne.n	80027c4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8002894:	e057      	b.n	8002946 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800289c:	d106      	bne.n	80028ac <SPI_WaitFifoStateUntilTimeout+0x26>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d103      	bne.n	80028ac <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028b2:	d048      	beq.n	8002946 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028b4:	f7fe f97e 	bl	8000bb4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d902      	bls.n	80028ca <SPI_WaitFifoStateUntilTimeout+0x44>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d13d      	bne.n	8002946 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e2:	d111      	bne.n	8002908 <SPI_WaitFifoStateUntilTimeout+0x82>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ec:	d004      	beq.n	80028f8 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d107      	bne.n	8002908 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002910:	d10f      	bne.n	8002932 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002930:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e008      	b.n	8002958 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	429a      	cmp	r2, r3
 8002954:	d19f      	bne.n	8002896 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2200      	movs	r2, #0
 8002974:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff ff84 	bl	8002886 <SPI_WaitFifoStateUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d007      	beq.n	8002994 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e027      	b.n	80029e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2200      	movs	r2, #0
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff ff07 	bl	80027b2 <SPI_WaitFlagStateUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d007      	beq.n	80029ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e014      	b.n	80029e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff ff5d 	bl	8002886 <SPI_WaitFifoStateUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d007      	beq.n	80029e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d6:	f043 0220 	orr.w	r2, r3, #32
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e000      	b.n	80029e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint16_t i = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029f6:	f7fe f883 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029fa:	f000 f81d 	bl	8002a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029fe:	f000 f897 	bl	8002b30 <MX_GPIO_Init>
  MX_SPI3_Init();
 8002a02:	f000 f85d 	bl	8002ac0 <MX_SPI3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(i<1) i=9999;
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d102      	bne.n	8002a12 <main+0x26>
 8002a0c:	f242 730f 	movw	r3, #9999	; 0x270f
 8002a10:	80fb      	strh	r3, [r7, #6]
	    HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &i, (uint8_t *)RxBuf, 1, 5000);
 8002a12:	1db9      	adds	r1, r7, #6
 8002a14:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	4a04      	ldr	r2, [pc, #16]	; (8002a30 <main+0x44>)
 8002a1e:	4805      	ldr	r0, [pc, #20]	; (8002a34 <main+0x48>)
 8002a20:	f7ff fcb4 	bl	800238c <HAL_SPI_TransmitReceive>
	    i--;
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	80fb      	strh	r3, [r7, #6]
	    if(i<1) i=9999;
 8002a2c:	e7eb      	b.n	8002a06 <main+0x1a>
 8002a2e:	bf00      	nop
 8002a30:	200001f8 	.word	0x200001f8
 8002a34:	2000020c 	.word	0x2000020c

08002a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b090      	sub	sp, #64	; 0x40
 8002a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a3e:	f107 0318 	add.w	r3, r7, #24
 8002a42:	2228      	movs	r2, #40	; 0x28
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f9f4 	bl	8002e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
 8002a52:	605a      	str	r2, [r3, #4]
 8002a54:	609a      	str	r2, [r3, #8]
 8002a56:	60da      	str	r2, [r3, #12]
 8002a58:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8002a76:	2300      	movs	r3, #0
 8002a78:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7a:	f107 0318 	add.w	r3, r7, #24
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fb04 	bl	800108c <HAL_RCC_OscConfig>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <SystemClock_Config+0x56>
  {
    Error_Handler();
 8002a8a:	f000 f881 	bl	8002b90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a8e:	230f      	movs	r3, #15
 8002a90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a92:	2302      	movs	r3, #2
 8002a94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff f9f8 	bl	8001e9c <HAL_RCC_ClockConfig>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d001      	beq.n	8002ab6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8002ab2:	f000 f86d 	bl	8002b90 <Error_Handler>
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	3740      	adds	r7, #64	; 0x40
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002ac6:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <MX_SPI3_Init+0x6c>)
 8002ac8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002ad8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002adc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ae4:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8002aea:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002b04:	2207      	movs	r2, #7
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b08:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b14:	4804      	ldr	r0, [pc, #16]	; (8002b28 <MX_SPI3_Init+0x68>)
 8002b16:	f7ff fba7 	bl	8002268 <HAL_SPI_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8002b20:	f000 f836 	bl	8002b90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	2000020c 	.word	0x2000020c
 8002b2c:	40003c00 	.word	0x40003c00

08002b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <MX_GPIO_Init+0x5c>)
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <MX_GPIO_Init+0x5c>)
 8002b3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b40:	6153      	str	r3, [r2, #20]
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <MX_GPIO_Init+0x5c>)
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4e:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <MX_GPIO_Init+0x5c>)
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	4a0e      	ldr	r2, [pc, #56]	; (8002b8c <MX_GPIO_Init+0x5c>)
 8002b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b58:	6153      	str	r3, [r2, #20]
 8002b5a:	4b0c      	ldr	r3, [pc, #48]	; (8002b8c <MX_GPIO_Init+0x5c>)
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <MX_GPIO_Init+0x5c>)
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <MX_GPIO_Init+0x5c>)
 8002b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b70:	6153      	str	r3, [r2, #20]
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <MX_GPIO_Init+0x5c>)
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7a:	607b      	str	r3, [r7, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]

}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40021000 	.word	0x40021000

08002b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_MspInit+0x44>)
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <HAL_MspInit+0x44>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6193      	str	r3, [r2, #24]
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <HAL_MspInit+0x44>)
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_MspInit+0x44>)
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_MspInit+0x44>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	61d3      	str	r3, [r2, #28]
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_MspInit+0x44>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000

08002be8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <HAL_SPI_MspInit+0xb8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d146      	bne.n	8002c98 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <HAL_SPI_MspInit+0xbc>)
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4a25      	ldr	r2, [pc, #148]	; (8002ca4 <HAL_SPI_MspInit+0xbc>)
 8002c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c14:	61d3      	str	r3, [r2, #28]
 8002c16:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_SPI_MspInit+0xbc>)
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c22:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_SPI_MspInit+0xbc>)
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	4a1f      	ldr	r2, [pc, #124]	; (8002ca4 <HAL_SPI_MspInit+0xbc>)
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c2c:	6153      	str	r3, [r2, #20]
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <HAL_SPI_MspInit+0xbc>)
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_SPI_MspInit+0xbc>)
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <HAL_SPI_MspInit+0xbc>)
 8002c40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002c44:	6153      	str	r3, [r2, #20]
 8002c46:	4b17      	ldr	r3, [pc, #92]	; (8002ca4 <HAL_SPI_MspInit+0xbc>)
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c58:	2302      	movs	r3, #2
 8002c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c60:	2303      	movs	r3, #3
 8002c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c64:	2306      	movs	r3, #6
 8002c66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c68:	f107 0314 	add.w	r3, r7, #20
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c72:	f7fe f891 	bl	8000d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002c76:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c84:	2303      	movs	r3, #3
 8002c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c88:	2306      	movs	r3, #6
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	4619      	mov	r1, r3
 8002c92:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <HAL_SPI_MspInit+0xc0>)
 8002c94:	f7fe f880 	bl	8000d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c98:	bf00      	nop
 8002c9a:	3728      	adds	r7, #40	; 0x28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40003c00 	.word	0x40003c00
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	48000800 	.word	0x48000800

08002cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cbe:	e7fe      	b.n	8002cbe <HardFault_Handler+0x4>

08002cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cc4:	e7fe      	b.n	8002cc4 <MemManage_Handler+0x4>

08002cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cca:	e7fe      	b.n	8002cca <BusFault_Handler+0x4>

08002ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd0:	e7fe      	b.n	8002cd0 <UsageFault_Handler+0x4>

08002cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d00:	f7fd ff44 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <_sbrk+0x50>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x16>
		heap_end = &end;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <_sbrk+0x50>)
 8002d1a:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <_sbrk+0x54>)
 8002d1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <_sbrk+0x50>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <_sbrk+0x50>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	466a      	mov	r2, sp
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d907      	bls.n	8002d42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002d32:	f000 f855 	bl	8002de0 <__errno>
 8002d36:	4602      	mov	r2, r0
 8002d38:	230c      	movs	r3, #12
 8002d3a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d40:	e006      	b.n	8002d50 <_sbrk+0x48>
	}

	heap_end += incr;
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <_sbrk+0x50>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a03      	ldr	r2, [pc, #12]	; (8002d58 <_sbrk+0x50>)
 8002d4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	200001fc 	.word	0x200001fc
 8002d5c:	20000278 	.word	0x20000278

08002d60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <SystemInit+0x28>)
 8002d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6a:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <SystemInit+0x28>)
 8002d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d74:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <SystemInit+0x28>)
 8002d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d7a:	609a      	str	r2, [r3, #8]
#endif
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dc4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002d90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002d92:	e003      	b.n	8002d9c <LoopCopyDataInit>

08002d94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002d96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002d98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002d9a:	3104      	adds	r1, #4

08002d9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002d9c:	480b      	ldr	r0, [pc, #44]	; (8002dcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002d9e:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002da0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002da2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002da4:	d3f6      	bcc.n	8002d94 <CopyDataInit>
	ldr	r2, =_sbss
 8002da6:	4a0b      	ldr	r2, [pc, #44]	; (8002dd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002da8:	e002      	b.n	8002db0 <LoopFillZerobss>

08002daa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002daa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002dac:	f842 3b04 	str.w	r3, [r2], #4

08002db0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002db0:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <LoopForever+0x16>)
	cmp	r2, r3
 8002db2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002db4:	d3f9      	bcc.n	8002daa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002db6:	f7ff ffd3 	bl	8002d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dba:	f000 f817 	bl	8002dec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dbe:	f7ff fe15 	bl	80029ec <main>

08002dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8002dc2:	e7fe      	b.n	8002dc2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002dc4:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8002dc8:	08004b08 	.word	0x08004b08
	ldr	r0, =_sdata
 8002dcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002dd0:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002dd4:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002dd8:	20000274 	.word	0x20000274

08002ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ddc:	e7fe      	b.n	8002ddc <ADC1_2_IRQHandler>
	...

08002de0 <__errno>:
 8002de0:	4b01      	ldr	r3, [pc, #4]	; (8002de8 <__errno+0x8>)
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	2000000c 	.word	0x2000000c

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	4e0d      	ldr	r6, [pc, #52]	; (8002e24 <__libc_init_array+0x38>)
 8002df0:	4c0d      	ldr	r4, [pc, #52]	; (8002e28 <__libc_init_array+0x3c>)
 8002df2:	1ba4      	subs	r4, r4, r6
 8002df4:	10a4      	asrs	r4, r4, #2
 8002df6:	2500      	movs	r5, #0
 8002df8:	42a5      	cmp	r5, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	4e0b      	ldr	r6, [pc, #44]	; (8002e2c <__libc_init_array+0x40>)
 8002dfe:	4c0c      	ldr	r4, [pc, #48]	; (8002e30 <__libc_init_array+0x44>)
 8002e00:	f001 fd44 	bl	800488c <_init>
 8002e04:	1ba4      	subs	r4, r4, r6
 8002e06:	10a4      	asrs	r4, r4, #2
 8002e08:	2500      	movs	r5, #0
 8002e0a:	42a5      	cmp	r5, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e14:	4798      	blx	r3
 8002e16:	3501      	adds	r5, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e1e:	4798      	blx	r3
 8002e20:	3501      	adds	r5, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08004b00 	.word	0x08004b00
 8002e28:	08004b00 	.word	0x08004b00
 8002e2c:	08004b00 	.word	0x08004b00
 8002e30:	08004b04 	.word	0x08004b04

08002e34 <memset>:
 8002e34:	4402      	add	r2, r0
 8002e36:	4603      	mov	r3, r0
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <memset+0xa>
 8002e3c:	4770      	bx	lr
 8002e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e42:	e7f9      	b.n	8002e38 <memset+0x4>

08002e44 <__cvt>:
 8002e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e48:	ec55 4b10 	vmov	r4, r5, d0
 8002e4c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002e4e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002e52:	2d00      	cmp	r5, #0
 8002e54:	460e      	mov	r6, r1
 8002e56:	4691      	mov	r9, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	bfb8      	it	lt
 8002e5c:	4622      	movlt	r2, r4
 8002e5e:	462b      	mov	r3, r5
 8002e60:	f027 0720 	bic.w	r7, r7, #32
 8002e64:	bfbb      	ittet	lt
 8002e66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002e6a:	461d      	movlt	r5, r3
 8002e6c:	2300      	movge	r3, #0
 8002e6e:	232d      	movlt	r3, #45	; 0x2d
 8002e70:	bfb8      	it	lt
 8002e72:	4614      	movlt	r4, r2
 8002e74:	2f46      	cmp	r7, #70	; 0x46
 8002e76:	700b      	strb	r3, [r1, #0]
 8002e78:	d004      	beq.n	8002e84 <__cvt+0x40>
 8002e7a:	2f45      	cmp	r7, #69	; 0x45
 8002e7c:	d100      	bne.n	8002e80 <__cvt+0x3c>
 8002e7e:	3601      	adds	r6, #1
 8002e80:	2102      	movs	r1, #2
 8002e82:	e000      	b.n	8002e86 <__cvt+0x42>
 8002e84:	2103      	movs	r1, #3
 8002e86:	ab03      	add	r3, sp, #12
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	ab02      	add	r3, sp, #8
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	4632      	mov	r2, r6
 8002e90:	4653      	mov	r3, sl
 8002e92:	ec45 4b10 	vmov	d0, r4, r5
 8002e96:	f000 fbab 	bl	80035f0 <_dtoa_r>
 8002e9a:	2f47      	cmp	r7, #71	; 0x47
 8002e9c:	4680      	mov	r8, r0
 8002e9e:	d102      	bne.n	8002ea6 <__cvt+0x62>
 8002ea0:	f019 0f01 	tst.w	r9, #1
 8002ea4:	d026      	beq.n	8002ef4 <__cvt+0xb0>
 8002ea6:	2f46      	cmp	r7, #70	; 0x46
 8002ea8:	eb08 0906 	add.w	r9, r8, r6
 8002eac:	d111      	bne.n	8002ed2 <__cvt+0x8e>
 8002eae:	f898 3000 	ldrb.w	r3, [r8]
 8002eb2:	2b30      	cmp	r3, #48	; 0x30
 8002eb4:	d10a      	bne.n	8002ecc <__cvt+0x88>
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2300      	movs	r3, #0
 8002eba:	4620      	mov	r0, r4
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	f7fd fdaf 	bl	8000a20 <__aeabi_dcmpeq>
 8002ec2:	b918      	cbnz	r0, 8002ecc <__cvt+0x88>
 8002ec4:	f1c6 0601 	rsb	r6, r6, #1
 8002ec8:	f8ca 6000 	str.w	r6, [sl]
 8002ecc:	f8da 3000 	ldr.w	r3, [sl]
 8002ed0:	4499      	add	r9, r3
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	4629      	mov	r1, r5
 8002eda:	f7fd fda1 	bl	8000a20 <__aeabi_dcmpeq>
 8002ede:	b938      	cbnz	r0, 8002ef0 <__cvt+0xac>
 8002ee0:	2230      	movs	r2, #48	; 0x30
 8002ee2:	9b03      	ldr	r3, [sp, #12]
 8002ee4:	454b      	cmp	r3, r9
 8002ee6:	d205      	bcs.n	8002ef4 <__cvt+0xb0>
 8002ee8:	1c59      	adds	r1, r3, #1
 8002eea:	9103      	str	r1, [sp, #12]
 8002eec:	701a      	strb	r2, [r3, #0]
 8002eee:	e7f8      	b.n	8002ee2 <__cvt+0x9e>
 8002ef0:	f8cd 900c 	str.w	r9, [sp, #12]
 8002ef4:	9b03      	ldr	r3, [sp, #12]
 8002ef6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ef8:	eba3 0308 	sub.w	r3, r3, r8
 8002efc:	4640      	mov	r0, r8
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	b004      	add	sp, #16
 8002f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002f06 <__exponent>:
 8002f06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f08:	2900      	cmp	r1, #0
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	bfba      	itte	lt
 8002f0e:	4249      	neglt	r1, r1
 8002f10:	232d      	movlt	r3, #45	; 0x2d
 8002f12:	232b      	movge	r3, #43	; 0x2b
 8002f14:	2909      	cmp	r1, #9
 8002f16:	f804 2b02 	strb.w	r2, [r4], #2
 8002f1a:	7043      	strb	r3, [r0, #1]
 8002f1c:	dd20      	ble.n	8002f60 <__exponent+0x5a>
 8002f1e:	f10d 0307 	add.w	r3, sp, #7
 8002f22:	461f      	mov	r7, r3
 8002f24:	260a      	movs	r6, #10
 8002f26:	fb91 f5f6 	sdiv	r5, r1, r6
 8002f2a:	fb06 1115 	mls	r1, r6, r5, r1
 8002f2e:	3130      	adds	r1, #48	; 0x30
 8002f30:	2d09      	cmp	r5, #9
 8002f32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002f36:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	dc09      	bgt.n	8002f52 <__exponent+0x4c>
 8002f3e:	3130      	adds	r1, #48	; 0x30
 8002f40:	3b02      	subs	r3, #2
 8002f42:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002f46:	42bb      	cmp	r3, r7
 8002f48:	4622      	mov	r2, r4
 8002f4a:	d304      	bcc.n	8002f56 <__exponent+0x50>
 8002f4c:	1a10      	subs	r0, r2, r0
 8002f4e:	b003      	add	sp, #12
 8002f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f52:	4613      	mov	r3, r2
 8002f54:	e7e7      	b.n	8002f26 <__exponent+0x20>
 8002f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f5a:	f804 2b01 	strb.w	r2, [r4], #1
 8002f5e:	e7f2      	b.n	8002f46 <__exponent+0x40>
 8002f60:	2330      	movs	r3, #48	; 0x30
 8002f62:	4419      	add	r1, r3
 8002f64:	7083      	strb	r3, [r0, #2]
 8002f66:	1d02      	adds	r2, r0, #4
 8002f68:	70c1      	strb	r1, [r0, #3]
 8002f6a:	e7ef      	b.n	8002f4c <__exponent+0x46>

08002f6c <_printf_float>:
 8002f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f70:	b08d      	sub	sp, #52	; 0x34
 8002f72:	460c      	mov	r4, r1
 8002f74:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002f78:	4616      	mov	r6, r2
 8002f7a:	461f      	mov	r7, r3
 8002f7c:	4605      	mov	r5, r0
 8002f7e:	f001 f8ef 	bl	8004160 <_localeconv_r>
 8002f82:	6803      	ldr	r3, [r0, #0]
 8002f84:	9304      	str	r3, [sp, #16]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd f91e 	bl	80001c8 <strlen>
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	930a      	str	r3, [sp, #40]	; 0x28
 8002f90:	f8d8 3000 	ldr.w	r3, [r8]
 8002f94:	9005      	str	r0, [sp, #20]
 8002f96:	3307      	adds	r3, #7
 8002f98:	f023 0307 	bic.w	r3, r3, #7
 8002f9c:	f103 0208 	add.w	r2, r3, #8
 8002fa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002fa4:	f8d4 b000 	ldr.w	fp, [r4]
 8002fa8:	f8c8 2000 	str.w	r2, [r8]
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002fb4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002fb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002fbc:	9307      	str	r3, [sp, #28]
 8002fbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8002fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fc6:	4ba7      	ldr	r3, [pc, #668]	; (8003264 <_printf_float+0x2f8>)
 8002fc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002fcc:	f7fd fd5a 	bl	8000a84 <__aeabi_dcmpun>
 8002fd0:	bb70      	cbnz	r0, 8003030 <_printf_float+0xc4>
 8002fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fd6:	4ba3      	ldr	r3, [pc, #652]	; (8003264 <_printf_float+0x2f8>)
 8002fd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002fdc:	f7fd fd34 	bl	8000a48 <__aeabi_dcmple>
 8002fe0:	bb30      	cbnz	r0, 8003030 <_printf_float+0xc4>
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	4640      	mov	r0, r8
 8002fe8:	4649      	mov	r1, r9
 8002fea:	f7fd fd23 	bl	8000a34 <__aeabi_dcmplt>
 8002fee:	b110      	cbz	r0, 8002ff6 <_printf_float+0x8a>
 8002ff0:	232d      	movs	r3, #45	; 0x2d
 8002ff2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ff6:	4a9c      	ldr	r2, [pc, #624]	; (8003268 <_printf_float+0x2fc>)
 8002ff8:	4b9c      	ldr	r3, [pc, #624]	; (800326c <_printf_float+0x300>)
 8002ffa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002ffe:	bf8c      	ite	hi
 8003000:	4690      	movhi	r8, r2
 8003002:	4698      	movls	r8, r3
 8003004:	2303      	movs	r3, #3
 8003006:	f02b 0204 	bic.w	r2, fp, #4
 800300a:	6123      	str	r3, [r4, #16]
 800300c:	6022      	str	r2, [r4, #0]
 800300e:	f04f 0900 	mov.w	r9, #0
 8003012:	9700      	str	r7, [sp, #0]
 8003014:	4633      	mov	r3, r6
 8003016:	aa0b      	add	r2, sp, #44	; 0x2c
 8003018:	4621      	mov	r1, r4
 800301a:	4628      	mov	r0, r5
 800301c:	f000 f9e6 	bl	80033ec <_printf_common>
 8003020:	3001      	adds	r0, #1
 8003022:	f040 808d 	bne.w	8003140 <_printf_float+0x1d4>
 8003026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800302a:	b00d      	add	sp, #52	; 0x34
 800302c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003030:	4642      	mov	r2, r8
 8003032:	464b      	mov	r3, r9
 8003034:	4640      	mov	r0, r8
 8003036:	4649      	mov	r1, r9
 8003038:	f7fd fd24 	bl	8000a84 <__aeabi_dcmpun>
 800303c:	b110      	cbz	r0, 8003044 <_printf_float+0xd8>
 800303e:	4a8c      	ldr	r2, [pc, #560]	; (8003270 <_printf_float+0x304>)
 8003040:	4b8c      	ldr	r3, [pc, #560]	; (8003274 <_printf_float+0x308>)
 8003042:	e7da      	b.n	8002ffa <_printf_float+0x8e>
 8003044:	6861      	ldr	r1, [r4, #4]
 8003046:	1c4b      	adds	r3, r1, #1
 8003048:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800304c:	a80a      	add	r0, sp, #40	; 0x28
 800304e:	d13e      	bne.n	80030ce <_printf_float+0x162>
 8003050:	2306      	movs	r3, #6
 8003052:	6063      	str	r3, [r4, #4]
 8003054:	2300      	movs	r3, #0
 8003056:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800305a:	ab09      	add	r3, sp, #36	; 0x24
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	ec49 8b10 	vmov	d0, r8, r9
 8003062:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003066:	6022      	str	r2, [r4, #0]
 8003068:	f8cd a004 	str.w	sl, [sp, #4]
 800306c:	6861      	ldr	r1, [r4, #4]
 800306e:	4628      	mov	r0, r5
 8003070:	f7ff fee8 	bl	8002e44 <__cvt>
 8003074:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003078:	2b47      	cmp	r3, #71	; 0x47
 800307a:	4680      	mov	r8, r0
 800307c:	d109      	bne.n	8003092 <_printf_float+0x126>
 800307e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003080:	1cd8      	adds	r0, r3, #3
 8003082:	db02      	blt.n	800308a <_printf_float+0x11e>
 8003084:	6862      	ldr	r2, [r4, #4]
 8003086:	4293      	cmp	r3, r2
 8003088:	dd47      	ble.n	800311a <_printf_float+0x1ae>
 800308a:	f1aa 0a02 	sub.w	sl, sl, #2
 800308e:	fa5f fa8a 	uxtb.w	sl, sl
 8003092:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003096:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003098:	d824      	bhi.n	80030e4 <_printf_float+0x178>
 800309a:	3901      	subs	r1, #1
 800309c:	4652      	mov	r2, sl
 800309e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80030a2:	9109      	str	r1, [sp, #36]	; 0x24
 80030a4:	f7ff ff2f 	bl	8002f06 <__exponent>
 80030a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030aa:	1813      	adds	r3, r2, r0
 80030ac:	2a01      	cmp	r2, #1
 80030ae:	4681      	mov	r9, r0
 80030b0:	6123      	str	r3, [r4, #16]
 80030b2:	dc02      	bgt.n	80030ba <_printf_float+0x14e>
 80030b4:	6822      	ldr	r2, [r4, #0]
 80030b6:	07d1      	lsls	r1, r2, #31
 80030b8:	d501      	bpl.n	80030be <_printf_float+0x152>
 80030ba:	3301      	adds	r3, #1
 80030bc:	6123      	str	r3, [r4, #16]
 80030be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0a5      	beq.n	8003012 <_printf_float+0xa6>
 80030c6:	232d      	movs	r3, #45	; 0x2d
 80030c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030cc:	e7a1      	b.n	8003012 <_printf_float+0xa6>
 80030ce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80030d2:	f000 8177 	beq.w	80033c4 <_printf_float+0x458>
 80030d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80030da:	d1bb      	bne.n	8003054 <_printf_float+0xe8>
 80030dc:	2900      	cmp	r1, #0
 80030de:	d1b9      	bne.n	8003054 <_printf_float+0xe8>
 80030e0:	2301      	movs	r3, #1
 80030e2:	e7b6      	b.n	8003052 <_printf_float+0xe6>
 80030e4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80030e8:	d119      	bne.n	800311e <_printf_float+0x1b2>
 80030ea:	2900      	cmp	r1, #0
 80030ec:	6863      	ldr	r3, [r4, #4]
 80030ee:	dd0c      	ble.n	800310a <_printf_float+0x19e>
 80030f0:	6121      	str	r1, [r4, #16]
 80030f2:	b913      	cbnz	r3, 80030fa <_printf_float+0x18e>
 80030f4:	6822      	ldr	r2, [r4, #0]
 80030f6:	07d2      	lsls	r2, r2, #31
 80030f8:	d502      	bpl.n	8003100 <_printf_float+0x194>
 80030fa:	3301      	adds	r3, #1
 80030fc:	440b      	add	r3, r1
 80030fe:	6123      	str	r3, [r4, #16]
 8003100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003102:	65a3      	str	r3, [r4, #88]	; 0x58
 8003104:	f04f 0900 	mov.w	r9, #0
 8003108:	e7d9      	b.n	80030be <_printf_float+0x152>
 800310a:	b913      	cbnz	r3, 8003112 <_printf_float+0x1a6>
 800310c:	6822      	ldr	r2, [r4, #0]
 800310e:	07d0      	lsls	r0, r2, #31
 8003110:	d501      	bpl.n	8003116 <_printf_float+0x1aa>
 8003112:	3302      	adds	r3, #2
 8003114:	e7f3      	b.n	80030fe <_printf_float+0x192>
 8003116:	2301      	movs	r3, #1
 8003118:	e7f1      	b.n	80030fe <_printf_float+0x192>
 800311a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800311e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003122:	4293      	cmp	r3, r2
 8003124:	db05      	blt.n	8003132 <_printf_float+0x1c6>
 8003126:	6822      	ldr	r2, [r4, #0]
 8003128:	6123      	str	r3, [r4, #16]
 800312a:	07d1      	lsls	r1, r2, #31
 800312c:	d5e8      	bpl.n	8003100 <_printf_float+0x194>
 800312e:	3301      	adds	r3, #1
 8003130:	e7e5      	b.n	80030fe <_printf_float+0x192>
 8003132:	2b00      	cmp	r3, #0
 8003134:	bfd4      	ite	le
 8003136:	f1c3 0302 	rsble	r3, r3, #2
 800313a:	2301      	movgt	r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	e7de      	b.n	80030fe <_printf_float+0x192>
 8003140:	6823      	ldr	r3, [r4, #0]
 8003142:	055a      	lsls	r2, r3, #21
 8003144:	d407      	bmi.n	8003156 <_printf_float+0x1ea>
 8003146:	6923      	ldr	r3, [r4, #16]
 8003148:	4642      	mov	r2, r8
 800314a:	4631      	mov	r1, r6
 800314c:	4628      	mov	r0, r5
 800314e:	47b8      	blx	r7
 8003150:	3001      	adds	r0, #1
 8003152:	d12b      	bne.n	80031ac <_printf_float+0x240>
 8003154:	e767      	b.n	8003026 <_printf_float+0xba>
 8003156:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800315a:	f240 80dc 	bls.w	8003316 <_printf_float+0x3aa>
 800315e:	2200      	movs	r2, #0
 8003160:	2300      	movs	r3, #0
 8003162:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003166:	f7fd fc5b 	bl	8000a20 <__aeabi_dcmpeq>
 800316a:	2800      	cmp	r0, #0
 800316c:	d033      	beq.n	80031d6 <_printf_float+0x26a>
 800316e:	2301      	movs	r3, #1
 8003170:	4a41      	ldr	r2, [pc, #260]	; (8003278 <_printf_float+0x30c>)
 8003172:	4631      	mov	r1, r6
 8003174:	4628      	mov	r0, r5
 8003176:	47b8      	blx	r7
 8003178:	3001      	adds	r0, #1
 800317a:	f43f af54 	beq.w	8003026 <_printf_float+0xba>
 800317e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003182:	429a      	cmp	r2, r3
 8003184:	db02      	blt.n	800318c <_printf_float+0x220>
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	07d8      	lsls	r0, r3, #31
 800318a:	d50f      	bpl.n	80031ac <_printf_float+0x240>
 800318c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003190:	4631      	mov	r1, r6
 8003192:	4628      	mov	r0, r5
 8003194:	47b8      	blx	r7
 8003196:	3001      	adds	r0, #1
 8003198:	f43f af45 	beq.w	8003026 <_printf_float+0xba>
 800319c:	f04f 0800 	mov.w	r8, #0
 80031a0:	f104 091a 	add.w	r9, r4, #26
 80031a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	4543      	cmp	r3, r8
 80031aa:	dc09      	bgt.n	80031c0 <_printf_float+0x254>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	079b      	lsls	r3, r3, #30
 80031b0:	f100 8103 	bmi.w	80033ba <_printf_float+0x44e>
 80031b4:	68e0      	ldr	r0, [r4, #12]
 80031b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031b8:	4298      	cmp	r0, r3
 80031ba:	bfb8      	it	lt
 80031bc:	4618      	movlt	r0, r3
 80031be:	e734      	b.n	800302a <_printf_float+0xbe>
 80031c0:	2301      	movs	r3, #1
 80031c2:	464a      	mov	r2, r9
 80031c4:	4631      	mov	r1, r6
 80031c6:	4628      	mov	r0, r5
 80031c8:	47b8      	blx	r7
 80031ca:	3001      	adds	r0, #1
 80031cc:	f43f af2b 	beq.w	8003026 <_printf_float+0xba>
 80031d0:	f108 0801 	add.w	r8, r8, #1
 80031d4:	e7e6      	b.n	80031a4 <_printf_float+0x238>
 80031d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	dc2b      	bgt.n	8003234 <_printf_float+0x2c8>
 80031dc:	2301      	movs	r3, #1
 80031de:	4a26      	ldr	r2, [pc, #152]	; (8003278 <_printf_float+0x30c>)
 80031e0:	4631      	mov	r1, r6
 80031e2:	4628      	mov	r0, r5
 80031e4:	47b8      	blx	r7
 80031e6:	3001      	adds	r0, #1
 80031e8:	f43f af1d 	beq.w	8003026 <_printf_float+0xba>
 80031ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031ee:	b923      	cbnz	r3, 80031fa <_printf_float+0x28e>
 80031f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031f2:	b913      	cbnz	r3, 80031fa <_printf_float+0x28e>
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	07d9      	lsls	r1, r3, #31
 80031f8:	d5d8      	bpl.n	80031ac <_printf_float+0x240>
 80031fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031fe:	4631      	mov	r1, r6
 8003200:	4628      	mov	r0, r5
 8003202:	47b8      	blx	r7
 8003204:	3001      	adds	r0, #1
 8003206:	f43f af0e 	beq.w	8003026 <_printf_float+0xba>
 800320a:	f04f 0900 	mov.w	r9, #0
 800320e:	f104 0a1a 	add.w	sl, r4, #26
 8003212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003214:	425b      	negs	r3, r3
 8003216:	454b      	cmp	r3, r9
 8003218:	dc01      	bgt.n	800321e <_printf_float+0x2b2>
 800321a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800321c:	e794      	b.n	8003148 <_printf_float+0x1dc>
 800321e:	2301      	movs	r3, #1
 8003220:	4652      	mov	r2, sl
 8003222:	4631      	mov	r1, r6
 8003224:	4628      	mov	r0, r5
 8003226:	47b8      	blx	r7
 8003228:	3001      	adds	r0, #1
 800322a:	f43f aefc 	beq.w	8003026 <_printf_float+0xba>
 800322e:	f109 0901 	add.w	r9, r9, #1
 8003232:	e7ee      	b.n	8003212 <_printf_float+0x2a6>
 8003234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003238:	429a      	cmp	r2, r3
 800323a:	bfa8      	it	ge
 800323c:	461a      	movge	r2, r3
 800323e:	2a00      	cmp	r2, #0
 8003240:	4691      	mov	r9, r2
 8003242:	dd07      	ble.n	8003254 <_printf_float+0x2e8>
 8003244:	4613      	mov	r3, r2
 8003246:	4631      	mov	r1, r6
 8003248:	4642      	mov	r2, r8
 800324a:	4628      	mov	r0, r5
 800324c:	47b8      	blx	r7
 800324e:	3001      	adds	r0, #1
 8003250:	f43f aee9 	beq.w	8003026 <_printf_float+0xba>
 8003254:	f104 031a 	add.w	r3, r4, #26
 8003258:	f04f 0b00 	mov.w	fp, #0
 800325c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003260:	9306      	str	r3, [sp, #24]
 8003262:	e015      	b.n	8003290 <_printf_float+0x324>
 8003264:	7fefffff 	.word	0x7fefffff
 8003268:	080048dc 	.word	0x080048dc
 800326c:	080048d8 	.word	0x080048d8
 8003270:	080048e4 	.word	0x080048e4
 8003274:	080048e0 	.word	0x080048e0
 8003278:	080048e8 	.word	0x080048e8
 800327c:	2301      	movs	r3, #1
 800327e:	9a06      	ldr	r2, [sp, #24]
 8003280:	4631      	mov	r1, r6
 8003282:	4628      	mov	r0, r5
 8003284:	47b8      	blx	r7
 8003286:	3001      	adds	r0, #1
 8003288:	f43f aecd 	beq.w	8003026 <_printf_float+0xba>
 800328c:	f10b 0b01 	add.w	fp, fp, #1
 8003290:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003294:	ebaa 0309 	sub.w	r3, sl, r9
 8003298:	455b      	cmp	r3, fp
 800329a:	dcef      	bgt.n	800327c <_printf_float+0x310>
 800329c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032a0:	429a      	cmp	r2, r3
 80032a2:	44d0      	add	r8, sl
 80032a4:	db15      	blt.n	80032d2 <_printf_float+0x366>
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	07da      	lsls	r2, r3, #31
 80032aa:	d412      	bmi.n	80032d2 <_printf_float+0x366>
 80032ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80032b0:	eba3 020a 	sub.w	r2, r3, sl
 80032b4:	eba3 0a01 	sub.w	sl, r3, r1
 80032b8:	4592      	cmp	sl, r2
 80032ba:	bfa8      	it	ge
 80032bc:	4692      	movge	sl, r2
 80032be:	f1ba 0f00 	cmp.w	sl, #0
 80032c2:	dc0e      	bgt.n	80032e2 <_printf_float+0x376>
 80032c4:	f04f 0800 	mov.w	r8, #0
 80032c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80032cc:	f104 091a 	add.w	r9, r4, #26
 80032d0:	e019      	b.n	8003306 <_printf_float+0x39a>
 80032d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032d6:	4631      	mov	r1, r6
 80032d8:	4628      	mov	r0, r5
 80032da:	47b8      	blx	r7
 80032dc:	3001      	adds	r0, #1
 80032de:	d1e5      	bne.n	80032ac <_printf_float+0x340>
 80032e0:	e6a1      	b.n	8003026 <_printf_float+0xba>
 80032e2:	4653      	mov	r3, sl
 80032e4:	4642      	mov	r2, r8
 80032e6:	4631      	mov	r1, r6
 80032e8:	4628      	mov	r0, r5
 80032ea:	47b8      	blx	r7
 80032ec:	3001      	adds	r0, #1
 80032ee:	d1e9      	bne.n	80032c4 <_printf_float+0x358>
 80032f0:	e699      	b.n	8003026 <_printf_float+0xba>
 80032f2:	2301      	movs	r3, #1
 80032f4:	464a      	mov	r2, r9
 80032f6:	4631      	mov	r1, r6
 80032f8:	4628      	mov	r0, r5
 80032fa:	47b8      	blx	r7
 80032fc:	3001      	adds	r0, #1
 80032fe:	f43f ae92 	beq.w	8003026 <_printf_float+0xba>
 8003302:	f108 0801 	add.w	r8, r8, #1
 8003306:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	eba3 030a 	sub.w	r3, r3, sl
 8003310:	4543      	cmp	r3, r8
 8003312:	dcee      	bgt.n	80032f2 <_printf_float+0x386>
 8003314:	e74a      	b.n	80031ac <_printf_float+0x240>
 8003316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003318:	2a01      	cmp	r2, #1
 800331a:	dc01      	bgt.n	8003320 <_printf_float+0x3b4>
 800331c:	07db      	lsls	r3, r3, #31
 800331e:	d53a      	bpl.n	8003396 <_printf_float+0x42a>
 8003320:	2301      	movs	r3, #1
 8003322:	4642      	mov	r2, r8
 8003324:	4631      	mov	r1, r6
 8003326:	4628      	mov	r0, r5
 8003328:	47b8      	blx	r7
 800332a:	3001      	adds	r0, #1
 800332c:	f43f ae7b 	beq.w	8003026 <_printf_float+0xba>
 8003330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003334:	4631      	mov	r1, r6
 8003336:	4628      	mov	r0, r5
 8003338:	47b8      	blx	r7
 800333a:	3001      	adds	r0, #1
 800333c:	f108 0801 	add.w	r8, r8, #1
 8003340:	f43f ae71 	beq.w	8003026 <_printf_float+0xba>
 8003344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003346:	2200      	movs	r2, #0
 8003348:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800334c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003350:	2300      	movs	r3, #0
 8003352:	f7fd fb65 	bl	8000a20 <__aeabi_dcmpeq>
 8003356:	b9c8      	cbnz	r0, 800338c <_printf_float+0x420>
 8003358:	4653      	mov	r3, sl
 800335a:	4642      	mov	r2, r8
 800335c:	4631      	mov	r1, r6
 800335e:	4628      	mov	r0, r5
 8003360:	47b8      	blx	r7
 8003362:	3001      	adds	r0, #1
 8003364:	d10e      	bne.n	8003384 <_printf_float+0x418>
 8003366:	e65e      	b.n	8003026 <_printf_float+0xba>
 8003368:	2301      	movs	r3, #1
 800336a:	4652      	mov	r2, sl
 800336c:	4631      	mov	r1, r6
 800336e:	4628      	mov	r0, r5
 8003370:	47b8      	blx	r7
 8003372:	3001      	adds	r0, #1
 8003374:	f43f ae57 	beq.w	8003026 <_printf_float+0xba>
 8003378:	f108 0801 	add.w	r8, r8, #1
 800337c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800337e:	3b01      	subs	r3, #1
 8003380:	4543      	cmp	r3, r8
 8003382:	dcf1      	bgt.n	8003368 <_printf_float+0x3fc>
 8003384:	464b      	mov	r3, r9
 8003386:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800338a:	e6de      	b.n	800314a <_printf_float+0x1de>
 800338c:	f04f 0800 	mov.w	r8, #0
 8003390:	f104 0a1a 	add.w	sl, r4, #26
 8003394:	e7f2      	b.n	800337c <_printf_float+0x410>
 8003396:	2301      	movs	r3, #1
 8003398:	e7df      	b.n	800335a <_printf_float+0x3ee>
 800339a:	2301      	movs	r3, #1
 800339c:	464a      	mov	r2, r9
 800339e:	4631      	mov	r1, r6
 80033a0:	4628      	mov	r0, r5
 80033a2:	47b8      	blx	r7
 80033a4:	3001      	adds	r0, #1
 80033a6:	f43f ae3e 	beq.w	8003026 <_printf_float+0xba>
 80033aa:	f108 0801 	add.w	r8, r8, #1
 80033ae:	68e3      	ldr	r3, [r4, #12]
 80033b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	4543      	cmp	r3, r8
 80033b6:	dcf0      	bgt.n	800339a <_printf_float+0x42e>
 80033b8:	e6fc      	b.n	80031b4 <_printf_float+0x248>
 80033ba:	f04f 0800 	mov.w	r8, #0
 80033be:	f104 0919 	add.w	r9, r4, #25
 80033c2:	e7f4      	b.n	80033ae <_printf_float+0x442>
 80033c4:	2900      	cmp	r1, #0
 80033c6:	f43f ae8b 	beq.w	80030e0 <_printf_float+0x174>
 80033ca:	2300      	movs	r3, #0
 80033cc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80033d0:	ab09      	add	r3, sp, #36	; 0x24
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	ec49 8b10 	vmov	d0, r8, r9
 80033d8:	6022      	str	r2, [r4, #0]
 80033da:	f8cd a004 	str.w	sl, [sp, #4]
 80033de:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80033e2:	4628      	mov	r0, r5
 80033e4:	f7ff fd2e 	bl	8002e44 <__cvt>
 80033e8:	4680      	mov	r8, r0
 80033ea:	e648      	b.n	800307e <_printf_float+0x112>

080033ec <_printf_common>:
 80033ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f0:	4691      	mov	r9, r2
 80033f2:	461f      	mov	r7, r3
 80033f4:	688a      	ldr	r2, [r1, #8]
 80033f6:	690b      	ldr	r3, [r1, #16]
 80033f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bfb8      	it	lt
 8003400:	4613      	movlt	r3, r2
 8003402:	f8c9 3000 	str.w	r3, [r9]
 8003406:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800340a:	4606      	mov	r6, r0
 800340c:	460c      	mov	r4, r1
 800340e:	b112      	cbz	r2, 8003416 <_printf_common+0x2a>
 8003410:	3301      	adds	r3, #1
 8003412:	f8c9 3000 	str.w	r3, [r9]
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	0699      	lsls	r1, r3, #26
 800341a:	bf42      	ittt	mi
 800341c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003420:	3302      	addmi	r3, #2
 8003422:	f8c9 3000 	strmi.w	r3, [r9]
 8003426:	6825      	ldr	r5, [r4, #0]
 8003428:	f015 0506 	ands.w	r5, r5, #6
 800342c:	d107      	bne.n	800343e <_printf_common+0x52>
 800342e:	f104 0a19 	add.w	sl, r4, #25
 8003432:	68e3      	ldr	r3, [r4, #12]
 8003434:	f8d9 2000 	ldr.w	r2, [r9]
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	42ab      	cmp	r3, r5
 800343c:	dc28      	bgt.n	8003490 <_printf_common+0xa4>
 800343e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	3300      	adds	r3, #0
 8003446:	bf18      	it	ne
 8003448:	2301      	movne	r3, #1
 800344a:	0692      	lsls	r2, r2, #26
 800344c:	d42d      	bmi.n	80034aa <_printf_common+0xbe>
 800344e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003452:	4639      	mov	r1, r7
 8003454:	4630      	mov	r0, r6
 8003456:	47c0      	blx	r8
 8003458:	3001      	adds	r0, #1
 800345a:	d020      	beq.n	800349e <_printf_common+0xb2>
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	68e5      	ldr	r5, [r4, #12]
 8003460:	f8d9 2000 	ldr.w	r2, [r9]
 8003464:	f003 0306 	and.w	r3, r3, #6
 8003468:	2b04      	cmp	r3, #4
 800346a:	bf08      	it	eq
 800346c:	1aad      	subeq	r5, r5, r2
 800346e:	68a3      	ldr	r3, [r4, #8]
 8003470:	6922      	ldr	r2, [r4, #16]
 8003472:	bf0c      	ite	eq
 8003474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003478:	2500      	movne	r5, #0
 800347a:	4293      	cmp	r3, r2
 800347c:	bfc4      	itt	gt
 800347e:	1a9b      	subgt	r3, r3, r2
 8003480:	18ed      	addgt	r5, r5, r3
 8003482:	f04f 0900 	mov.w	r9, #0
 8003486:	341a      	adds	r4, #26
 8003488:	454d      	cmp	r5, r9
 800348a:	d11a      	bne.n	80034c2 <_printf_common+0xd6>
 800348c:	2000      	movs	r0, #0
 800348e:	e008      	b.n	80034a2 <_printf_common+0xb6>
 8003490:	2301      	movs	r3, #1
 8003492:	4652      	mov	r2, sl
 8003494:	4639      	mov	r1, r7
 8003496:	4630      	mov	r0, r6
 8003498:	47c0      	blx	r8
 800349a:	3001      	adds	r0, #1
 800349c:	d103      	bne.n	80034a6 <_printf_common+0xba>
 800349e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a6:	3501      	adds	r5, #1
 80034a8:	e7c3      	b.n	8003432 <_printf_common+0x46>
 80034aa:	18e1      	adds	r1, r4, r3
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	2030      	movs	r0, #48	; 0x30
 80034b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80034b4:	4422      	add	r2, r4
 80034b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80034ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80034be:	3302      	adds	r3, #2
 80034c0:	e7c5      	b.n	800344e <_printf_common+0x62>
 80034c2:	2301      	movs	r3, #1
 80034c4:	4622      	mov	r2, r4
 80034c6:	4639      	mov	r1, r7
 80034c8:	4630      	mov	r0, r6
 80034ca:	47c0      	blx	r8
 80034cc:	3001      	adds	r0, #1
 80034ce:	d0e6      	beq.n	800349e <_printf_common+0xb2>
 80034d0:	f109 0901 	add.w	r9, r9, #1
 80034d4:	e7d8      	b.n	8003488 <_printf_common+0x9c>

080034d6 <quorem>:
 80034d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034da:	6903      	ldr	r3, [r0, #16]
 80034dc:	690c      	ldr	r4, [r1, #16]
 80034de:	42a3      	cmp	r3, r4
 80034e0:	4680      	mov	r8, r0
 80034e2:	f2c0 8082 	blt.w	80035ea <quorem+0x114>
 80034e6:	3c01      	subs	r4, #1
 80034e8:	f101 0714 	add.w	r7, r1, #20
 80034ec:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80034f0:	f100 0614 	add.w	r6, r0, #20
 80034f4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80034f8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80034fc:	eb06 030c 	add.w	r3, r6, ip
 8003500:	3501      	adds	r5, #1
 8003502:	eb07 090c 	add.w	r9, r7, ip
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	fbb0 f5f5 	udiv	r5, r0, r5
 800350c:	b395      	cbz	r5, 8003574 <quorem+0x9e>
 800350e:	f04f 0a00 	mov.w	sl, #0
 8003512:	4638      	mov	r0, r7
 8003514:	46b6      	mov	lr, r6
 8003516:	46d3      	mov	fp, sl
 8003518:	f850 2b04 	ldr.w	r2, [r0], #4
 800351c:	b293      	uxth	r3, r2
 800351e:	fb05 a303 	mla	r3, r5, r3, sl
 8003522:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003526:	b29b      	uxth	r3, r3
 8003528:	ebab 0303 	sub.w	r3, fp, r3
 800352c:	0c12      	lsrs	r2, r2, #16
 800352e:	f8de b000 	ldr.w	fp, [lr]
 8003532:	fb05 a202 	mla	r2, r5, r2, sl
 8003536:	fa13 f38b 	uxtah	r3, r3, fp
 800353a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800353e:	fa1f fb82 	uxth.w	fp, r2
 8003542:	f8de 2000 	ldr.w	r2, [lr]
 8003546:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800354a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800354e:	b29b      	uxth	r3, r3
 8003550:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003554:	4581      	cmp	r9, r0
 8003556:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800355a:	f84e 3b04 	str.w	r3, [lr], #4
 800355e:	d2db      	bcs.n	8003518 <quorem+0x42>
 8003560:	f856 300c 	ldr.w	r3, [r6, ip]
 8003564:	b933      	cbnz	r3, 8003574 <quorem+0x9e>
 8003566:	9b01      	ldr	r3, [sp, #4]
 8003568:	3b04      	subs	r3, #4
 800356a:	429e      	cmp	r6, r3
 800356c:	461a      	mov	r2, r3
 800356e:	d330      	bcc.n	80035d2 <quorem+0xfc>
 8003570:	f8c8 4010 	str.w	r4, [r8, #16]
 8003574:	4640      	mov	r0, r8
 8003576:	f001 f829 	bl	80045cc <__mcmp>
 800357a:	2800      	cmp	r0, #0
 800357c:	db25      	blt.n	80035ca <quorem+0xf4>
 800357e:	3501      	adds	r5, #1
 8003580:	4630      	mov	r0, r6
 8003582:	f04f 0c00 	mov.w	ip, #0
 8003586:	f857 2b04 	ldr.w	r2, [r7], #4
 800358a:	f8d0 e000 	ldr.w	lr, [r0]
 800358e:	b293      	uxth	r3, r2
 8003590:	ebac 0303 	sub.w	r3, ip, r3
 8003594:	0c12      	lsrs	r2, r2, #16
 8003596:	fa13 f38e 	uxtah	r3, r3, lr
 800359a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800359e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035a8:	45b9      	cmp	r9, r7
 80035aa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80035ae:	f840 3b04 	str.w	r3, [r0], #4
 80035b2:	d2e8      	bcs.n	8003586 <quorem+0xb0>
 80035b4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80035b8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80035bc:	b92a      	cbnz	r2, 80035ca <quorem+0xf4>
 80035be:	3b04      	subs	r3, #4
 80035c0:	429e      	cmp	r6, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	d30b      	bcc.n	80035de <quorem+0x108>
 80035c6:	f8c8 4010 	str.w	r4, [r8, #16]
 80035ca:	4628      	mov	r0, r5
 80035cc:	b003      	add	sp, #12
 80035ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	3b04      	subs	r3, #4
 80035d6:	2a00      	cmp	r2, #0
 80035d8:	d1ca      	bne.n	8003570 <quorem+0x9a>
 80035da:	3c01      	subs	r4, #1
 80035dc:	e7c5      	b.n	800356a <quorem+0x94>
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	3b04      	subs	r3, #4
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	d1ef      	bne.n	80035c6 <quorem+0xf0>
 80035e6:	3c01      	subs	r4, #1
 80035e8:	e7ea      	b.n	80035c0 <quorem+0xea>
 80035ea:	2000      	movs	r0, #0
 80035ec:	e7ee      	b.n	80035cc <quorem+0xf6>
	...

080035f0 <_dtoa_r>:
 80035f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035f4:	ec57 6b10 	vmov	r6, r7, d0
 80035f8:	b097      	sub	sp, #92	; 0x5c
 80035fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80035fc:	9106      	str	r1, [sp, #24]
 80035fe:	4604      	mov	r4, r0
 8003600:	920b      	str	r2, [sp, #44]	; 0x2c
 8003602:	9312      	str	r3, [sp, #72]	; 0x48
 8003604:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003608:	e9cd 6700 	strd	r6, r7, [sp]
 800360c:	b93d      	cbnz	r5, 800361e <_dtoa_r+0x2e>
 800360e:	2010      	movs	r0, #16
 8003610:	f000 fdb4 	bl	800417c <malloc>
 8003614:	6260      	str	r0, [r4, #36]	; 0x24
 8003616:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800361a:	6005      	str	r5, [r0, #0]
 800361c:	60c5      	str	r5, [r0, #12]
 800361e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	b151      	cbz	r1, 800363a <_dtoa_r+0x4a>
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	604a      	str	r2, [r1, #4]
 8003628:	2301      	movs	r3, #1
 800362a:	4093      	lsls	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
 800362e:	4620      	mov	r0, r4
 8003630:	f000 fdeb 	bl	800420a <_Bfree>
 8003634:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	1e3b      	subs	r3, r7, #0
 800363c:	bfbb      	ittet	lt
 800363e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003642:	9301      	strlt	r3, [sp, #4]
 8003644:	2300      	movge	r3, #0
 8003646:	2201      	movlt	r2, #1
 8003648:	bfac      	ite	ge
 800364a:	f8c8 3000 	strge.w	r3, [r8]
 800364e:	f8c8 2000 	strlt.w	r2, [r8]
 8003652:	4baf      	ldr	r3, [pc, #700]	; (8003910 <_dtoa_r+0x320>)
 8003654:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003658:	ea33 0308 	bics.w	r3, r3, r8
 800365c:	d114      	bne.n	8003688 <_dtoa_r+0x98>
 800365e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003660:	f242 730f 	movw	r3, #9999	; 0x270f
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	9b00      	ldr	r3, [sp, #0]
 8003668:	b923      	cbnz	r3, 8003674 <_dtoa_r+0x84>
 800366a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800366e:	2800      	cmp	r0, #0
 8003670:	f000 8542 	beq.w	80040f8 <_dtoa_r+0xb08>
 8003674:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003676:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8003924 <_dtoa_r+0x334>
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8544 	beq.w	8004108 <_dtoa_r+0xb18>
 8003680:	f10b 0303 	add.w	r3, fp, #3
 8003684:	f000 bd3e 	b.w	8004104 <_dtoa_r+0xb14>
 8003688:	e9dd 6700 	ldrd	r6, r7, [sp]
 800368c:	2200      	movs	r2, #0
 800368e:	2300      	movs	r3, #0
 8003690:	4630      	mov	r0, r6
 8003692:	4639      	mov	r1, r7
 8003694:	f7fd f9c4 	bl	8000a20 <__aeabi_dcmpeq>
 8003698:	4681      	mov	r9, r0
 800369a:	b168      	cbz	r0, 80036b8 <_dtoa_r+0xc8>
 800369c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800369e:	2301      	movs	r3, #1
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8524 	beq.w	80040f2 <_dtoa_r+0xb02>
 80036aa:	4b9a      	ldr	r3, [pc, #616]	; (8003914 <_dtoa_r+0x324>)
 80036ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80036ae:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80036b2:	6013      	str	r3, [r2, #0]
 80036b4:	f000 bd28 	b.w	8004108 <_dtoa_r+0xb18>
 80036b8:	aa14      	add	r2, sp, #80	; 0x50
 80036ba:	a915      	add	r1, sp, #84	; 0x54
 80036bc:	ec47 6b10 	vmov	d0, r6, r7
 80036c0:	4620      	mov	r0, r4
 80036c2:	f000 fffa 	bl	80046ba <__d2b>
 80036c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80036ca:	9004      	str	r0, [sp, #16]
 80036cc:	2d00      	cmp	r5, #0
 80036ce:	d07c      	beq.n	80037ca <_dtoa_r+0x1da>
 80036d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80036d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80036d8:	46b2      	mov	sl, r6
 80036da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80036de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80036e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80036e6:	2200      	movs	r2, #0
 80036e8:	4b8b      	ldr	r3, [pc, #556]	; (8003918 <_dtoa_r+0x328>)
 80036ea:	4650      	mov	r0, sl
 80036ec:	4659      	mov	r1, fp
 80036ee:	f7fc fd77 	bl	80001e0 <__aeabi_dsub>
 80036f2:	a381      	add	r3, pc, #516	; (adr r3, 80038f8 <_dtoa_r+0x308>)
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f7fc ff2a 	bl	8000550 <__aeabi_dmul>
 80036fc:	a380      	add	r3, pc, #512	; (adr r3, 8003900 <_dtoa_r+0x310>)
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f7fc fd6f 	bl	80001e4 <__adddf3>
 8003706:	4606      	mov	r6, r0
 8003708:	4628      	mov	r0, r5
 800370a:	460f      	mov	r7, r1
 800370c:	f7fc feb6 	bl	800047c <__aeabi_i2d>
 8003710:	a37d      	add	r3, pc, #500	; (adr r3, 8003908 <_dtoa_r+0x318>)
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	f7fc ff1b 	bl	8000550 <__aeabi_dmul>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4630      	mov	r0, r6
 8003720:	4639      	mov	r1, r7
 8003722:	f7fc fd5f 	bl	80001e4 <__adddf3>
 8003726:	4606      	mov	r6, r0
 8003728:	460f      	mov	r7, r1
 800372a:	f7fd f9c1 	bl	8000ab0 <__aeabi_d2iz>
 800372e:	2200      	movs	r2, #0
 8003730:	4682      	mov	sl, r0
 8003732:	2300      	movs	r3, #0
 8003734:	4630      	mov	r0, r6
 8003736:	4639      	mov	r1, r7
 8003738:	f7fd f97c 	bl	8000a34 <__aeabi_dcmplt>
 800373c:	b148      	cbz	r0, 8003752 <_dtoa_r+0x162>
 800373e:	4650      	mov	r0, sl
 8003740:	f7fc fe9c 	bl	800047c <__aeabi_i2d>
 8003744:	4632      	mov	r2, r6
 8003746:	463b      	mov	r3, r7
 8003748:	f7fd f96a 	bl	8000a20 <__aeabi_dcmpeq>
 800374c:	b908      	cbnz	r0, 8003752 <_dtoa_r+0x162>
 800374e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003752:	f1ba 0f16 	cmp.w	sl, #22
 8003756:	d859      	bhi.n	800380c <_dtoa_r+0x21c>
 8003758:	4970      	ldr	r1, [pc, #448]	; (800391c <_dtoa_r+0x32c>)
 800375a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800375e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003762:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003766:	f7fd f983 	bl	8000a70 <__aeabi_dcmpgt>
 800376a:	2800      	cmp	r0, #0
 800376c:	d050      	beq.n	8003810 <_dtoa_r+0x220>
 800376e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003772:	2300      	movs	r3, #0
 8003774:	930f      	str	r3, [sp, #60]	; 0x3c
 8003776:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003778:	1b5d      	subs	r5, r3, r5
 800377a:	f1b5 0801 	subs.w	r8, r5, #1
 800377e:	bf49      	itett	mi
 8003780:	f1c5 0301 	rsbmi	r3, r5, #1
 8003784:	2300      	movpl	r3, #0
 8003786:	9305      	strmi	r3, [sp, #20]
 8003788:	f04f 0800 	movmi.w	r8, #0
 800378c:	bf58      	it	pl
 800378e:	9305      	strpl	r3, [sp, #20]
 8003790:	f1ba 0f00 	cmp.w	sl, #0
 8003794:	db3e      	blt.n	8003814 <_dtoa_r+0x224>
 8003796:	2300      	movs	r3, #0
 8003798:	44d0      	add	r8, sl
 800379a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800379e:	9307      	str	r3, [sp, #28]
 80037a0:	9b06      	ldr	r3, [sp, #24]
 80037a2:	2b09      	cmp	r3, #9
 80037a4:	f200 8090 	bhi.w	80038c8 <_dtoa_r+0x2d8>
 80037a8:	2b05      	cmp	r3, #5
 80037aa:	bfc4      	itt	gt
 80037ac:	3b04      	subgt	r3, #4
 80037ae:	9306      	strgt	r3, [sp, #24]
 80037b0:	9b06      	ldr	r3, [sp, #24]
 80037b2:	f1a3 0302 	sub.w	r3, r3, #2
 80037b6:	bfcc      	ite	gt
 80037b8:	2500      	movgt	r5, #0
 80037ba:	2501      	movle	r5, #1
 80037bc:	2b03      	cmp	r3, #3
 80037be:	f200 808f 	bhi.w	80038e0 <_dtoa_r+0x2f0>
 80037c2:	e8df f003 	tbb	[pc, r3]
 80037c6:	7f7d      	.short	0x7f7d
 80037c8:	7131      	.short	0x7131
 80037ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80037ce:	441d      	add	r5, r3
 80037d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80037d4:	2820      	cmp	r0, #32
 80037d6:	dd13      	ble.n	8003800 <_dtoa_r+0x210>
 80037d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80037dc:	9b00      	ldr	r3, [sp, #0]
 80037de:	fa08 f800 	lsl.w	r8, r8, r0
 80037e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80037e6:	fa23 f000 	lsr.w	r0, r3, r0
 80037ea:	ea48 0000 	orr.w	r0, r8, r0
 80037ee:	f7fc fe35 	bl	800045c <__aeabi_ui2d>
 80037f2:	2301      	movs	r3, #1
 80037f4:	4682      	mov	sl, r0
 80037f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80037fa:	3d01      	subs	r5, #1
 80037fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80037fe:	e772      	b.n	80036e6 <_dtoa_r+0xf6>
 8003800:	9b00      	ldr	r3, [sp, #0]
 8003802:	f1c0 0020 	rsb	r0, r0, #32
 8003806:	fa03 f000 	lsl.w	r0, r3, r0
 800380a:	e7f0      	b.n	80037ee <_dtoa_r+0x1fe>
 800380c:	2301      	movs	r3, #1
 800380e:	e7b1      	b.n	8003774 <_dtoa_r+0x184>
 8003810:	900f      	str	r0, [sp, #60]	; 0x3c
 8003812:	e7b0      	b.n	8003776 <_dtoa_r+0x186>
 8003814:	9b05      	ldr	r3, [sp, #20]
 8003816:	eba3 030a 	sub.w	r3, r3, sl
 800381a:	9305      	str	r3, [sp, #20]
 800381c:	f1ca 0300 	rsb	r3, sl, #0
 8003820:	9307      	str	r3, [sp, #28]
 8003822:	2300      	movs	r3, #0
 8003824:	930e      	str	r3, [sp, #56]	; 0x38
 8003826:	e7bb      	b.n	80037a0 <_dtoa_r+0x1b0>
 8003828:	2301      	movs	r3, #1
 800382a:	930a      	str	r3, [sp, #40]	; 0x28
 800382c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800382e:	2b00      	cmp	r3, #0
 8003830:	dd59      	ble.n	80038e6 <_dtoa_r+0x2f6>
 8003832:	9302      	str	r3, [sp, #8]
 8003834:	4699      	mov	r9, r3
 8003836:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003838:	2200      	movs	r2, #0
 800383a:	6072      	str	r2, [r6, #4]
 800383c:	2204      	movs	r2, #4
 800383e:	f102 0014 	add.w	r0, r2, #20
 8003842:	4298      	cmp	r0, r3
 8003844:	6871      	ldr	r1, [r6, #4]
 8003846:	d953      	bls.n	80038f0 <_dtoa_r+0x300>
 8003848:	4620      	mov	r0, r4
 800384a:	f000 fcaa 	bl	80041a2 <_Balloc>
 800384e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003850:	6030      	str	r0, [r6, #0]
 8003852:	f1b9 0f0e 	cmp.w	r9, #14
 8003856:	f8d3 b000 	ldr.w	fp, [r3]
 800385a:	f200 80e6 	bhi.w	8003a2a <_dtoa_r+0x43a>
 800385e:	2d00      	cmp	r5, #0
 8003860:	f000 80e3 	beq.w	8003a2a <_dtoa_r+0x43a>
 8003864:	ed9d 7b00 	vldr	d7, [sp]
 8003868:	f1ba 0f00 	cmp.w	sl, #0
 800386c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003870:	dd74      	ble.n	800395c <_dtoa_r+0x36c>
 8003872:	4a2a      	ldr	r2, [pc, #168]	; (800391c <_dtoa_r+0x32c>)
 8003874:	f00a 030f 	and.w	r3, sl, #15
 8003878:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800387c:	ed93 7b00 	vldr	d7, [r3]
 8003880:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003884:	06f0      	lsls	r0, r6, #27
 8003886:	ed8d 7b08 	vstr	d7, [sp, #32]
 800388a:	d565      	bpl.n	8003958 <_dtoa_r+0x368>
 800388c:	4b24      	ldr	r3, [pc, #144]	; (8003920 <_dtoa_r+0x330>)
 800388e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003892:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003896:	f7fc ff85 	bl	80007a4 <__aeabi_ddiv>
 800389a:	e9cd 0100 	strd	r0, r1, [sp]
 800389e:	f006 060f 	and.w	r6, r6, #15
 80038a2:	2503      	movs	r5, #3
 80038a4:	4f1e      	ldr	r7, [pc, #120]	; (8003920 <_dtoa_r+0x330>)
 80038a6:	e04c      	b.n	8003942 <_dtoa_r+0x352>
 80038a8:	2301      	movs	r3, #1
 80038aa:	930a      	str	r3, [sp, #40]	; 0x28
 80038ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038ae:	4453      	add	r3, sl
 80038b0:	f103 0901 	add.w	r9, r3, #1
 80038b4:	9302      	str	r3, [sp, #8]
 80038b6:	464b      	mov	r3, r9
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	bfb8      	it	lt
 80038bc:	2301      	movlt	r3, #1
 80038be:	e7ba      	b.n	8003836 <_dtoa_r+0x246>
 80038c0:	2300      	movs	r3, #0
 80038c2:	e7b2      	b.n	800382a <_dtoa_r+0x23a>
 80038c4:	2300      	movs	r3, #0
 80038c6:	e7f0      	b.n	80038aa <_dtoa_r+0x2ba>
 80038c8:	2501      	movs	r5, #1
 80038ca:	2300      	movs	r3, #0
 80038cc:	9306      	str	r3, [sp, #24]
 80038ce:	950a      	str	r5, [sp, #40]	; 0x28
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d4:	9302      	str	r3, [sp, #8]
 80038d6:	4699      	mov	r9, r3
 80038d8:	2200      	movs	r2, #0
 80038da:	2312      	movs	r3, #18
 80038dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80038de:	e7aa      	b.n	8003836 <_dtoa_r+0x246>
 80038e0:	2301      	movs	r3, #1
 80038e2:	930a      	str	r3, [sp, #40]	; 0x28
 80038e4:	e7f4      	b.n	80038d0 <_dtoa_r+0x2e0>
 80038e6:	2301      	movs	r3, #1
 80038e8:	9302      	str	r3, [sp, #8]
 80038ea:	4699      	mov	r9, r3
 80038ec:	461a      	mov	r2, r3
 80038ee:	e7f5      	b.n	80038dc <_dtoa_r+0x2ec>
 80038f0:	3101      	adds	r1, #1
 80038f2:	6071      	str	r1, [r6, #4]
 80038f4:	0052      	lsls	r2, r2, #1
 80038f6:	e7a2      	b.n	800383e <_dtoa_r+0x24e>
 80038f8:	636f4361 	.word	0x636f4361
 80038fc:	3fd287a7 	.word	0x3fd287a7
 8003900:	8b60c8b3 	.word	0x8b60c8b3
 8003904:	3fc68a28 	.word	0x3fc68a28
 8003908:	509f79fb 	.word	0x509f79fb
 800390c:	3fd34413 	.word	0x3fd34413
 8003910:	7ff00000 	.word	0x7ff00000
 8003914:	080048e9 	.word	0x080048e9
 8003918:	3ff80000 	.word	0x3ff80000
 800391c:	08004920 	.word	0x08004920
 8003920:	080048f8 	.word	0x080048f8
 8003924:	080048f3 	.word	0x080048f3
 8003928:	07f1      	lsls	r1, r6, #31
 800392a:	d508      	bpl.n	800393e <_dtoa_r+0x34e>
 800392c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003934:	f7fc fe0c 	bl	8000550 <__aeabi_dmul>
 8003938:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800393c:	3501      	adds	r5, #1
 800393e:	1076      	asrs	r6, r6, #1
 8003940:	3708      	adds	r7, #8
 8003942:	2e00      	cmp	r6, #0
 8003944:	d1f0      	bne.n	8003928 <_dtoa_r+0x338>
 8003946:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800394a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800394e:	f7fc ff29 	bl	80007a4 <__aeabi_ddiv>
 8003952:	e9cd 0100 	strd	r0, r1, [sp]
 8003956:	e01a      	b.n	800398e <_dtoa_r+0x39e>
 8003958:	2502      	movs	r5, #2
 800395a:	e7a3      	b.n	80038a4 <_dtoa_r+0x2b4>
 800395c:	f000 80a0 	beq.w	8003aa0 <_dtoa_r+0x4b0>
 8003960:	f1ca 0600 	rsb	r6, sl, #0
 8003964:	4b9f      	ldr	r3, [pc, #636]	; (8003be4 <_dtoa_r+0x5f4>)
 8003966:	4fa0      	ldr	r7, [pc, #640]	; (8003be8 <_dtoa_r+0x5f8>)
 8003968:	f006 020f 	and.w	r2, r6, #15
 800396c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003978:	f7fc fdea 	bl	8000550 <__aeabi_dmul>
 800397c:	e9cd 0100 	strd	r0, r1, [sp]
 8003980:	1136      	asrs	r6, r6, #4
 8003982:	2300      	movs	r3, #0
 8003984:	2502      	movs	r5, #2
 8003986:	2e00      	cmp	r6, #0
 8003988:	d17f      	bne.n	8003a8a <_dtoa_r+0x49a>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e1      	bne.n	8003952 <_dtoa_r+0x362>
 800398e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 8087 	beq.w	8003aa4 <_dtoa_r+0x4b4>
 8003996:	e9dd 6700 	ldrd	r6, r7, [sp]
 800399a:	2200      	movs	r2, #0
 800399c:	4b93      	ldr	r3, [pc, #588]	; (8003bec <_dtoa_r+0x5fc>)
 800399e:	4630      	mov	r0, r6
 80039a0:	4639      	mov	r1, r7
 80039a2:	f7fd f847 	bl	8000a34 <__aeabi_dcmplt>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d07c      	beq.n	8003aa4 <_dtoa_r+0x4b4>
 80039aa:	f1b9 0f00 	cmp.w	r9, #0
 80039ae:	d079      	beq.n	8003aa4 <_dtoa_r+0x4b4>
 80039b0:	9b02      	ldr	r3, [sp, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	dd35      	ble.n	8003a22 <_dtoa_r+0x432>
 80039b6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80039ba:	9308      	str	r3, [sp, #32]
 80039bc:	4639      	mov	r1, r7
 80039be:	2200      	movs	r2, #0
 80039c0:	4b8b      	ldr	r3, [pc, #556]	; (8003bf0 <_dtoa_r+0x600>)
 80039c2:	4630      	mov	r0, r6
 80039c4:	f7fc fdc4 	bl	8000550 <__aeabi_dmul>
 80039c8:	e9cd 0100 	strd	r0, r1, [sp]
 80039cc:	9f02      	ldr	r7, [sp, #8]
 80039ce:	3501      	adds	r5, #1
 80039d0:	4628      	mov	r0, r5
 80039d2:	f7fc fd53 	bl	800047c <__aeabi_i2d>
 80039d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80039da:	f7fc fdb9 	bl	8000550 <__aeabi_dmul>
 80039de:	2200      	movs	r2, #0
 80039e0:	4b84      	ldr	r3, [pc, #528]	; (8003bf4 <_dtoa_r+0x604>)
 80039e2:	f7fc fbff 	bl	80001e4 <__adddf3>
 80039e6:	4605      	mov	r5, r0
 80039e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80039ec:	2f00      	cmp	r7, #0
 80039ee:	d15d      	bne.n	8003aac <_dtoa_r+0x4bc>
 80039f0:	2200      	movs	r2, #0
 80039f2:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <_dtoa_r+0x608>)
 80039f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039f8:	f7fc fbf2 	bl	80001e0 <__aeabi_dsub>
 80039fc:	462a      	mov	r2, r5
 80039fe:	4633      	mov	r3, r6
 8003a00:	e9cd 0100 	strd	r0, r1, [sp]
 8003a04:	f7fd f834 	bl	8000a70 <__aeabi_dcmpgt>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	f040 8288 	bne.w	8003f1e <_dtoa_r+0x92e>
 8003a0e:	462a      	mov	r2, r5
 8003a10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003a14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a18:	f7fd f80c 	bl	8000a34 <__aeabi_dcmplt>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	f040 827c 	bne.w	8003f1a <_dtoa_r+0x92a>
 8003a22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a26:	e9cd 2300 	strd	r2, r3, [sp]
 8003a2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f2c0 8150 	blt.w	8003cd2 <_dtoa_r+0x6e2>
 8003a32:	f1ba 0f0e 	cmp.w	sl, #14
 8003a36:	f300 814c 	bgt.w	8003cd2 <_dtoa_r+0x6e2>
 8003a3a:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <_dtoa_r+0x5f4>)
 8003a3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003a40:	ed93 7b00 	vldr	d7, [r3]
 8003a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a4c:	f280 80d8 	bge.w	8003c00 <_dtoa_r+0x610>
 8003a50:	f1b9 0f00 	cmp.w	r9, #0
 8003a54:	f300 80d4 	bgt.w	8003c00 <_dtoa_r+0x610>
 8003a58:	f040 825e 	bne.w	8003f18 <_dtoa_r+0x928>
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4b66      	ldr	r3, [pc, #408]	; (8003bf8 <_dtoa_r+0x608>)
 8003a60:	ec51 0b17 	vmov	r0, r1, d7
 8003a64:	f7fc fd74 	bl	8000550 <__aeabi_dmul>
 8003a68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a6c:	f7fc fff6 	bl	8000a5c <__aeabi_dcmpge>
 8003a70:	464f      	mov	r7, r9
 8003a72:	464e      	mov	r6, r9
 8003a74:	2800      	cmp	r0, #0
 8003a76:	f040 8234 	bne.w	8003ee2 <_dtoa_r+0x8f2>
 8003a7a:	2331      	movs	r3, #49	; 0x31
 8003a7c:	f10b 0501 	add.w	r5, fp, #1
 8003a80:	f88b 3000 	strb.w	r3, [fp]
 8003a84:	f10a 0a01 	add.w	sl, sl, #1
 8003a88:	e22f      	b.n	8003eea <_dtoa_r+0x8fa>
 8003a8a:	07f2      	lsls	r2, r6, #31
 8003a8c:	d505      	bpl.n	8003a9a <_dtoa_r+0x4aa>
 8003a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a92:	f7fc fd5d 	bl	8000550 <__aeabi_dmul>
 8003a96:	3501      	adds	r5, #1
 8003a98:	2301      	movs	r3, #1
 8003a9a:	1076      	asrs	r6, r6, #1
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	e772      	b.n	8003986 <_dtoa_r+0x396>
 8003aa0:	2502      	movs	r5, #2
 8003aa2:	e774      	b.n	800398e <_dtoa_r+0x39e>
 8003aa4:	f8cd a020 	str.w	sl, [sp, #32]
 8003aa8:	464f      	mov	r7, r9
 8003aaa:	e791      	b.n	80039d0 <_dtoa_r+0x3e0>
 8003aac:	4b4d      	ldr	r3, [pc, #308]	; (8003be4 <_dtoa_r+0x5f4>)
 8003aae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ab2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d047      	beq.n	8003b4c <_dtoa_r+0x55c>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	494e      	ldr	r1, [pc, #312]	; (8003bfc <_dtoa_r+0x60c>)
 8003ac4:	f7fc fe6e 	bl	80007a4 <__aeabi_ddiv>
 8003ac8:	462a      	mov	r2, r5
 8003aca:	4633      	mov	r3, r6
 8003acc:	f7fc fb88 	bl	80001e0 <__aeabi_dsub>
 8003ad0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003ad4:	465d      	mov	r5, fp
 8003ad6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ada:	f7fc ffe9 	bl	8000ab0 <__aeabi_d2iz>
 8003ade:	4606      	mov	r6, r0
 8003ae0:	f7fc fccc 	bl	800047c <__aeabi_i2d>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003aec:	f7fc fb78 	bl	80001e0 <__aeabi_dsub>
 8003af0:	3630      	adds	r6, #48	; 0x30
 8003af2:	f805 6b01 	strb.w	r6, [r5], #1
 8003af6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003afa:	e9cd 0100 	strd	r0, r1, [sp]
 8003afe:	f7fc ff99 	bl	8000a34 <__aeabi_dcmplt>
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d163      	bne.n	8003bce <_dtoa_r+0x5de>
 8003b06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	4937      	ldr	r1, [pc, #220]	; (8003bec <_dtoa_r+0x5fc>)
 8003b0e:	f7fc fb67 	bl	80001e0 <__aeabi_dsub>
 8003b12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003b16:	f7fc ff8d 	bl	8000a34 <__aeabi_dcmplt>
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	f040 80b7 	bne.w	8003c8e <_dtoa_r+0x69e>
 8003b20:	eba5 030b 	sub.w	r3, r5, fp
 8003b24:	429f      	cmp	r7, r3
 8003b26:	f77f af7c 	ble.w	8003a22 <_dtoa_r+0x432>
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	4b30      	ldr	r3, [pc, #192]	; (8003bf0 <_dtoa_r+0x600>)
 8003b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b32:	f7fc fd0d 	bl	8000550 <__aeabi_dmul>
 8003b36:	2200      	movs	r2, #0
 8003b38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003b3c:	4b2c      	ldr	r3, [pc, #176]	; (8003bf0 <_dtoa_r+0x600>)
 8003b3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b42:	f7fc fd05 	bl	8000550 <__aeabi_dmul>
 8003b46:	e9cd 0100 	strd	r0, r1, [sp]
 8003b4a:	e7c4      	b.n	8003ad6 <_dtoa_r+0x4e6>
 8003b4c:	462a      	mov	r2, r5
 8003b4e:	4633      	mov	r3, r6
 8003b50:	f7fc fcfe 	bl	8000550 <__aeabi_dmul>
 8003b54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003b58:	eb0b 0507 	add.w	r5, fp, r7
 8003b5c:	465e      	mov	r6, fp
 8003b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b62:	f7fc ffa5 	bl	8000ab0 <__aeabi_d2iz>
 8003b66:	4607      	mov	r7, r0
 8003b68:	f7fc fc88 	bl	800047c <__aeabi_i2d>
 8003b6c:	3730      	adds	r7, #48	; 0x30
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b76:	f7fc fb33 	bl	80001e0 <__aeabi_dsub>
 8003b7a:	f806 7b01 	strb.w	r7, [r6], #1
 8003b7e:	42ae      	cmp	r6, r5
 8003b80:	e9cd 0100 	strd	r0, r1, [sp]
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	d126      	bne.n	8003bd8 <_dtoa_r+0x5e8>
 8003b8a:	4b1c      	ldr	r3, [pc, #112]	; (8003bfc <_dtoa_r+0x60c>)
 8003b8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b90:	f7fc fb28 	bl	80001e4 <__adddf3>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b9c:	f7fc ff68 	bl	8000a70 <__aeabi_dcmpgt>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d174      	bne.n	8003c8e <_dtoa_r+0x69e>
 8003ba4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003ba8:	2000      	movs	r0, #0
 8003baa:	4914      	ldr	r1, [pc, #80]	; (8003bfc <_dtoa_r+0x60c>)
 8003bac:	f7fc fb18 	bl	80001e0 <__aeabi_dsub>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bb8:	f7fc ff3c 	bl	8000a34 <__aeabi_dcmplt>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	f43f af30 	beq.w	8003a22 <_dtoa_r+0x432>
 8003bc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003bc6:	2b30      	cmp	r3, #48	; 0x30
 8003bc8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003bcc:	d002      	beq.n	8003bd4 <_dtoa_r+0x5e4>
 8003bce:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003bd2:	e04a      	b.n	8003c6a <_dtoa_r+0x67a>
 8003bd4:	4615      	mov	r5, r2
 8003bd6:	e7f4      	b.n	8003bc2 <_dtoa_r+0x5d2>
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <_dtoa_r+0x600>)
 8003bda:	f7fc fcb9 	bl	8000550 <__aeabi_dmul>
 8003bde:	e9cd 0100 	strd	r0, r1, [sp]
 8003be2:	e7bc      	b.n	8003b5e <_dtoa_r+0x56e>
 8003be4:	08004920 	.word	0x08004920
 8003be8:	080048f8 	.word	0x080048f8
 8003bec:	3ff00000 	.word	0x3ff00000
 8003bf0:	40240000 	.word	0x40240000
 8003bf4:	401c0000 	.word	0x401c0000
 8003bf8:	40140000 	.word	0x40140000
 8003bfc:	3fe00000 	.word	0x3fe00000
 8003c00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003c04:	465d      	mov	r5, fp
 8003c06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	4639      	mov	r1, r7
 8003c0e:	f7fc fdc9 	bl	80007a4 <__aeabi_ddiv>
 8003c12:	f7fc ff4d 	bl	8000ab0 <__aeabi_d2iz>
 8003c16:	4680      	mov	r8, r0
 8003c18:	f7fc fc30 	bl	800047c <__aeabi_i2d>
 8003c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c20:	f7fc fc96 	bl	8000550 <__aeabi_dmul>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4630      	mov	r0, r6
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003c30:	f7fc fad6 	bl	80001e0 <__aeabi_dsub>
 8003c34:	f805 6b01 	strb.w	r6, [r5], #1
 8003c38:	eba5 060b 	sub.w	r6, r5, fp
 8003c3c:	45b1      	cmp	r9, r6
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	d139      	bne.n	8003cb8 <_dtoa_r+0x6c8>
 8003c44:	f7fc face 	bl	80001e4 <__adddf3>
 8003c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c4c:	4606      	mov	r6, r0
 8003c4e:	460f      	mov	r7, r1
 8003c50:	f7fc ff0e 	bl	8000a70 <__aeabi_dcmpgt>
 8003c54:	b9c8      	cbnz	r0, 8003c8a <_dtoa_r+0x69a>
 8003c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	f7fc fedf 	bl	8000a20 <__aeabi_dcmpeq>
 8003c62:	b110      	cbz	r0, 8003c6a <_dtoa_r+0x67a>
 8003c64:	f018 0f01 	tst.w	r8, #1
 8003c68:	d10f      	bne.n	8003c8a <_dtoa_r+0x69a>
 8003c6a:	9904      	ldr	r1, [sp, #16]
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f000 facc 	bl	800420a <_Bfree>
 8003c72:	2300      	movs	r3, #0
 8003c74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003c76:	702b      	strb	r3, [r5, #0]
 8003c78:	f10a 0301 	add.w	r3, sl, #1
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8241 	beq.w	8004108 <_dtoa_r+0xb18>
 8003c86:	601d      	str	r5, [r3, #0]
 8003c88:	e23e      	b.n	8004108 <_dtoa_r+0xb18>
 8003c8a:	f8cd a020 	str.w	sl, [sp, #32]
 8003c8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003c92:	2a39      	cmp	r2, #57	; 0x39
 8003c94:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8003c98:	d108      	bne.n	8003cac <_dtoa_r+0x6bc>
 8003c9a:	459b      	cmp	fp, r3
 8003c9c:	d10a      	bne.n	8003cb4 <_dtoa_r+0x6c4>
 8003c9e:	9b08      	ldr	r3, [sp, #32]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	9308      	str	r3, [sp, #32]
 8003ca4:	2330      	movs	r3, #48	; 0x30
 8003ca6:	f88b 3000 	strb.w	r3, [fp]
 8003caa:	465b      	mov	r3, fp
 8003cac:	781a      	ldrb	r2, [r3, #0]
 8003cae:	3201      	adds	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	e78c      	b.n	8003bce <_dtoa_r+0x5de>
 8003cb4:	461d      	mov	r5, r3
 8003cb6:	e7ea      	b.n	8003c8e <_dtoa_r+0x69e>
 8003cb8:	2200      	movs	r2, #0
 8003cba:	4b9b      	ldr	r3, [pc, #620]	; (8003f28 <_dtoa_r+0x938>)
 8003cbc:	f7fc fc48 	bl	8000550 <__aeabi_dmul>
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	4606      	mov	r6, r0
 8003cc6:	460f      	mov	r7, r1
 8003cc8:	f7fc feaa 	bl	8000a20 <__aeabi_dcmpeq>
 8003ccc:	2800      	cmp	r0, #0
 8003cce:	d09a      	beq.n	8003c06 <_dtoa_r+0x616>
 8003cd0:	e7cb      	b.n	8003c6a <_dtoa_r+0x67a>
 8003cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cd4:	2a00      	cmp	r2, #0
 8003cd6:	f000 808b 	beq.w	8003df0 <_dtoa_r+0x800>
 8003cda:	9a06      	ldr	r2, [sp, #24]
 8003cdc:	2a01      	cmp	r2, #1
 8003cde:	dc6e      	bgt.n	8003dbe <_dtoa_r+0x7ce>
 8003ce0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003ce2:	2a00      	cmp	r2, #0
 8003ce4:	d067      	beq.n	8003db6 <_dtoa_r+0x7c6>
 8003ce6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003cea:	9f07      	ldr	r7, [sp, #28]
 8003cec:	9d05      	ldr	r5, [sp, #20]
 8003cee:	9a05      	ldr	r2, [sp, #20]
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	441a      	add	r2, r3
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	9205      	str	r2, [sp, #20]
 8003cf8:	4498      	add	r8, r3
 8003cfa:	f000 fb26 	bl	800434a <__i2b>
 8003cfe:	4606      	mov	r6, r0
 8003d00:	2d00      	cmp	r5, #0
 8003d02:	dd0c      	ble.n	8003d1e <_dtoa_r+0x72e>
 8003d04:	f1b8 0f00 	cmp.w	r8, #0
 8003d08:	dd09      	ble.n	8003d1e <_dtoa_r+0x72e>
 8003d0a:	4545      	cmp	r5, r8
 8003d0c:	9a05      	ldr	r2, [sp, #20]
 8003d0e:	462b      	mov	r3, r5
 8003d10:	bfa8      	it	ge
 8003d12:	4643      	movge	r3, r8
 8003d14:	1ad2      	subs	r2, r2, r3
 8003d16:	9205      	str	r2, [sp, #20]
 8003d18:	1aed      	subs	r5, r5, r3
 8003d1a:	eba8 0803 	sub.w	r8, r8, r3
 8003d1e:	9b07      	ldr	r3, [sp, #28]
 8003d20:	b1eb      	cbz	r3, 8003d5e <_dtoa_r+0x76e>
 8003d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d067      	beq.n	8003df8 <_dtoa_r+0x808>
 8003d28:	b18f      	cbz	r7, 8003d4e <_dtoa_r+0x75e>
 8003d2a:	4631      	mov	r1, r6
 8003d2c:	463a      	mov	r2, r7
 8003d2e:	4620      	mov	r0, r4
 8003d30:	f000 fbaa 	bl	8004488 <__pow5mult>
 8003d34:	9a04      	ldr	r2, [sp, #16]
 8003d36:	4601      	mov	r1, r0
 8003d38:	4606      	mov	r6, r0
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f000 fb0e 	bl	800435c <__multiply>
 8003d40:	9904      	ldr	r1, [sp, #16]
 8003d42:	9008      	str	r0, [sp, #32]
 8003d44:	4620      	mov	r0, r4
 8003d46:	f000 fa60 	bl	800420a <_Bfree>
 8003d4a:	9b08      	ldr	r3, [sp, #32]
 8003d4c:	9304      	str	r3, [sp, #16]
 8003d4e:	9b07      	ldr	r3, [sp, #28]
 8003d50:	1bda      	subs	r2, r3, r7
 8003d52:	d004      	beq.n	8003d5e <_dtoa_r+0x76e>
 8003d54:	9904      	ldr	r1, [sp, #16]
 8003d56:	4620      	mov	r0, r4
 8003d58:	f000 fb96 	bl	8004488 <__pow5mult>
 8003d5c:	9004      	str	r0, [sp, #16]
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4620      	mov	r0, r4
 8003d62:	f000 faf2 	bl	800434a <__i2b>
 8003d66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d68:	4607      	mov	r7, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 81d0 	beq.w	8004110 <_dtoa_r+0xb20>
 8003d70:	461a      	mov	r2, r3
 8003d72:	4601      	mov	r1, r0
 8003d74:	4620      	mov	r0, r4
 8003d76:	f000 fb87 	bl	8004488 <__pow5mult>
 8003d7a:	9b06      	ldr	r3, [sp, #24]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	4607      	mov	r7, r0
 8003d80:	dc40      	bgt.n	8003e04 <_dtoa_r+0x814>
 8003d82:	9b00      	ldr	r3, [sp, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d139      	bne.n	8003dfc <_dtoa_r+0x80c>
 8003d88:	9b01      	ldr	r3, [sp, #4]
 8003d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d136      	bne.n	8003e00 <_dtoa_r+0x810>
 8003d92:	9b01      	ldr	r3, [sp, #4]
 8003d94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d98:	0d1b      	lsrs	r3, r3, #20
 8003d9a:	051b      	lsls	r3, r3, #20
 8003d9c:	b12b      	cbz	r3, 8003daa <_dtoa_r+0x7ba>
 8003d9e:	9b05      	ldr	r3, [sp, #20]
 8003da0:	3301      	adds	r3, #1
 8003da2:	9305      	str	r3, [sp, #20]
 8003da4:	f108 0801 	add.w	r8, r8, #1
 8003da8:	2301      	movs	r3, #1
 8003daa:	9307      	str	r3, [sp, #28]
 8003dac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d12a      	bne.n	8003e08 <_dtoa_r+0x818>
 8003db2:	2001      	movs	r0, #1
 8003db4:	e030      	b.n	8003e18 <_dtoa_r+0x828>
 8003db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003db8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003dbc:	e795      	b.n	8003cea <_dtoa_r+0x6fa>
 8003dbe:	9b07      	ldr	r3, [sp, #28]
 8003dc0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8003dc4:	42bb      	cmp	r3, r7
 8003dc6:	bfbf      	itttt	lt
 8003dc8:	9b07      	ldrlt	r3, [sp, #28]
 8003dca:	9707      	strlt	r7, [sp, #28]
 8003dcc:	1afa      	sublt	r2, r7, r3
 8003dce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003dd0:	bfbb      	ittet	lt
 8003dd2:	189b      	addlt	r3, r3, r2
 8003dd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003dd6:	1bdf      	subge	r7, r3, r7
 8003dd8:	2700      	movlt	r7, #0
 8003dda:	f1b9 0f00 	cmp.w	r9, #0
 8003dde:	bfb5      	itete	lt
 8003de0:	9b05      	ldrlt	r3, [sp, #20]
 8003de2:	9d05      	ldrge	r5, [sp, #20]
 8003de4:	eba3 0509 	sublt.w	r5, r3, r9
 8003de8:	464b      	movge	r3, r9
 8003dea:	bfb8      	it	lt
 8003dec:	2300      	movlt	r3, #0
 8003dee:	e77e      	b.n	8003cee <_dtoa_r+0x6fe>
 8003df0:	9f07      	ldr	r7, [sp, #28]
 8003df2:	9d05      	ldr	r5, [sp, #20]
 8003df4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003df6:	e783      	b.n	8003d00 <_dtoa_r+0x710>
 8003df8:	9a07      	ldr	r2, [sp, #28]
 8003dfa:	e7ab      	b.n	8003d54 <_dtoa_r+0x764>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e7d4      	b.n	8003daa <_dtoa_r+0x7ba>
 8003e00:	9b00      	ldr	r3, [sp, #0]
 8003e02:	e7d2      	b.n	8003daa <_dtoa_r+0x7ba>
 8003e04:	2300      	movs	r3, #0
 8003e06:	9307      	str	r3, [sp, #28]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003e0e:	6918      	ldr	r0, [r3, #16]
 8003e10:	f000 fa4d 	bl	80042ae <__hi0bits>
 8003e14:	f1c0 0020 	rsb	r0, r0, #32
 8003e18:	4440      	add	r0, r8
 8003e1a:	f010 001f 	ands.w	r0, r0, #31
 8003e1e:	d047      	beq.n	8003eb0 <_dtoa_r+0x8c0>
 8003e20:	f1c0 0320 	rsb	r3, r0, #32
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	dd3b      	ble.n	8003ea0 <_dtoa_r+0x8b0>
 8003e28:	9b05      	ldr	r3, [sp, #20]
 8003e2a:	f1c0 001c 	rsb	r0, r0, #28
 8003e2e:	4403      	add	r3, r0
 8003e30:	9305      	str	r3, [sp, #20]
 8003e32:	4405      	add	r5, r0
 8003e34:	4480      	add	r8, r0
 8003e36:	9b05      	ldr	r3, [sp, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	dd05      	ble.n	8003e48 <_dtoa_r+0x858>
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	9904      	ldr	r1, [sp, #16]
 8003e40:	4620      	mov	r0, r4
 8003e42:	f000 fb6f 	bl	8004524 <__lshift>
 8003e46:	9004      	str	r0, [sp, #16]
 8003e48:	f1b8 0f00 	cmp.w	r8, #0
 8003e4c:	dd05      	ble.n	8003e5a <_dtoa_r+0x86a>
 8003e4e:	4639      	mov	r1, r7
 8003e50:	4642      	mov	r2, r8
 8003e52:	4620      	mov	r0, r4
 8003e54:	f000 fb66 	bl	8004524 <__lshift>
 8003e58:	4607      	mov	r7, r0
 8003e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003e5c:	b353      	cbz	r3, 8003eb4 <_dtoa_r+0x8c4>
 8003e5e:	4639      	mov	r1, r7
 8003e60:	9804      	ldr	r0, [sp, #16]
 8003e62:	f000 fbb3 	bl	80045cc <__mcmp>
 8003e66:	2800      	cmp	r0, #0
 8003e68:	da24      	bge.n	8003eb4 <_dtoa_r+0x8c4>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	220a      	movs	r2, #10
 8003e6e:	9904      	ldr	r1, [sp, #16]
 8003e70:	4620      	mov	r0, r4
 8003e72:	f000 f9e1 	bl	8004238 <__multadd>
 8003e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e78:	9004      	str	r0, [sp, #16]
 8003e7a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 814d 	beq.w	800411e <_dtoa_r+0xb2e>
 8003e84:	2300      	movs	r3, #0
 8003e86:	4631      	mov	r1, r6
 8003e88:	220a      	movs	r2, #10
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f000 f9d4 	bl	8004238 <__multadd>
 8003e90:	9b02      	ldr	r3, [sp, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	4606      	mov	r6, r0
 8003e96:	dc4f      	bgt.n	8003f38 <_dtoa_r+0x948>
 8003e98:	9b06      	ldr	r3, [sp, #24]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	dd4c      	ble.n	8003f38 <_dtoa_r+0x948>
 8003e9e:	e011      	b.n	8003ec4 <_dtoa_r+0x8d4>
 8003ea0:	d0c9      	beq.n	8003e36 <_dtoa_r+0x846>
 8003ea2:	9a05      	ldr	r2, [sp, #20]
 8003ea4:	331c      	adds	r3, #28
 8003ea6:	441a      	add	r2, r3
 8003ea8:	9205      	str	r2, [sp, #20]
 8003eaa:	441d      	add	r5, r3
 8003eac:	4498      	add	r8, r3
 8003eae:	e7c2      	b.n	8003e36 <_dtoa_r+0x846>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	e7f6      	b.n	8003ea2 <_dtoa_r+0x8b2>
 8003eb4:	f1b9 0f00 	cmp.w	r9, #0
 8003eb8:	dc38      	bgt.n	8003f2c <_dtoa_r+0x93c>
 8003eba:	9b06      	ldr	r3, [sp, #24]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	dd35      	ble.n	8003f2c <_dtoa_r+0x93c>
 8003ec0:	f8cd 9008 	str.w	r9, [sp, #8]
 8003ec4:	9b02      	ldr	r3, [sp, #8]
 8003ec6:	b963      	cbnz	r3, 8003ee2 <_dtoa_r+0x8f2>
 8003ec8:	4639      	mov	r1, r7
 8003eca:	2205      	movs	r2, #5
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f000 f9b3 	bl	8004238 <__multadd>
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	4607      	mov	r7, r0
 8003ed6:	9804      	ldr	r0, [sp, #16]
 8003ed8:	f000 fb78 	bl	80045cc <__mcmp>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f73f adcc 	bgt.w	8003a7a <_dtoa_r+0x48a>
 8003ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ee4:	465d      	mov	r5, fp
 8003ee6:	ea6f 0a03 	mvn.w	sl, r3
 8003eea:	f04f 0900 	mov.w	r9, #0
 8003eee:	4639      	mov	r1, r7
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 f98a 	bl	800420a <_Bfree>
 8003ef6:	2e00      	cmp	r6, #0
 8003ef8:	f43f aeb7 	beq.w	8003c6a <_dtoa_r+0x67a>
 8003efc:	f1b9 0f00 	cmp.w	r9, #0
 8003f00:	d005      	beq.n	8003f0e <_dtoa_r+0x91e>
 8003f02:	45b1      	cmp	r9, r6
 8003f04:	d003      	beq.n	8003f0e <_dtoa_r+0x91e>
 8003f06:	4649      	mov	r1, r9
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f000 f97e 	bl	800420a <_Bfree>
 8003f0e:	4631      	mov	r1, r6
 8003f10:	4620      	mov	r0, r4
 8003f12:	f000 f97a 	bl	800420a <_Bfree>
 8003f16:	e6a8      	b.n	8003c6a <_dtoa_r+0x67a>
 8003f18:	2700      	movs	r7, #0
 8003f1a:	463e      	mov	r6, r7
 8003f1c:	e7e1      	b.n	8003ee2 <_dtoa_r+0x8f2>
 8003f1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003f22:	463e      	mov	r6, r7
 8003f24:	e5a9      	b.n	8003a7a <_dtoa_r+0x48a>
 8003f26:	bf00      	nop
 8003f28:	40240000 	.word	0x40240000
 8003f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80fa 	beq.w	800412c <_dtoa_r+0xb3c>
 8003f38:	2d00      	cmp	r5, #0
 8003f3a:	dd05      	ble.n	8003f48 <_dtoa_r+0x958>
 8003f3c:	4631      	mov	r1, r6
 8003f3e:	462a      	mov	r2, r5
 8003f40:	4620      	mov	r0, r4
 8003f42:	f000 faef 	bl	8004524 <__lshift>
 8003f46:	4606      	mov	r6, r0
 8003f48:	9b07      	ldr	r3, [sp, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04c      	beq.n	8003fe8 <_dtoa_r+0x9f8>
 8003f4e:	6871      	ldr	r1, [r6, #4]
 8003f50:	4620      	mov	r0, r4
 8003f52:	f000 f926 	bl	80041a2 <_Balloc>
 8003f56:	6932      	ldr	r2, [r6, #16]
 8003f58:	3202      	adds	r2, #2
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	0092      	lsls	r2, r2, #2
 8003f5e:	f106 010c 	add.w	r1, r6, #12
 8003f62:	300c      	adds	r0, #12
 8003f64:	f000 f912 	bl	800418c <memcpy>
 8003f68:	2201      	movs	r2, #1
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f000 fad9 	bl	8004524 <__lshift>
 8003f72:	9b00      	ldr	r3, [sp, #0]
 8003f74:	f8cd b014 	str.w	fp, [sp, #20]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	46b1      	mov	r9, r6
 8003f7e:	9307      	str	r3, [sp, #28]
 8003f80:	4606      	mov	r6, r0
 8003f82:	4639      	mov	r1, r7
 8003f84:	9804      	ldr	r0, [sp, #16]
 8003f86:	f7ff faa6 	bl	80034d6 <quorem>
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003f92:	9804      	ldr	r0, [sp, #16]
 8003f94:	f000 fb1a 	bl	80045cc <__mcmp>
 8003f98:	4632      	mov	r2, r6
 8003f9a:	9000      	str	r0, [sp, #0]
 8003f9c:	4639      	mov	r1, r7
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f000 fb2e 	bl	8004600 <__mdiff>
 8003fa4:	68c3      	ldr	r3, [r0, #12]
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	bb03      	cbnz	r3, 8003fec <_dtoa_r+0x9fc>
 8003faa:	4601      	mov	r1, r0
 8003fac:	9008      	str	r0, [sp, #32]
 8003fae:	9804      	ldr	r0, [sp, #16]
 8003fb0:	f000 fb0c 	bl	80045cc <__mcmp>
 8003fb4:	9a08      	ldr	r2, [sp, #32]
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4611      	mov	r1, r2
 8003fba:	4620      	mov	r0, r4
 8003fbc:	9308      	str	r3, [sp, #32]
 8003fbe:	f000 f924 	bl	800420a <_Bfree>
 8003fc2:	9b08      	ldr	r3, [sp, #32]
 8003fc4:	b9a3      	cbnz	r3, 8003ff0 <_dtoa_r+0xa00>
 8003fc6:	9a06      	ldr	r2, [sp, #24]
 8003fc8:	b992      	cbnz	r2, 8003ff0 <_dtoa_r+0xa00>
 8003fca:	9a07      	ldr	r2, [sp, #28]
 8003fcc:	b982      	cbnz	r2, 8003ff0 <_dtoa_r+0xa00>
 8003fce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003fd2:	d029      	beq.n	8004028 <_dtoa_r+0xa38>
 8003fd4:	9b00      	ldr	r3, [sp, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	dd01      	ble.n	8003fde <_dtoa_r+0x9ee>
 8003fda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003fde:	9b05      	ldr	r3, [sp, #20]
 8003fe0:	1c5d      	adds	r5, r3, #1
 8003fe2:	f883 8000 	strb.w	r8, [r3]
 8003fe6:	e782      	b.n	8003eee <_dtoa_r+0x8fe>
 8003fe8:	4630      	mov	r0, r6
 8003fea:	e7c2      	b.n	8003f72 <_dtoa_r+0x982>
 8003fec:	2301      	movs	r3, #1
 8003fee:	e7e3      	b.n	8003fb8 <_dtoa_r+0x9c8>
 8003ff0:	9a00      	ldr	r2, [sp, #0]
 8003ff2:	2a00      	cmp	r2, #0
 8003ff4:	db04      	blt.n	8004000 <_dtoa_r+0xa10>
 8003ff6:	d125      	bne.n	8004044 <_dtoa_r+0xa54>
 8003ff8:	9a06      	ldr	r2, [sp, #24]
 8003ffa:	bb1a      	cbnz	r2, 8004044 <_dtoa_r+0xa54>
 8003ffc:	9a07      	ldr	r2, [sp, #28]
 8003ffe:	bb0a      	cbnz	r2, 8004044 <_dtoa_r+0xa54>
 8004000:	2b00      	cmp	r3, #0
 8004002:	ddec      	ble.n	8003fde <_dtoa_r+0x9ee>
 8004004:	2201      	movs	r2, #1
 8004006:	9904      	ldr	r1, [sp, #16]
 8004008:	4620      	mov	r0, r4
 800400a:	f000 fa8b 	bl	8004524 <__lshift>
 800400e:	4639      	mov	r1, r7
 8004010:	9004      	str	r0, [sp, #16]
 8004012:	f000 fadb 	bl	80045cc <__mcmp>
 8004016:	2800      	cmp	r0, #0
 8004018:	dc03      	bgt.n	8004022 <_dtoa_r+0xa32>
 800401a:	d1e0      	bne.n	8003fde <_dtoa_r+0x9ee>
 800401c:	f018 0f01 	tst.w	r8, #1
 8004020:	d0dd      	beq.n	8003fde <_dtoa_r+0x9ee>
 8004022:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004026:	d1d8      	bne.n	8003fda <_dtoa_r+0x9ea>
 8004028:	9b05      	ldr	r3, [sp, #20]
 800402a:	9a05      	ldr	r2, [sp, #20]
 800402c:	1c5d      	adds	r5, r3, #1
 800402e:	2339      	movs	r3, #57	; 0x39
 8004030:	7013      	strb	r3, [r2, #0]
 8004032:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004036:	2b39      	cmp	r3, #57	; 0x39
 8004038:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800403c:	d04f      	beq.n	80040de <_dtoa_r+0xaee>
 800403e:	3301      	adds	r3, #1
 8004040:	7013      	strb	r3, [r2, #0]
 8004042:	e754      	b.n	8003eee <_dtoa_r+0x8fe>
 8004044:	9a05      	ldr	r2, [sp, #20]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f102 0501 	add.w	r5, r2, #1
 800404c:	dd06      	ble.n	800405c <_dtoa_r+0xa6c>
 800404e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004052:	d0e9      	beq.n	8004028 <_dtoa_r+0xa38>
 8004054:	f108 0801 	add.w	r8, r8, #1
 8004058:	9b05      	ldr	r3, [sp, #20]
 800405a:	e7c2      	b.n	8003fe2 <_dtoa_r+0x9f2>
 800405c:	9a02      	ldr	r2, [sp, #8]
 800405e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004062:	eba5 030b 	sub.w	r3, r5, fp
 8004066:	4293      	cmp	r3, r2
 8004068:	d021      	beq.n	80040ae <_dtoa_r+0xabe>
 800406a:	2300      	movs	r3, #0
 800406c:	220a      	movs	r2, #10
 800406e:	9904      	ldr	r1, [sp, #16]
 8004070:	4620      	mov	r0, r4
 8004072:	f000 f8e1 	bl	8004238 <__multadd>
 8004076:	45b1      	cmp	r9, r6
 8004078:	9004      	str	r0, [sp, #16]
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	f04f 020a 	mov.w	r2, #10
 8004082:	4649      	mov	r1, r9
 8004084:	4620      	mov	r0, r4
 8004086:	d105      	bne.n	8004094 <_dtoa_r+0xaa4>
 8004088:	f000 f8d6 	bl	8004238 <__multadd>
 800408c:	4681      	mov	r9, r0
 800408e:	4606      	mov	r6, r0
 8004090:	9505      	str	r5, [sp, #20]
 8004092:	e776      	b.n	8003f82 <_dtoa_r+0x992>
 8004094:	f000 f8d0 	bl	8004238 <__multadd>
 8004098:	4631      	mov	r1, r6
 800409a:	4681      	mov	r9, r0
 800409c:	2300      	movs	r3, #0
 800409e:	220a      	movs	r2, #10
 80040a0:	4620      	mov	r0, r4
 80040a2:	f000 f8c9 	bl	8004238 <__multadd>
 80040a6:	4606      	mov	r6, r0
 80040a8:	e7f2      	b.n	8004090 <_dtoa_r+0xaa0>
 80040aa:	f04f 0900 	mov.w	r9, #0
 80040ae:	2201      	movs	r2, #1
 80040b0:	9904      	ldr	r1, [sp, #16]
 80040b2:	4620      	mov	r0, r4
 80040b4:	f000 fa36 	bl	8004524 <__lshift>
 80040b8:	4639      	mov	r1, r7
 80040ba:	9004      	str	r0, [sp, #16]
 80040bc:	f000 fa86 	bl	80045cc <__mcmp>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	dcb6      	bgt.n	8004032 <_dtoa_r+0xa42>
 80040c4:	d102      	bne.n	80040cc <_dtoa_r+0xadc>
 80040c6:	f018 0f01 	tst.w	r8, #1
 80040ca:	d1b2      	bne.n	8004032 <_dtoa_r+0xa42>
 80040cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80040d6:	f47f af0a 	bne.w	8003eee <_dtoa_r+0x8fe>
 80040da:	4615      	mov	r5, r2
 80040dc:	e7f6      	b.n	80040cc <_dtoa_r+0xadc>
 80040de:	4593      	cmp	fp, r2
 80040e0:	d105      	bne.n	80040ee <_dtoa_r+0xafe>
 80040e2:	2331      	movs	r3, #49	; 0x31
 80040e4:	f10a 0a01 	add.w	sl, sl, #1
 80040e8:	f88b 3000 	strb.w	r3, [fp]
 80040ec:	e6ff      	b.n	8003eee <_dtoa_r+0x8fe>
 80040ee:	4615      	mov	r5, r2
 80040f0:	e79f      	b.n	8004032 <_dtoa_r+0xa42>
 80040f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004158 <_dtoa_r+0xb68>
 80040f6:	e007      	b.n	8004108 <_dtoa_r+0xb18>
 80040f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800415c <_dtoa_r+0xb6c>
 80040fe:	b11b      	cbz	r3, 8004108 <_dtoa_r+0xb18>
 8004100:	f10b 0308 	add.w	r3, fp, #8
 8004104:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4658      	mov	r0, fp
 800410a:	b017      	add	sp, #92	; 0x5c
 800410c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004110:	9b06      	ldr	r3, [sp, #24]
 8004112:	2b01      	cmp	r3, #1
 8004114:	f77f ae35 	ble.w	8003d82 <_dtoa_r+0x792>
 8004118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800411a:	9307      	str	r3, [sp, #28]
 800411c:	e649      	b.n	8003db2 <_dtoa_r+0x7c2>
 800411e:	9b02      	ldr	r3, [sp, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	dc03      	bgt.n	800412c <_dtoa_r+0xb3c>
 8004124:	9b06      	ldr	r3, [sp, #24]
 8004126:	2b02      	cmp	r3, #2
 8004128:	f73f aecc 	bgt.w	8003ec4 <_dtoa_r+0x8d4>
 800412c:	465d      	mov	r5, fp
 800412e:	4639      	mov	r1, r7
 8004130:	9804      	ldr	r0, [sp, #16]
 8004132:	f7ff f9d0 	bl	80034d6 <quorem>
 8004136:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800413a:	f805 8b01 	strb.w	r8, [r5], #1
 800413e:	9a02      	ldr	r2, [sp, #8]
 8004140:	eba5 030b 	sub.w	r3, r5, fp
 8004144:	429a      	cmp	r2, r3
 8004146:	ddb0      	ble.n	80040aa <_dtoa_r+0xaba>
 8004148:	2300      	movs	r3, #0
 800414a:	220a      	movs	r2, #10
 800414c:	9904      	ldr	r1, [sp, #16]
 800414e:	4620      	mov	r0, r4
 8004150:	f000 f872 	bl	8004238 <__multadd>
 8004154:	9004      	str	r0, [sp, #16]
 8004156:	e7ea      	b.n	800412e <_dtoa_r+0xb3e>
 8004158:	080048e8 	.word	0x080048e8
 800415c:	080048ea 	.word	0x080048ea

08004160 <_localeconv_r>:
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <_localeconv_r+0x14>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6a18      	ldr	r0, [r3, #32]
 8004166:	4b04      	ldr	r3, [pc, #16]	; (8004178 <_localeconv_r+0x18>)
 8004168:	2800      	cmp	r0, #0
 800416a:	bf08      	it	eq
 800416c:	4618      	moveq	r0, r3
 800416e:	30f0      	adds	r0, #240	; 0xf0
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	2000000c 	.word	0x2000000c
 8004178:	20000070 	.word	0x20000070

0800417c <malloc>:
 800417c:	4b02      	ldr	r3, [pc, #8]	; (8004188 <malloc+0xc>)
 800417e:	4601      	mov	r1, r0
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	f000 baf7 	b.w	8004774 <_malloc_r>
 8004186:	bf00      	nop
 8004188:	2000000c 	.word	0x2000000c

0800418c <memcpy>:
 800418c:	b510      	push	{r4, lr}
 800418e:	1e43      	subs	r3, r0, #1
 8004190:	440a      	add	r2, r1
 8004192:	4291      	cmp	r1, r2
 8004194:	d100      	bne.n	8004198 <memcpy+0xc>
 8004196:	bd10      	pop	{r4, pc}
 8004198:	f811 4b01 	ldrb.w	r4, [r1], #1
 800419c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041a0:	e7f7      	b.n	8004192 <memcpy+0x6>

080041a2 <_Balloc>:
 80041a2:	b570      	push	{r4, r5, r6, lr}
 80041a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80041a6:	4604      	mov	r4, r0
 80041a8:	460e      	mov	r6, r1
 80041aa:	b93d      	cbnz	r5, 80041bc <_Balloc+0x1a>
 80041ac:	2010      	movs	r0, #16
 80041ae:	f7ff ffe5 	bl	800417c <malloc>
 80041b2:	6260      	str	r0, [r4, #36]	; 0x24
 80041b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80041b8:	6005      	str	r5, [r0, #0]
 80041ba:	60c5      	str	r5, [r0, #12]
 80041bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80041be:	68eb      	ldr	r3, [r5, #12]
 80041c0:	b183      	cbz	r3, 80041e4 <_Balloc+0x42>
 80041c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80041ca:	b9b8      	cbnz	r0, 80041fc <_Balloc+0x5a>
 80041cc:	2101      	movs	r1, #1
 80041ce:	fa01 f506 	lsl.w	r5, r1, r6
 80041d2:	1d6a      	adds	r2, r5, #5
 80041d4:	0092      	lsls	r2, r2, #2
 80041d6:	4620      	mov	r0, r4
 80041d8:	f000 fabe 	bl	8004758 <_calloc_r>
 80041dc:	b160      	cbz	r0, 80041f8 <_Balloc+0x56>
 80041de:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80041e2:	e00e      	b.n	8004202 <_Balloc+0x60>
 80041e4:	2221      	movs	r2, #33	; 0x21
 80041e6:	2104      	movs	r1, #4
 80041e8:	4620      	mov	r0, r4
 80041ea:	f000 fab5 	bl	8004758 <_calloc_r>
 80041ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041f0:	60e8      	str	r0, [r5, #12]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1e4      	bne.n	80041c2 <_Balloc+0x20>
 80041f8:	2000      	movs	r0, #0
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	6802      	ldr	r2, [r0, #0]
 80041fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004202:	2300      	movs	r3, #0
 8004204:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004208:	e7f7      	b.n	80041fa <_Balloc+0x58>

0800420a <_Bfree>:
 800420a:	b570      	push	{r4, r5, r6, lr}
 800420c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800420e:	4606      	mov	r6, r0
 8004210:	460d      	mov	r5, r1
 8004212:	b93c      	cbnz	r4, 8004224 <_Bfree+0x1a>
 8004214:	2010      	movs	r0, #16
 8004216:	f7ff ffb1 	bl	800417c <malloc>
 800421a:	6270      	str	r0, [r6, #36]	; 0x24
 800421c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004220:	6004      	str	r4, [r0, #0]
 8004222:	60c4      	str	r4, [r0, #12]
 8004224:	b13d      	cbz	r5, 8004236 <_Bfree+0x2c>
 8004226:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004228:	686a      	ldr	r2, [r5, #4]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004230:	6029      	str	r1, [r5, #0]
 8004232:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004236:	bd70      	pop	{r4, r5, r6, pc}

08004238 <__multadd>:
 8004238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800423c:	690d      	ldr	r5, [r1, #16]
 800423e:	461f      	mov	r7, r3
 8004240:	4606      	mov	r6, r0
 8004242:	460c      	mov	r4, r1
 8004244:	f101 0c14 	add.w	ip, r1, #20
 8004248:	2300      	movs	r3, #0
 800424a:	f8dc 0000 	ldr.w	r0, [ip]
 800424e:	b281      	uxth	r1, r0
 8004250:	fb02 7101 	mla	r1, r2, r1, r7
 8004254:	0c0f      	lsrs	r7, r1, #16
 8004256:	0c00      	lsrs	r0, r0, #16
 8004258:	fb02 7000 	mla	r0, r2, r0, r7
 800425c:	b289      	uxth	r1, r1
 800425e:	3301      	adds	r3, #1
 8004260:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004264:	429d      	cmp	r5, r3
 8004266:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800426a:	f84c 1b04 	str.w	r1, [ip], #4
 800426e:	dcec      	bgt.n	800424a <__multadd+0x12>
 8004270:	b1d7      	cbz	r7, 80042a8 <__multadd+0x70>
 8004272:	68a3      	ldr	r3, [r4, #8]
 8004274:	42ab      	cmp	r3, r5
 8004276:	dc12      	bgt.n	800429e <__multadd+0x66>
 8004278:	6861      	ldr	r1, [r4, #4]
 800427a:	4630      	mov	r0, r6
 800427c:	3101      	adds	r1, #1
 800427e:	f7ff ff90 	bl	80041a2 <_Balloc>
 8004282:	6922      	ldr	r2, [r4, #16]
 8004284:	3202      	adds	r2, #2
 8004286:	f104 010c 	add.w	r1, r4, #12
 800428a:	4680      	mov	r8, r0
 800428c:	0092      	lsls	r2, r2, #2
 800428e:	300c      	adds	r0, #12
 8004290:	f7ff ff7c 	bl	800418c <memcpy>
 8004294:	4621      	mov	r1, r4
 8004296:	4630      	mov	r0, r6
 8004298:	f7ff ffb7 	bl	800420a <_Bfree>
 800429c:	4644      	mov	r4, r8
 800429e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80042a2:	3501      	adds	r5, #1
 80042a4:	615f      	str	r7, [r3, #20]
 80042a6:	6125      	str	r5, [r4, #16]
 80042a8:	4620      	mov	r0, r4
 80042aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080042ae <__hi0bits>:
 80042ae:	0c02      	lsrs	r2, r0, #16
 80042b0:	0412      	lsls	r2, r2, #16
 80042b2:	4603      	mov	r3, r0
 80042b4:	b9b2      	cbnz	r2, 80042e4 <__hi0bits+0x36>
 80042b6:	0403      	lsls	r3, r0, #16
 80042b8:	2010      	movs	r0, #16
 80042ba:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80042be:	bf04      	itt	eq
 80042c0:	021b      	lsleq	r3, r3, #8
 80042c2:	3008      	addeq	r0, #8
 80042c4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80042c8:	bf04      	itt	eq
 80042ca:	011b      	lsleq	r3, r3, #4
 80042cc:	3004      	addeq	r0, #4
 80042ce:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80042d2:	bf04      	itt	eq
 80042d4:	009b      	lsleq	r3, r3, #2
 80042d6:	3002      	addeq	r0, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	db06      	blt.n	80042ea <__hi0bits+0x3c>
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	d503      	bpl.n	80042e8 <__hi0bits+0x3a>
 80042e0:	3001      	adds	r0, #1
 80042e2:	4770      	bx	lr
 80042e4:	2000      	movs	r0, #0
 80042e6:	e7e8      	b.n	80042ba <__hi0bits+0xc>
 80042e8:	2020      	movs	r0, #32
 80042ea:	4770      	bx	lr

080042ec <__lo0bits>:
 80042ec:	6803      	ldr	r3, [r0, #0]
 80042ee:	f013 0207 	ands.w	r2, r3, #7
 80042f2:	4601      	mov	r1, r0
 80042f4:	d00b      	beq.n	800430e <__lo0bits+0x22>
 80042f6:	07da      	lsls	r2, r3, #31
 80042f8:	d423      	bmi.n	8004342 <__lo0bits+0x56>
 80042fa:	0798      	lsls	r0, r3, #30
 80042fc:	bf49      	itett	mi
 80042fe:	085b      	lsrmi	r3, r3, #1
 8004300:	089b      	lsrpl	r3, r3, #2
 8004302:	2001      	movmi	r0, #1
 8004304:	600b      	strmi	r3, [r1, #0]
 8004306:	bf5c      	itt	pl
 8004308:	600b      	strpl	r3, [r1, #0]
 800430a:	2002      	movpl	r0, #2
 800430c:	4770      	bx	lr
 800430e:	b298      	uxth	r0, r3
 8004310:	b9a8      	cbnz	r0, 800433e <__lo0bits+0x52>
 8004312:	0c1b      	lsrs	r3, r3, #16
 8004314:	2010      	movs	r0, #16
 8004316:	f013 0fff 	tst.w	r3, #255	; 0xff
 800431a:	bf04      	itt	eq
 800431c:	0a1b      	lsreq	r3, r3, #8
 800431e:	3008      	addeq	r0, #8
 8004320:	071a      	lsls	r2, r3, #28
 8004322:	bf04      	itt	eq
 8004324:	091b      	lsreq	r3, r3, #4
 8004326:	3004      	addeq	r0, #4
 8004328:	079a      	lsls	r2, r3, #30
 800432a:	bf04      	itt	eq
 800432c:	089b      	lsreq	r3, r3, #2
 800432e:	3002      	addeq	r0, #2
 8004330:	07da      	lsls	r2, r3, #31
 8004332:	d402      	bmi.n	800433a <__lo0bits+0x4e>
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	d006      	beq.n	8004346 <__lo0bits+0x5a>
 8004338:	3001      	adds	r0, #1
 800433a:	600b      	str	r3, [r1, #0]
 800433c:	4770      	bx	lr
 800433e:	4610      	mov	r0, r2
 8004340:	e7e9      	b.n	8004316 <__lo0bits+0x2a>
 8004342:	2000      	movs	r0, #0
 8004344:	4770      	bx	lr
 8004346:	2020      	movs	r0, #32
 8004348:	4770      	bx	lr

0800434a <__i2b>:
 800434a:	b510      	push	{r4, lr}
 800434c:	460c      	mov	r4, r1
 800434e:	2101      	movs	r1, #1
 8004350:	f7ff ff27 	bl	80041a2 <_Balloc>
 8004354:	2201      	movs	r2, #1
 8004356:	6144      	str	r4, [r0, #20]
 8004358:	6102      	str	r2, [r0, #16]
 800435a:	bd10      	pop	{r4, pc}

0800435c <__multiply>:
 800435c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004360:	4614      	mov	r4, r2
 8004362:	690a      	ldr	r2, [r1, #16]
 8004364:	6923      	ldr	r3, [r4, #16]
 8004366:	429a      	cmp	r2, r3
 8004368:	bfb8      	it	lt
 800436a:	460b      	movlt	r3, r1
 800436c:	4688      	mov	r8, r1
 800436e:	bfbc      	itt	lt
 8004370:	46a0      	movlt	r8, r4
 8004372:	461c      	movlt	r4, r3
 8004374:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004378:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800437c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004380:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004384:	eb07 0609 	add.w	r6, r7, r9
 8004388:	42b3      	cmp	r3, r6
 800438a:	bfb8      	it	lt
 800438c:	3101      	addlt	r1, #1
 800438e:	f7ff ff08 	bl	80041a2 <_Balloc>
 8004392:	f100 0514 	add.w	r5, r0, #20
 8004396:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800439a:	462b      	mov	r3, r5
 800439c:	2200      	movs	r2, #0
 800439e:	4573      	cmp	r3, lr
 80043a0:	d316      	bcc.n	80043d0 <__multiply+0x74>
 80043a2:	f104 0214 	add.w	r2, r4, #20
 80043a6:	f108 0114 	add.w	r1, r8, #20
 80043aa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80043ae:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	9b00      	ldr	r3, [sp, #0]
 80043b6:	9201      	str	r2, [sp, #4]
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d80c      	bhi.n	80043d6 <__multiply+0x7a>
 80043bc:	2e00      	cmp	r6, #0
 80043be:	dd03      	ble.n	80043c8 <__multiply+0x6c>
 80043c0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d05d      	beq.n	8004484 <__multiply+0x128>
 80043c8:	6106      	str	r6, [r0, #16]
 80043ca:	b003      	add	sp, #12
 80043cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d0:	f843 2b04 	str.w	r2, [r3], #4
 80043d4:	e7e3      	b.n	800439e <__multiply+0x42>
 80043d6:	f8b2 b000 	ldrh.w	fp, [r2]
 80043da:	f1bb 0f00 	cmp.w	fp, #0
 80043de:	d023      	beq.n	8004428 <__multiply+0xcc>
 80043e0:	4689      	mov	r9, r1
 80043e2:	46ac      	mov	ip, r5
 80043e4:	f04f 0800 	mov.w	r8, #0
 80043e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80043ec:	f8dc a000 	ldr.w	sl, [ip]
 80043f0:	b2a3      	uxth	r3, r4
 80043f2:	fa1f fa8a 	uxth.w	sl, sl
 80043f6:	fb0b a303 	mla	r3, fp, r3, sl
 80043fa:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80043fe:	f8dc 4000 	ldr.w	r4, [ip]
 8004402:	4443      	add	r3, r8
 8004404:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004408:	fb0b 840a 	mla	r4, fp, sl, r8
 800440c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004410:	46e2      	mov	sl, ip
 8004412:	b29b      	uxth	r3, r3
 8004414:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004418:	454f      	cmp	r7, r9
 800441a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800441e:	f84a 3b04 	str.w	r3, [sl], #4
 8004422:	d82b      	bhi.n	800447c <__multiply+0x120>
 8004424:	f8cc 8004 	str.w	r8, [ip, #4]
 8004428:	9b01      	ldr	r3, [sp, #4]
 800442a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800442e:	3204      	adds	r2, #4
 8004430:	f1ba 0f00 	cmp.w	sl, #0
 8004434:	d020      	beq.n	8004478 <__multiply+0x11c>
 8004436:	682b      	ldr	r3, [r5, #0]
 8004438:	4689      	mov	r9, r1
 800443a:	46a8      	mov	r8, r5
 800443c:	f04f 0b00 	mov.w	fp, #0
 8004440:	f8b9 c000 	ldrh.w	ip, [r9]
 8004444:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004448:	fb0a 440c 	mla	r4, sl, ip, r4
 800444c:	445c      	add	r4, fp
 800444e:	46c4      	mov	ip, r8
 8004450:	b29b      	uxth	r3, r3
 8004452:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004456:	f84c 3b04 	str.w	r3, [ip], #4
 800445a:	f859 3b04 	ldr.w	r3, [r9], #4
 800445e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004462:	0c1b      	lsrs	r3, r3, #16
 8004464:	fb0a b303 	mla	r3, sl, r3, fp
 8004468:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800446c:	454f      	cmp	r7, r9
 800446e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004472:	d805      	bhi.n	8004480 <__multiply+0x124>
 8004474:	f8c8 3004 	str.w	r3, [r8, #4]
 8004478:	3504      	adds	r5, #4
 800447a:	e79b      	b.n	80043b4 <__multiply+0x58>
 800447c:	46d4      	mov	ip, sl
 800447e:	e7b3      	b.n	80043e8 <__multiply+0x8c>
 8004480:	46e0      	mov	r8, ip
 8004482:	e7dd      	b.n	8004440 <__multiply+0xe4>
 8004484:	3e01      	subs	r6, #1
 8004486:	e799      	b.n	80043bc <__multiply+0x60>

08004488 <__pow5mult>:
 8004488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800448c:	4615      	mov	r5, r2
 800448e:	f012 0203 	ands.w	r2, r2, #3
 8004492:	4606      	mov	r6, r0
 8004494:	460f      	mov	r7, r1
 8004496:	d007      	beq.n	80044a8 <__pow5mult+0x20>
 8004498:	3a01      	subs	r2, #1
 800449a:	4c21      	ldr	r4, [pc, #132]	; (8004520 <__pow5mult+0x98>)
 800449c:	2300      	movs	r3, #0
 800449e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80044a2:	f7ff fec9 	bl	8004238 <__multadd>
 80044a6:	4607      	mov	r7, r0
 80044a8:	10ad      	asrs	r5, r5, #2
 80044aa:	d035      	beq.n	8004518 <__pow5mult+0x90>
 80044ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80044ae:	b93c      	cbnz	r4, 80044c0 <__pow5mult+0x38>
 80044b0:	2010      	movs	r0, #16
 80044b2:	f7ff fe63 	bl	800417c <malloc>
 80044b6:	6270      	str	r0, [r6, #36]	; 0x24
 80044b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80044bc:	6004      	str	r4, [r0, #0]
 80044be:	60c4      	str	r4, [r0, #12]
 80044c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80044c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80044c8:	b94c      	cbnz	r4, 80044de <__pow5mult+0x56>
 80044ca:	f240 2171 	movw	r1, #625	; 0x271
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7ff ff3b 	bl	800434a <__i2b>
 80044d4:	2300      	movs	r3, #0
 80044d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80044da:	4604      	mov	r4, r0
 80044dc:	6003      	str	r3, [r0, #0]
 80044de:	f04f 0800 	mov.w	r8, #0
 80044e2:	07eb      	lsls	r3, r5, #31
 80044e4:	d50a      	bpl.n	80044fc <__pow5mult+0x74>
 80044e6:	4639      	mov	r1, r7
 80044e8:	4622      	mov	r2, r4
 80044ea:	4630      	mov	r0, r6
 80044ec:	f7ff ff36 	bl	800435c <__multiply>
 80044f0:	4639      	mov	r1, r7
 80044f2:	4681      	mov	r9, r0
 80044f4:	4630      	mov	r0, r6
 80044f6:	f7ff fe88 	bl	800420a <_Bfree>
 80044fa:	464f      	mov	r7, r9
 80044fc:	106d      	asrs	r5, r5, #1
 80044fe:	d00b      	beq.n	8004518 <__pow5mult+0x90>
 8004500:	6820      	ldr	r0, [r4, #0]
 8004502:	b938      	cbnz	r0, 8004514 <__pow5mult+0x8c>
 8004504:	4622      	mov	r2, r4
 8004506:	4621      	mov	r1, r4
 8004508:	4630      	mov	r0, r6
 800450a:	f7ff ff27 	bl	800435c <__multiply>
 800450e:	6020      	str	r0, [r4, #0]
 8004510:	f8c0 8000 	str.w	r8, [r0]
 8004514:	4604      	mov	r4, r0
 8004516:	e7e4      	b.n	80044e2 <__pow5mult+0x5a>
 8004518:	4638      	mov	r0, r7
 800451a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800451e:	bf00      	nop
 8004520:	080049e8 	.word	0x080049e8

08004524 <__lshift>:
 8004524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	460c      	mov	r4, r1
 800452a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800452e:	6923      	ldr	r3, [r4, #16]
 8004530:	6849      	ldr	r1, [r1, #4]
 8004532:	eb0a 0903 	add.w	r9, sl, r3
 8004536:	68a3      	ldr	r3, [r4, #8]
 8004538:	4607      	mov	r7, r0
 800453a:	4616      	mov	r6, r2
 800453c:	f109 0501 	add.w	r5, r9, #1
 8004540:	42ab      	cmp	r3, r5
 8004542:	db32      	blt.n	80045aa <__lshift+0x86>
 8004544:	4638      	mov	r0, r7
 8004546:	f7ff fe2c 	bl	80041a2 <_Balloc>
 800454a:	2300      	movs	r3, #0
 800454c:	4680      	mov	r8, r0
 800454e:	f100 0114 	add.w	r1, r0, #20
 8004552:	461a      	mov	r2, r3
 8004554:	4553      	cmp	r3, sl
 8004556:	db2b      	blt.n	80045b0 <__lshift+0x8c>
 8004558:	6920      	ldr	r0, [r4, #16]
 800455a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800455e:	f104 0314 	add.w	r3, r4, #20
 8004562:	f016 021f 	ands.w	r2, r6, #31
 8004566:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800456a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800456e:	d025      	beq.n	80045bc <__lshift+0x98>
 8004570:	f1c2 0e20 	rsb	lr, r2, #32
 8004574:	2000      	movs	r0, #0
 8004576:	681e      	ldr	r6, [r3, #0]
 8004578:	468a      	mov	sl, r1
 800457a:	4096      	lsls	r6, r2
 800457c:	4330      	orrs	r0, r6
 800457e:	f84a 0b04 	str.w	r0, [sl], #4
 8004582:	f853 0b04 	ldr.w	r0, [r3], #4
 8004586:	459c      	cmp	ip, r3
 8004588:	fa20 f00e 	lsr.w	r0, r0, lr
 800458c:	d814      	bhi.n	80045b8 <__lshift+0x94>
 800458e:	6048      	str	r0, [r1, #4]
 8004590:	b108      	cbz	r0, 8004596 <__lshift+0x72>
 8004592:	f109 0502 	add.w	r5, r9, #2
 8004596:	3d01      	subs	r5, #1
 8004598:	4638      	mov	r0, r7
 800459a:	f8c8 5010 	str.w	r5, [r8, #16]
 800459e:	4621      	mov	r1, r4
 80045a0:	f7ff fe33 	bl	800420a <_Bfree>
 80045a4:	4640      	mov	r0, r8
 80045a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045aa:	3101      	adds	r1, #1
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	e7c7      	b.n	8004540 <__lshift+0x1c>
 80045b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80045b4:	3301      	adds	r3, #1
 80045b6:	e7cd      	b.n	8004554 <__lshift+0x30>
 80045b8:	4651      	mov	r1, sl
 80045ba:	e7dc      	b.n	8004576 <__lshift+0x52>
 80045bc:	3904      	subs	r1, #4
 80045be:	f853 2b04 	ldr.w	r2, [r3], #4
 80045c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80045c6:	459c      	cmp	ip, r3
 80045c8:	d8f9      	bhi.n	80045be <__lshift+0x9a>
 80045ca:	e7e4      	b.n	8004596 <__lshift+0x72>

080045cc <__mcmp>:
 80045cc:	6903      	ldr	r3, [r0, #16]
 80045ce:	690a      	ldr	r2, [r1, #16]
 80045d0:	1a9b      	subs	r3, r3, r2
 80045d2:	b530      	push	{r4, r5, lr}
 80045d4:	d10c      	bne.n	80045f0 <__mcmp+0x24>
 80045d6:	0092      	lsls	r2, r2, #2
 80045d8:	3014      	adds	r0, #20
 80045da:	3114      	adds	r1, #20
 80045dc:	1884      	adds	r4, r0, r2
 80045de:	4411      	add	r1, r2
 80045e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80045e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80045e8:	4295      	cmp	r5, r2
 80045ea:	d003      	beq.n	80045f4 <__mcmp+0x28>
 80045ec:	d305      	bcc.n	80045fa <__mcmp+0x2e>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd30      	pop	{r4, r5, pc}
 80045f4:	42a0      	cmp	r0, r4
 80045f6:	d3f3      	bcc.n	80045e0 <__mcmp+0x14>
 80045f8:	e7fa      	b.n	80045f0 <__mcmp+0x24>
 80045fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045fe:	e7f7      	b.n	80045f0 <__mcmp+0x24>

08004600 <__mdiff>:
 8004600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004604:	460d      	mov	r5, r1
 8004606:	4607      	mov	r7, r0
 8004608:	4611      	mov	r1, r2
 800460a:	4628      	mov	r0, r5
 800460c:	4614      	mov	r4, r2
 800460e:	f7ff ffdd 	bl	80045cc <__mcmp>
 8004612:	1e06      	subs	r6, r0, #0
 8004614:	d108      	bne.n	8004628 <__mdiff+0x28>
 8004616:	4631      	mov	r1, r6
 8004618:	4638      	mov	r0, r7
 800461a:	f7ff fdc2 	bl	80041a2 <_Balloc>
 800461e:	2301      	movs	r3, #1
 8004620:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004628:	bfa4      	itt	ge
 800462a:	4623      	movge	r3, r4
 800462c:	462c      	movge	r4, r5
 800462e:	4638      	mov	r0, r7
 8004630:	6861      	ldr	r1, [r4, #4]
 8004632:	bfa6      	itte	ge
 8004634:	461d      	movge	r5, r3
 8004636:	2600      	movge	r6, #0
 8004638:	2601      	movlt	r6, #1
 800463a:	f7ff fdb2 	bl	80041a2 <_Balloc>
 800463e:	692b      	ldr	r3, [r5, #16]
 8004640:	60c6      	str	r6, [r0, #12]
 8004642:	6926      	ldr	r6, [r4, #16]
 8004644:	f105 0914 	add.w	r9, r5, #20
 8004648:	f104 0214 	add.w	r2, r4, #20
 800464c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004650:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004654:	f100 0514 	add.w	r5, r0, #20
 8004658:	f04f 0e00 	mov.w	lr, #0
 800465c:	f852 ab04 	ldr.w	sl, [r2], #4
 8004660:	f859 4b04 	ldr.w	r4, [r9], #4
 8004664:	fa1e f18a 	uxtah	r1, lr, sl
 8004668:	b2a3      	uxth	r3, r4
 800466a:	1ac9      	subs	r1, r1, r3
 800466c:	0c23      	lsrs	r3, r4, #16
 800466e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004672:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004676:	b289      	uxth	r1, r1
 8004678:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800467c:	45c8      	cmp	r8, r9
 800467e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004682:	4694      	mov	ip, r2
 8004684:	f845 3b04 	str.w	r3, [r5], #4
 8004688:	d8e8      	bhi.n	800465c <__mdiff+0x5c>
 800468a:	45bc      	cmp	ip, r7
 800468c:	d304      	bcc.n	8004698 <__mdiff+0x98>
 800468e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004692:	b183      	cbz	r3, 80046b6 <__mdiff+0xb6>
 8004694:	6106      	str	r6, [r0, #16]
 8004696:	e7c5      	b.n	8004624 <__mdiff+0x24>
 8004698:	f85c 1b04 	ldr.w	r1, [ip], #4
 800469c:	fa1e f381 	uxtah	r3, lr, r1
 80046a0:	141a      	asrs	r2, r3, #16
 80046a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80046b0:	f845 3b04 	str.w	r3, [r5], #4
 80046b4:	e7e9      	b.n	800468a <__mdiff+0x8a>
 80046b6:	3e01      	subs	r6, #1
 80046b8:	e7e9      	b.n	800468e <__mdiff+0x8e>

080046ba <__d2b>:
 80046ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80046be:	460e      	mov	r6, r1
 80046c0:	2101      	movs	r1, #1
 80046c2:	ec59 8b10 	vmov	r8, r9, d0
 80046c6:	4615      	mov	r5, r2
 80046c8:	f7ff fd6b 	bl	80041a2 <_Balloc>
 80046cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80046d0:	4607      	mov	r7, r0
 80046d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80046d6:	bb34      	cbnz	r4, 8004726 <__d2b+0x6c>
 80046d8:	9301      	str	r3, [sp, #4]
 80046da:	f1b8 0300 	subs.w	r3, r8, #0
 80046de:	d027      	beq.n	8004730 <__d2b+0x76>
 80046e0:	a802      	add	r0, sp, #8
 80046e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80046e6:	f7ff fe01 	bl	80042ec <__lo0bits>
 80046ea:	9900      	ldr	r1, [sp, #0]
 80046ec:	b1f0      	cbz	r0, 800472c <__d2b+0x72>
 80046ee:	9a01      	ldr	r2, [sp, #4]
 80046f0:	f1c0 0320 	rsb	r3, r0, #32
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	430b      	orrs	r3, r1
 80046fa:	40c2      	lsrs	r2, r0
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	9201      	str	r2, [sp, #4]
 8004700:	9b01      	ldr	r3, [sp, #4]
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf14      	ite	ne
 8004708:	2102      	movne	r1, #2
 800470a:	2101      	moveq	r1, #1
 800470c:	6139      	str	r1, [r7, #16]
 800470e:	b1c4      	cbz	r4, 8004742 <__d2b+0x88>
 8004710:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004714:	4404      	add	r4, r0
 8004716:	6034      	str	r4, [r6, #0]
 8004718:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800471c:	6028      	str	r0, [r5, #0]
 800471e:	4638      	mov	r0, r7
 8004720:	b003      	add	sp, #12
 8004722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800472a:	e7d5      	b.n	80046d8 <__d2b+0x1e>
 800472c:	6179      	str	r1, [r7, #20]
 800472e:	e7e7      	b.n	8004700 <__d2b+0x46>
 8004730:	a801      	add	r0, sp, #4
 8004732:	f7ff fddb 	bl	80042ec <__lo0bits>
 8004736:	9b01      	ldr	r3, [sp, #4]
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	2101      	movs	r1, #1
 800473c:	6139      	str	r1, [r7, #16]
 800473e:	3020      	adds	r0, #32
 8004740:	e7e5      	b.n	800470e <__d2b+0x54>
 8004742:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004746:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800474a:	6030      	str	r0, [r6, #0]
 800474c:	6918      	ldr	r0, [r3, #16]
 800474e:	f7ff fdae 	bl	80042ae <__hi0bits>
 8004752:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004756:	e7e1      	b.n	800471c <__d2b+0x62>

08004758 <_calloc_r>:
 8004758:	b538      	push	{r3, r4, r5, lr}
 800475a:	fb02 f401 	mul.w	r4, r2, r1
 800475e:	4621      	mov	r1, r4
 8004760:	f000 f808 	bl	8004774 <_malloc_r>
 8004764:	4605      	mov	r5, r0
 8004766:	b118      	cbz	r0, 8004770 <_calloc_r+0x18>
 8004768:	4622      	mov	r2, r4
 800476a:	2100      	movs	r1, #0
 800476c:	f7fe fb62 	bl	8002e34 <memset>
 8004770:	4628      	mov	r0, r5
 8004772:	bd38      	pop	{r3, r4, r5, pc}

08004774 <_malloc_r>:
 8004774:	b570      	push	{r4, r5, r6, lr}
 8004776:	1ccd      	adds	r5, r1, #3
 8004778:	f025 0503 	bic.w	r5, r5, #3
 800477c:	3508      	adds	r5, #8
 800477e:	2d0c      	cmp	r5, #12
 8004780:	bf38      	it	cc
 8004782:	250c      	movcc	r5, #12
 8004784:	2d00      	cmp	r5, #0
 8004786:	4606      	mov	r6, r0
 8004788:	db01      	blt.n	800478e <_malloc_r+0x1a>
 800478a:	42a9      	cmp	r1, r5
 800478c:	d903      	bls.n	8004796 <_malloc_r+0x22>
 800478e:	230c      	movs	r3, #12
 8004790:	6033      	str	r3, [r6, #0]
 8004792:	2000      	movs	r0, #0
 8004794:	bd70      	pop	{r4, r5, r6, pc}
 8004796:	f000 f869 	bl	800486c <__malloc_lock>
 800479a:	4a21      	ldr	r2, [pc, #132]	; (8004820 <_malloc_r+0xac>)
 800479c:	6814      	ldr	r4, [r2, #0]
 800479e:	4621      	mov	r1, r4
 80047a0:	b991      	cbnz	r1, 80047c8 <_malloc_r+0x54>
 80047a2:	4c20      	ldr	r4, [pc, #128]	; (8004824 <_malloc_r+0xb0>)
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	b91b      	cbnz	r3, 80047b0 <_malloc_r+0x3c>
 80047a8:	4630      	mov	r0, r6
 80047aa:	f000 f83d 	bl	8004828 <_sbrk_r>
 80047ae:	6020      	str	r0, [r4, #0]
 80047b0:	4629      	mov	r1, r5
 80047b2:	4630      	mov	r0, r6
 80047b4:	f000 f838 	bl	8004828 <_sbrk_r>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d124      	bne.n	8004806 <_malloc_r+0x92>
 80047bc:	230c      	movs	r3, #12
 80047be:	6033      	str	r3, [r6, #0]
 80047c0:	4630      	mov	r0, r6
 80047c2:	f000 f854 	bl	800486e <__malloc_unlock>
 80047c6:	e7e4      	b.n	8004792 <_malloc_r+0x1e>
 80047c8:	680b      	ldr	r3, [r1, #0]
 80047ca:	1b5b      	subs	r3, r3, r5
 80047cc:	d418      	bmi.n	8004800 <_malloc_r+0x8c>
 80047ce:	2b0b      	cmp	r3, #11
 80047d0:	d90f      	bls.n	80047f2 <_malloc_r+0x7e>
 80047d2:	600b      	str	r3, [r1, #0]
 80047d4:	50cd      	str	r5, [r1, r3]
 80047d6:	18cc      	adds	r4, r1, r3
 80047d8:	4630      	mov	r0, r6
 80047da:	f000 f848 	bl	800486e <__malloc_unlock>
 80047de:	f104 000b 	add.w	r0, r4, #11
 80047e2:	1d23      	adds	r3, r4, #4
 80047e4:	f020 0007 	bic.w	r0, r0, #7
 80047e8:	1ac3      	subs	r3, r0, r3
 80047ea:	d0d3      	beq.n	8004794 <_malloc_r+0x20>
 80047ec:	425a      	negs	r2, r3
 80047ee:	50e2      	str	r2, [r4, r3]
 80047f0:	e7d0      	b.n	8004794 <_malloc_r+0x20>
 80047f2:	428c      	cmp	r4, r1
 80047f4:	684b      	ldr	r3, [r1, #4]
 80047f6:	bf16      	itet	ne
 80047f8:	6063      	strne	r3, [r4, #4]
 80047fa:	6013      	streq	r3, [r2, #0]
 80047fc:	460c      	movne	r4, r1
 80047fe:	e7eb      	b.n	80047d8 <_malloc_r+0x64>
 8004800:	460c      	mov	r4, r1
 8004802:	6849      	ldr	r1, [r1, #4]
 8004804:	e7cc      	b.n	80047a0 <_malloc_r+0x2c>
 8004806:	1cc4      	adds	r4, r0, #3
 8004808:	f024 0403 	bic.w	r4, r4, #3
 800480c:	42a0      	cmp	r0, r4
 800480e:	d005      	beq.n	800481c <_malloc_r+0xa8>
 8004810:	1a21      	subs	r1, r4, r0
 8004812:	4630      	mov	r0, r6
 8004814:	f000 f808 	bl	8004828 <_sbrk_r>
 8004818:	3001      	adds	r0, #1
 800481a:	d0cf      	beq.n	80047bc <_malloc_r+0x48>
 800481c:	6025      	str	r5, [r4, #0]
 800481e:	e7db      	b.n	80047d8 <_malloc_r+0x64>
 8004820:	20000200 	.word	0x20000200
 8004824:	20000204 	.word	0x20000204

08004828 <_sbrk_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	4c06      	ldr	r4, [pc, #24]	; (8004844 <_sbrk_r+0x1c>)
 800482c:	2300      	movs	r3, #0
 800482e:	4605      	mov	r5, r0
 8004830:	4608      	mov	r0, r1
 8004832:	6023      	str	r3, [r4, #0]
 8004834:	f7fe fa68 	bl	8002d08 <_sbrk>
 8004838:	1c43      	adds	r3, r0, #1
 800483a:	d102      	bne.n	8004842 <_sbrk_r+0x1a>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	b103      	cbz	r3, 8004842 <_sbrk_r+0x1a>
 8004840:	602b      	str	r3, [r5, #0]
 8004842:	bd38      	pop	{r3, r4, r5, pc}
 8004844:	20000270 	.word	0x20000270

08004848 <__ascii_mbtowc>:
 8004848:	b082      	sub	sp, #8
 800484a:	b901      	cbnz	r1, 800484e <__ascii_mbtowc+0x6>
 800484c:	a901      	add	r1, sp, #4
 800484e:	b142      	cbz	r2, 8004862 <__ascii_mbtowc+0x1a>
 8004850:	b14b      	cbz	r3, 8004866 <__ascii_mbtowc+0x1e>
 8004852:	7813      	ldrb	r3, [r2, #0]
 8004854:	600b      	str	r3, [r1, #0]
 8004856:	7812      	ldrb	r2, [r2, #0]
 8004858:	1c10      	adds	r0, r2, #0
 800485a:	bf18      	it	ne
 800485c:	2001      	movne	r0, #1
 800485e:	b002      	add	sp, #8
 8004860:	4770      	bx	lr
 8004862:	4610      	mov	r0, r2
 8004864:	e7fb      	b.n	800485e <__ascii_mbtowc+0x16>
 8004866:	f06f 0001 	mvn.w	r0, #1
 800486a:	e7f8      	b.n	800485e <__ascii_mbtowc+0x16>

0800486c <__malloc_lock>:
 800486c:	4770      	bx	lr

0800486e <__malloc_unlock>:
 800486e:	4770      	bx	lr

08004870 <__ascii_wctomb>:
 8004870:	b149      	cbz	r1, 8004886 <__ascii_wctomb+0x16>
 8004872:	2aff      	cmp	r2, #255	; 0xff
 8004874:	bf85      	ittet	hi
 8004876:	238a      	movhi	r3, #138	; 0x8a
 8004878:	6003      	strhi	r3, [r0, #0]
 800487a:	700a      	strbls	r2, [r1, #0]
 800487c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004880:	bf98      	it	ls
 8004882:	2001      	movls	r0, #1
 8004884:	4770      	bx	lr
 8004886:	4608      	mov	r0, r1
 8004888:	4770      	bx	lr
	...

0800488c <_init>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	bf00      	nop
 8004890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004892:	bc08      	pop	{r3}
 8004894:	469e      	mov	lr, r3
 8004896:	4770      	bx	lr

08004898 <_fini>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	bf00      	nop
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr
